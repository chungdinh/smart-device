                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module nRF24L01
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _VCOM_puts
                                     12 	.globl _sprintf
                                     13 	.globl _SPI_GetFlagStatus
                                     14 	.globl _SPI_ReceiveData
                                     15 	.globl _SPI_SendData
                                     16 	.globl _SPI_Cmd
                                     17 	.globl _SPI_Init
                                     18 	.globl _SPI_DeInit
                                     19 	.globl _GPIO_ExternalPullUpConfig
                                     20 	.globl _GPIO_WriteLow
                                     21 	.globl _GPIO_WriteHigh
                                     22 	.globl _GPIO_Init
                                     23 	.globl _CLK_PeripheralClockConfig
                                     24 	.globl _RX_ADDRESS_P5
                                     25 	.globl _RX_ADDRESS_P4
                                     26 	.globl _RX_ADDRESS_P3
                                     27 	.globl _RX_ADDRESS_P2
                                     28 	.globl _RX_ADDRESS_P1
                                     29 	.globl _RX_ADDRESS_P0
                                     30 	.globl _RX_ADDRESS
                                     31 	.globl _TX_ADDRESS
                                     32 	.globl _CHANNEL
                                     33 	.globl _nRF_delay
                                     34 	.globl _nRF_Pin_Conf
                                     35 	.globl _nRF_Init
                                     36 	.globl _nRF_spiTransfer
                                     37 	.globl _nRF_Read
                                     38 	.globl _nRF_Write_Reg
                                     39 	.globl _nRF_SPI_Read_Buf
                                     40 	.globl _nRF_SPI_Write_Buf
                                     41 	.globl _nRF_Set_RxMode
                                     42 	.globl _nRF_Set_TxMode
                                     43 	.globl _nRF_Set_Channel
                                     44 	.globl _nRF_ClearSend
                                     45 	.globl _nRF_Set_Tx_Addr
                                     46 	.globl _nRF_Set_Rx_Addr
                                     47 	.globl _nRF_Clear_Status
                                     48 	.globl _nRF_Read_Status
                                     49 	.globl _nRF_Read_Lost_Packet
                                     50 	.globl _nRF_Read_Power_Detector
                                     51 	.globl _nRF_Read_Retransmitted_Packet
                                     52 	.globl _nRF_RxPacket
                                     53 	.globl _nRF_TxPacket
                                     54 	.globl _nRF_Debug
                                     55 ;--------------------------------------------------------
                                     56 ; ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area DATA
      000078                         59 _CHANNEL::
      000078                         60 	.ds 1
      000079                         61 _TX_ADDRESS::
      000079                         62 	.ds 5
      00007E                         63 _RX_ADDRESS::
      00007E                         64 	.ds 5
      000083                         65 _RX_ADDRESS_P0::
      000083                         66 	.ds 5
      000088                         67 _RX_ADDRESS_P1::
      000088                         68 	.ds 5
      00008D                         69 _RX_ADDRESS_P2::
      00008D                         70 	.ds 1
      00008E                         71 _RX_ADDRESS_P3::
      00008E                         72 	.ds 1
      00008F                         73 _RX_ADDRESS_P4::
      00008F                         74 	.ds 1
      000090                         75 _RX_ADDRESS_P5::
      000090                         76 	.ds 1
                                     77 ;--------------------------------------------------------
                                     78 ; ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area INITIALIZED
                                     81 ;--------------------------------------------------------
                                     82 ; absolute external ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area DABS (ABS)
                                     85 ;--------------------------------------------------------
                                     86 ; global & static initialisations
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME
                                     89 	.area GSINIT
                                     90 	.area GSFINAL
                                     91 	.area GSINIT
                                     92 ;--------------------------------------------------------
                                     93 ; Home
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME
                                     96 	.area HOME
                                     97 ;--------------------------------------------------------
                                     98 ; code
                                     99 ;--------------------------------------------------------
                                    100 	.area CODE
                                    101 ;	user/nRF24L01.c: 19: void nRF_delay(uint32_t cnt)
                                    102 ;	-----------------------------------------
                                    103 ;	 function nRF_delay
                                    104 ;	-----------------------------------------
      0087D7                        105 _nRF_delay:
      0087D7 52 0C            [ 2]  106 	sub	sp, #12
      0087D9 16 0F            [ 2]  107 	ldw	y, (0x0f, sp)
      0087DB 17 09            [ 2]  108 	ldw	(0x09, sp), y
      0087DD 1E 11            [ 2]  109 	ldw	x, (0x11, sp)
      0087DF                        110 00107$:
                                    111 ;	user/nRF24L01.c: 23: for (; cnt > 0; cnt--) {
      0087DF 5D               [ 2]  112 	tnzw	x
      0087E0 26 04            [ 1]  113 	jrne	00130$
      0087E2 16 09            [ 2]  114 	ldw	y, (0x09, sp)
      0087E4 27 3F            [ 1]  115 	jreq	00109$
      0087E6                        116 00130$:
                                    117 ;	user/nRF24L01.c: 24: for (i = 0; i < 3000; i++)
      0087E6 90 AE 0B B8      [ 2]  118 	ldw	y, #0x0bb8
      0087EA 17 03            [ 2]  119 	ldw	(0x03, sp), y
      0087EC 0F 02            [ 1]  120 	clr	(0x02, sp)
      0087EE 0F 01            [ 1]  121 	clr	(0x01, sp)
      0087F0                        122 00105$:
      0087F0 16 03            [ 2]  123 	ldw	y, (0x03, sp)
      0087F2 72 A2 00 01      [ 2]  124 	subw	y, #0x0001
      0087F6 17 07            [ 2]  125 	ldw	(0x07, sp), y
      0087F8 7B 02            [ 1]  126 	ld	a, (0x02, sp)
      0087FA A2 00            [ 1]  127 	sbc	a, #0x00
      0087FC 6B 06            [ 1]  128 	ld	(0x06, sp), a
      0087FE 7B 01            [ 1]  129 	ld	a, (0x01, sp)
      008800 A2 00            [ 1]  130 	sbc	a, #0x00
      008802 6B 05            [ 1]  131 	ld	(0x05, sp), a
      008804 16 07            [ 2]  132 	ldw	y, (0x07, sp)
      008806 17 03            [ 2]  133 	ldw	(0x03, sp), y
      008808 16 05            [ 2]  134 	ldw	y, (0x05, sp)
      00880A 17 01            [ 2]  135 	ldw	(0x01, sp), y
      00880C 16 07            [ 2]  136 	ldw	y, (0x07, sp)
      00880E 26 E0            [ 1]  137 	jrne	00105$
      008810 16 05            [ 2]  138 	ldw	y, (0x05, sp)
      008812 26 DC            [ 1]  139 	jrne	00105$
                                    140 ;	user/nRF24L01.c: 23: for (; cnt > 0; cnt--) {
      008814 1D 00 01         [ 2]  141 	subw	x, #0x0001
      008817 7B 0A            [ 1]  142 	ld	a, (0x0a, sp)
      008819 A2 00            [ 1]  143 	sbc	a, #0x00
      00881B 6B 0A            [ 1]  144 	ld	(0x0a, sp), a
      00881D 7B 09            [ 1]  145 	ld	a, (0x09, sp)
      00881F A2 00            [ 1]  146 	sbc	a, #0x00
      008821 6B 09            [ 1]  147 	ld	(0x09, sp), a
      008823 20 BA            [ 2]  148 	jra	00107$
      008825                        149 00109$:
      008825 5B 0C            [ 2]  150 	addw	sp, #12
      008827 81               [ 4]  151 	ret
                                    152 ;	user/nRF24L01.c: 29: void nRF_Pin_Conf(void)
                                    153 ;	-----------------------------------------
                                    154 ;	 function nRF_Pin_Conf
                                    155 ;	-----------------------------------------
      008828                        156 _nRF_Pin_Conf:
                                    157 ;	user/nRF24L01.c: 31: CLK_PeripheralClockConfig(CLK_PERIPHERAL_SPI , ENABLE);
      008828 4B 01            [ 1]  158 	push	#0x01
      00882A 4B 01            [ 1]  159 	push	#0x01
      00882C CD 97 25         [ 4]  160 	call	_CLK_PeripheralClockConfig
      00882F 85               [ 2]  161 	popw	x
                                    162 ;	user/nRF24L01.c: 32: GPIO_ExternalPullUpConfig(GPIOC, (GPIO_Pin_TypeDef)(GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7), ENABLE);
      008830 4B 01            [ 1]  163 	push	#0x01
      008832 4B E0            [ 1]  164 	push	#0xe0
      008834 4B 0A            [ 1]  165 	push	#0x0a
      008836 4B 50            [ 1]  166 	push	#0x50
      008838 CD 98 CF         [ 4]  167 	call	_GPIO_ExternalPullUpConfig
      00883B 5B 04            [ 2]  168 	addw	sp, #4
                                    169 ;	user/nRF24L01.c: 33: GPIO_Init(GPIOF, CE, GPIO_MODE_OUT_PP_HIGH_FAST);
      00883D 4B F0            [ 1]  170 	push	#0xf0
      00883F 4B 10            [ 1]  171 	push	#0x10
      008841 4B 19            [ 1]  172 	push	#0x19
      008843 4B 50            [ 1]  173 	push	#0x50
      008845 CD 98 0F         [ 4]  174 	call	_GPIO_Init
      008848 5B 04            [ 2]  175 	addw	sp, #4
                                    176 ;	user/nRF24L01.c: 34: GPIO_Init(GPIOE, CSN, GPIO_MODE_OUT_PP_HIGH_FAST);
      00884A 4B F0            [ 1]  177 	push	#0xf0
      00884C 4B 20            [ 1]  178 	push	#0x20
      00884E 4B 14            [ 1]  179 	push	#0x14
      008850 4B 50            [ 1]  180 	push	#0x50
      008852 CD 98 0F         [ 4]  181 	call	_GPIO_Init
      008855 5B 04            [ 2]  182 	addw	sp, #4
                                    183 ;	user/nRF24L01.c: 36: SPI_DeInit();
      008857 CD 99 09         [ 4]  184 	call	_SPI_DeInit
                                    185 ;	user/nRF24L01.c: 38: SPI_Init(SPI_FIRSTBIT_MSB, SPI_BAUDRATEPRESCALER_4, SPI_MODE_MASTER,
      00885A 4B 07            [ 1]  186 	push	#0x07
      00885C 4B 02            [ 1]  187 	push	#0x02
      00885E 4B 00            [ 1]  188 	push	#0x00
      008860 4B 00            [ 1]  189 	push	#0x00
      008862 4B 00            [ 1]  190 	push	#0x00
      008864 4B 04            [ 1]  191 	push	#0x04
      008866 4B 08            [ 1]  192 	push	#0x08
      008868 4B 00            [ 1]  193 	push	#0x00
      00886A CD 99 1E         [ 4]  194 	call	_SPI_Init
      00886D 5B 08            [ 2]  195 	addw	sp, #8
                                    196 ;	user/nRF24L01.c: 42: SPI_Cmd(ENABLE);
      00886F 4B 01            [ 1]  197 	push	#0x01
      008871 CD 99 59         [ 4]  198 	call	_SPI_Cmd
      008874 84               [ 1]  199 	pop	a
                                    200 ;	user/nRF24L01.c: 43: ClrCE;
      008875 4B 10            [ 1]  201 	push	#0x10
      008877 4B 19            [ 1]  202 	push	#0x19
      008879 4B 50            [ 1]  203 	push	#0x50
      00887B CD 98 AA         [ 4]  204 	call	_GPIO_WriteLow
      00887E 5B 03            [ 2]  205 	addw	sp, #3
                                    206 ;	user/nRF24L01.c: 44: nRF_delay(10);
      008880 4B 0A            [ 1]  207 	push	#0x0a
      008882 5F               [ 1]  208 	clrw	x
      008883 89               [ 2]  209 	pushw	x
      008884 4B 00            [ 1]  210 	push	#0x00
      008886 CD 87 D7         [ 4]  211 	call	_nRF_delay
      008889 5B 04            [ 2]  212 	addw	sp, #4
                                    213 ;	user/nRF24L01.c: 45: SetCSN;
      00888B 4B 20            [ 1]  214 	push	#0x20
      00888D 4B 14            [ 1]  215 	push	#0x14
      00888F 4B 50            [ 1]  216 	push	#0x50
      008891 CD 98 A3         [ 4]  217 	call	_GPIO_WriteHigh
      008894 5B 03            [ 2]  218 	addw	sp, #3
      008896 81               [ 4]  219 	ret
                                    220 ;	user/nRF24L01.c: 48: void nRF_Init(void)
                                    221 ;	-----------------------------------------
                                    222 ;	 function nRF_Init
                                    223 ;	-----------------------------------------
      008897                        224 _nRF_Init:
                                    225 ;	user/nRF24L01.c: 50: nRF_Pin_Conf();
      008897 CD 88 28         [ 4]  226 	call	_nRF_Pin_Conf
                                    227 ;	user/nRF24L01.c: 51: ClrCE;
      00889A 4B 10            [ 1]  228 	push	#0x10
      00889C 4B 19            [ 1]  229 	push	#0x19
      00889E 4B 50            [ 1]  230 	push	#0x50
      0088A0 CD 98 AA         [ 4]  231 	call	_GPIO_WriteLow
      0088A3 5B 03            [ 2]  232 	addw	sp, #3
                                    233 ;	user/nRF24L01.c: 52: nRF_delay(10);
      0088A5 4B 0A            [ 1]  234 	push	#0x0a
      0088A7 5F               [ 1]  235 	clrw	x
      0088A8 89               [ 2]  236 	pushw	x
      0088A9 4B 00            [ 1]  237 	push	#0x00
      0088AB CD 87 D7         [ 4]  238 	call	_nRF_delay
      0088AE 5B 04            [ 2]  239 	addw	sp, #4
                                    240 ;	user/nRF24L01.c: 53: nRF_Write_Reg(W_REGISTER + CONFIG, 0x0E); //Enable CRC,power up and ptx,CRC 2 Byte
      0088B0 4B 0E            [ 1]  241 	push	#0x0e
      0088B2 4B 20            [ 1]  242 	push	#0x20
      0088B4 CD 89 F0         [ 4]  243 	call	_nRF_Write_Reg
      0088B7 85               [ 2]  244 	popw	x
                                    245 ;	user/nRF24L01.c: 55: nRF_delay(10);
      0088B8 4B 0A            [ 1]  246 	push	#0x0a
      0088BA 5F               [ 1]  247 	clrw	x
      0088BB 89               [ 2]  248 	pushw	x
      0088BC 4B 00            [ 1]  249 	push	#0x00
      0088BE CD 87 D7         [ 4]  250 	call	_nRF_delay
      0088C1 5B 04            [ 2]  251 	addw	sp, #4
                                    252 ;	user/nRF24L01.c: 56: nRF_Write_Reg(W_REGISTER + EN_AA, 0x3F); //Enable Auto.Ack:Pipe0-5
      0088C3 4B 3F            [ 1]  253 	push	#0x3f
      0088C5 4B 21            [ 1]  254 	push	#0x21
      0088C7 CD 89 F0         [ 4]  255 	call	_nRF_Write_Reg
      0088CA 85               [ 2]  256 	popw	x
                                    257 ;	user/nRF24L01.c: 57: nRF_Write_Reg(W_REGISTER + EN_RXADDR, 0x3F); //Enable data P0,P1,P2,P3,P4,P5
      0088CB 4B 3F            [ 1]  258 	push	#0x3f
      0088CD 4B 22            [ 1]  259 	push	#0x22
      0088CF CD 89 F0         [ 4]  260 	call	_nRF_Write_Reg
      0088D2 85               [ 2]  261 	popw	x
                                    262 ;	user/nRF24L01.c: 58: nRF_Write_Reg(W_REGISTER + SETUP_AW, 0x03); //Address width 5 bytes
      0088D3 4B 03            [ 1]  263 	push	#0x03
      0088D5 4B 23            [ 1]  264 	push	#0x23
      0088D7 CD 89 F0         [ 4]  265 	call	_nRF_Write_Reg
      0088DA 85               [ 2]  266 	popw	x
                                    267 ;	user/nRF24L01.c: 59: nRF_Write_Reg(W_REGISTER + SETUP_RETR, 0xFA); // 4000us Auto Retransmit Delay, 10 Auto Retransmit Count	
      0088DB 4B FA            [ 1]  268 	push	#0xfa
      0088DD 4B 24            [ 1]  269 	push	#0x24
      0088DF CD 89 F0         [ 4]  270 	call	_nRF_Write_Reg
      0088E2 85               [ 2]  271 	popw	x
                                    272 ;	user/nRF24L01.c: 60: nRF_Write_Reg(W_REGISTER + RF_CH, CHANNEL);   // Select RF channel  F = 2400 Mhz + RF_CH Mhz  ex: RF_CH = 0  => F = 2.4 Ghz
      0088E3 3B 00 78         [ 1]  273 	push	_CHANNEL+0
      0088E6 4B 25            [ 1]  274 	push	#0x25
      0088E8 CD 89 F0         [ 4]  275 	call	_nRF_Write_Reg
      0088EB 85               [ 2]  276 	popw	x
                                    277 ;	user/nRF24L01.c: 61: nRF_Write_Reg(W_REGISTER + RF_SETUP, RF_PWR_0dBm|RF_DR_2Mbps);// Setup power 0dbm, rate 2Mbps
      0088EC 4B 0E            [ 1]  278 	push	#0x0e
      0088EE 4B 26            [ 1]  279 	push	#0x26
      0088F0 CD 89 F0         [ 4]  280 	call	_nRF_Write_Reg
      0088F3 85               [ 2]  281 	popw	x
                                    282 ;	user/nRF24L01.c: 62: nRF_Write_Reg(W_REGISTER + STATUS, 0x70); // Clear Data Ready RX FIFO interrupt,Data Sent TX FIFO interrupt,Maximum number of TX retransmits interrupt
      0088F4 4B 70            [ 1]  283 	push	#0x70
      0088F6 4B 27            [ 1]  284 	push	#0x27
      0088F8 CD 89 F0         [ 4]  285 	call	_nRF_Write_Reg
      0088FB 85               [ 2]  286 	popw	x
                                    287 ;	user/nRF24L01.c: 64: nRF_SPI_Write_Buf(W_REGISTER + RX_ADDR_P0, RX_ADDRESS_P0, ADR_WIDTH); // Write address into rx_add_p0
      0088FC AE 00 83         [ 2]  288 	ldw	x, #_RX_ADDRESS_P0+0
      0088FF 4B 05            [ 1]  289 	push	#0x05
      008901 89               [ 2]  290 	pushw	x
      008902 4B 2A            [ 1]  291 	push	#0x2a
      008904 CD 8A 5F         [ 4]  292 	call	_nRF_SPI_Write_Buf
      008907 5B 04            [ 2]  293 	addw	sp, #4
                                    294 ;	user/nRF24L01.c: 65: nRF_SPI_Write_Buf(W_REGISTER + RX_ADDR_P1, RX_ADDRESS_P1, ADR_WIDTH); 	// Write address into rx_add_p1
      008909 AE 00 88         [ 2]  295 	ldw	x, #_RX_ADDRESS_P1+0
      00890C 4B 05            [ 1]  296 	push	#0x05
      00890E 89               [ 2]  297 	pushw	x
      00890F 4B 2B            [ 1]  298 	push	#0x2b
      008911 CD 8A 5F         [ 4]  299 	call	_nRF_SPI_Write_Buf
      008914 5B 04            [ 2]  300 	addw	sp, #4
                                    301 ;	user/nRF24L01.c: 67: nRF_Write_Reg(W_REGISTER + RX_ADDR_P2, RX_ADDRESS_P2[0]); // Write address into rx_add_p2
      008916 AE 00 8D         [ 2]  302 	ldw	x, #_RX_ADDRESS_P2+0
      008919 F6               [ 1]  303 	ld	a, (x)
      00891A 88               [ 1]  304 	push	a
      00891B 4B 2C            [ 1]  305 	push	#0x2c
      00891D CD 89 F0         [ 4]  306 	call	_nRF_Write_Reg
      008920 85               [ 2]  307 	popw	x
                                    308 ;	user/nRF24L01.c: 68: nRF_Write_Reg(W_REGISTER + RX_ADDR_P3, RX_ADDRESS_P3[0]); // Write address into rx_add_p3
      008921 AE 00 8E         [ 2]  309 	ldw	x, #_RX_ADDRESS_P3+0
      008924 F6               [ 1]  310 	ld	a, (x)
      008925 88               [ 1]  311 	push	a
      008926 4B 2D            [ 1]  312 	push	#0x2d
      008928 CD 89 F0         [ 4]  313 	call	_nRF_Write_Reg
      00892B 85               [ 2]  314 	popw	x
                                    315 ;	user/nRF24L01.c: 69: nRF_Write_Reg(W_REGISTER + RX_ADDR_P4, RX_ADDRESS_P4[0]); // Write address into rx_add_p4
      00892C AE 00 8F         [ 2]  316 	ldw	x, #_RX_ADDRESS_P4+0
      00892F F6               [ 1]  317 	ld	a, (x)
      008930 88               [ 1]  318 	push	a
      008931 4B 2E            [ 1]  319 	push	#0x2e
      008933 CD 89 F0         [ 4]  320 	call	_nRF_Write_Reg
      008936 85               [ 2]  321 	popw	x
                                    322 ;	user/nRF24L01.c: 70: nRF_Write_Reg(W_REGISTER + RX_ADDR_P5, RX_ADDRESS_P5[0]); // Write address into rx_add_p5
      008937 AE 00 90         [ 2]  323 	ldw	x, #_RX_ADDRESS_P5+0
      00893A F6               [ 1]  324 	ld	a, (x)
      00893B 88               [ 1]  325 	push	a
      00893C 4B 2F            [ 1]  326 	push	#0x2f
      00893E CD 89 F0         [ 4]  327 	call	_nRF_Write_Reg
      008941 85               [ 2]  328 	popw	x
                                    329 ;	user/nRF24L01.c: 72: nRF_SPI_Write_Buf(W_REGISTER + TX_ADDR, TX_ADDRESS, ADR_WIDTH); // Write address into tx_add
      008942 AE 00 79         [ 2]  330 	ldw	x, #_TX_ADDRESS+0
      008945 4B 05            [ 1]  331 	push	#0x05
      008947 89               [ 2]  332 	pushw	x
      008948 4B 30            [ 1]  333 	push	#0x30
      00894A CD 8A 5F         [ 4]  334 	call	_nRF_SPI_Write_Buf
      00894D 5B 04            [ 2]  335 	addw	sp, #4
                                    336 ;	user/nRF24L01.c: 74: nRF_Write_Reg(W_REGISTER + RX_PW_P0, 32);  // 32 bytes in RX payload in data pipe 0
      00894F 4B 20            [ 1]  337 	push	#0x20
      008951 4B 31            [ 1]  338 	push	#0x31
      008953 CD 89 F0         [ 4]  339 	call	_nRF_Write_Reg
      008956 85               [ 2]  340 	popw	x
                                    341 ;	user/nRF24L01.c: 75: nRF_Write_Reg(W_REGISTER + RX_PW_P1, 32);  // 32 bytes in RX payload in data pipe 1
      008957 4B 20            [ 1]  342 	push	#0x20
      008959 4B 32            [ 1]  343 	push	#0x32
      00895B CD 89 F0         [ 4]  344 	call	_nRF_Write_Reg
      00895E 85               [ 2]  345 	popw	x
                                    346 ;	user/nRF24L01.c: 76: nRF_Write_Reg(W_REGISTER + RX_PW_P2, 32);  // 32 bytes in RX payload in data pipe 2
      00895F 4B 20            [ 1]  347 	push	#0x20
      008961 4B 33            [ 1]  348 	push	#0x33
      008963 CD 89 F0         [ 4]  349 	call	_nRF_Write_Reg
      008966 85               [ 2]  350 	popw	x
                                    351 ;	user/nRF24L01.c: 77: nRF_Write_Reg(W_REGISTER + RX_PW_P3, 32);  // 32 bytes in RX payload in data pipe 3
      008967 4B 20            [ 1]  352 	push	#0x20
      008969 4B 34            [ 1]  353 	push	#0x34
      00896B CD 89 F0         [ 4]  354 	call	_nRF_Write_Reg
      00896E 85               [ 2]  355 	popw	x
                                    356 ;	user/nRF24L01.c: 78: nRF_Write_Reg(W_REGISTER + RX_PW_P4, 32);  // 32 bytes in RX payload in data pipe 4
      00896F 4B 20            [ 1]  357 	push	#0x20
      008971 4B 35            [ 1]  358 	push	#0x35
      008973 CD 89 F0         [ 4]  359 	call	_nRF_Write_Reg
      008976 85               [ 2]  360 	popw	x
                                    361 ;	user/nRF24L01.c: 79: nRF_Write_Reg(W_REGISTER + RX_PW_P5, 32);  // 32 bytes in RX payload in data pipe 5
      008977 4B 20            [ 1]  362 	push	#0x20
      008979 4B 36            [ 1]  363 	push	#0x36
      00897B CD 89 F0         [ 4]  364 	call	_nRF_Write_Reg
      00897E 85               [ 2]  365 	popw	x
                                    366 ;	user/nRF24L01.c: 80: nRF_Write_Reg(W_REGISTER + DYNPD, 0x00);   // Enable dynamic payload length
      00897F 4B 00            [ 1]  367 	push	#0x00
      008981 4B 3C            [ 1]  368 	push	#0x3c
      008983 CD 89 F0         [ 4]  369 	call	_nRF_Write_Reg
      008986 85               [ 2]  370 	popw	x
                                    371 ;	user/nRF24L01.c: 81: nRF_Write_Reg(W_REGISTER + FEATURE, 0x00); // Feature Register
      008987 4B 00            [ 1]  372 	push	#0x00
      008989 4B 3D            [ 1]  373 	push	#0x3d
      00898B CD 89 F0         [ 4]  374 	call	_nRF_Write_Reg
      00898E 85               [ 2]  375 	popw	x
                                    376 ;	user/nRF24L01.c: 83: nRF_Write_Reg(FLUSH_TX, 0x00); // Clear TX FIFO Buf
      00898F 4B 00            [ 1]  377 	push	#0x00
      008991 4B E1            [ 1]  378 	push	#0xe1
      008993 CD 89 F0         [ 4]  379 	call	_nRF_Write_Reg
      008996 85               [ 2]  380 	popw	x
                                    381 ;	user/nRF24L01.c: 84: nRF_Write_Reg(FLUSH_RX, 0x00); // Clear RX FIFO Buf
      008997 4B 00            [ 1]  382 	push	#0x00
      008999 4B E2            [ 1]  383 	push	#0xe2
      00899B CD 89 F0         [ 4]  384 	call	_nRF_Write_Reg
      00899E 85               [ 2]  385 	popw	x
                                    386 ;	user/nRF24L01.c: 86: SetCE;
      00899F 4B 10            [ 1]  387 	push	#0x10
      0089A1 4B 19            [ 1]  388 	push	#0x19
      0089A3 4B 50            [ 1]  389 	push	#0x50
      0089A5 CD 98 A3         [ 4]  390 	call	_GPIO_WriteHigh
      0089A8 5B 03            [ 2]  391 	addw	sp, #3
      0089AA 81               [ 4]  392 	ret
                                    393 ;	user/nRF24L01.c: 89: uint8_t nRF_spiTransfer(uint8_t send)
                                    394 ;	-----------------------------------------
                                    395 ;	 function nRF_spiTransfer
                                    396 ;	-----------------------------------------
      0089AB                        397 _nRF_spiTransfer:
                                    398 ;	user/nRF24L01.c: 91: while(SPI_GetFlagStatus(SPI_FLAG_TXE) == RESET);
      0089AB                        399 00101$:
      0089AB 4B 02            [ 1]  400 	push	#0x02
      0089AD CD 9A 0D         [ 4]  401 	call	_SPI_GetFlagStatus
      0089B0 5B 01            [ 2]  402 	addw	sp, #1
      0089B2 4D               [ 1]  403 	tnz	a
      0089B3 27 F6            [ 1]  404 	jreq	00101$
                                    405 ;	user/nRF24L01.c: 92: SPI_SendData(send);
      0089B5 7B 03            [ 1]  406 	ld	a, (0x03, sp)
      0089B7 88               [ 1]  407 	push	a
      0089B8 CD 99 A3         [ 4]  408 	call	_SPI_SendData
      0089BB 84               [ 1]  409 	pop	a
                                    410 ;	user/nRF24L01.c: 93: while(SPI_GetFlagStatus(SPI_FLAG_RXNE) == RESET);
      0089BC                        411 00104$:
      0089BC 4B 01            [ 1]  412 	push	#0x01
      0089BE CD 9A 0D         [ 4]  413 	call	_SPI_GetFlagStatus
      0089C1 5B 01            [ 2]  414 	addw	sp, #1
      0089C3 4D               [ 1]  415 	tnz	a
      0089C4 27 F6            [ 1]  416 	jreq	00104$
                                    417 ;	user/nRF24L01.c: 94: return SPI_ReceiveData();
      0089C6 CC 99 AA         [ 2]  418 	jp	_SPI_ReceiveData
                                    419 ;	user/nRF24L01.c: 98: uint8_t nRF_Read(uint8_t RegAddr)
                                    420 ;	-----------------------------------------
                                    421 ;	 function nRF_Read
                                    422 ;	-----------------------------------------
      0089C9                        423 _nRF_Read:
                                    424 ;	user/nRF24L01.c: 102: ClrCSN;	//CSN low, initialize SPI communication...					
      0089C9 4B 20            [ 1]  425 	push	#0x20
      0089CB 4B 14            [ 1]  426 	push	#0x14
      0089CD 4B 50            [ 1]  427 	push	#0x50
      0089CF CD 98 AA         [ 4]  428 	call	_GPIO_WriteLow
      0089D2 5B 03            [ 2]  429 	addw	sp, #3
                                    430 ;	user/nRF24L01.c: 103: nRF_spiTransfer(RegAddr);	// Select register to read	
      0089D4 7B 03            [ 1]  431 	ld	a, (0x03, sp)
      0089D6 88               [ 1]  432 	push	a
      0089D7 CD 89 AB         [ 4]  433 	call	_nRF_spiTransfer
      0089DA 84               [ 1]  434 	pop	a
                                    435 ;	user/nRF24L01.c: 104: data = nRF_spiTransfer(0);  //read data
      0089DB 4B 00            [ 1]  436 	push	#0x00
      0089DD CD 89 AB         [ 4]  437 	call	_nRF_spiTransfer
      0089E0 5B 01            [ 2]  438 	addw	sp, #1
                                    439 ;	user/nRF24L01.c: 105: SetCSN;   // CSN high, terminate SPI communication
      0089E2 88               [ 1]  440 	push	a
      0089E3 4B 20            [ 1]  441 	push	#0x20
      0089E5 4B 14            [ 1]  442 	push	#0x14
      0089E7 4B 50            [ 1]  443 	push	#0x50
      0089E9 CD 98 A3         [ 4]  444 	call	_GPIO_WriteHigh
      0089EC 5B 03            [ 2]  445 	addw	sp, #3
      0089EE 84               [ 1]  446 	pop	a
                                    447 ;	user/nRF24L01.c: 106: return(data); 
      0089EF 81               [ 4]  448 	ret
                                    449 ;	user/nRF24L01.c: 109: uint8_t nRF_Write_Reg(uint8_t RegAddr,uint8_t data)
                                    450 ;	-----------------------------------------
                                    451 ;	 function nRF_Write_Reg
                                    452 ;	-----------------------------------------
      0089F0                        453 _nRF_Write_Reg:
      0089F0 88               [ 1]  454 	push	a
                                    455 ;	user/nRF24L01.c: 113: ClrCSN; 
      0089F1 4B 20            [ 1]  456 	push	#0x20
      0089F3 4B 14            [ 1]  457 	push	#0x14
      0089F5 4B 50            [ 1]  458 	push	#0x50
      0089F7 CD 98 AA         [ 4]  459 	call	_GPIO_WriteLow
      0089FA 5B 03            [ 2]  460 	addw	sp, #3
                                    461 ;	user/nRF24L01.c: 114: status = nRF_spiTransfer(RegAddr);
      0089FC 7B 04            [ 1]  462 	ld	a, (0x04, sp)
      0089FE 88               [ 1]  463 	push	a
      0089FF CD 89 AB         [ 4]  464 	call	_nRF_spiTransfer
      008A02 5B 01            [ 2]  465 	addw	sp, #1
      008A04 6B 01            [ 1]  466 	ld	(0x01, sp), a
                                    467 ;	user/nRF24L01.c: 115: nRF_spiTransfer(data);
      008A06 7B 05            [ 1]  468 	ld	a, (0x05, sp)
      008A08 88               [ 1]  469 	push	a
      008A09 CD 89 AB         [ 4]  470 	call	_nRF_spiTransfer
      008A0C 84               [ 1]  471 	pop	a
                                    472 ;	user/nRF24L01.c: 116: SetCSN;
      008A0D 4B 20            [ 1]  473 	push	#0x20
      008A0F 4B 14            [ 1]  474 	push	#0x14
      008A11 4B 50            [ 1]  475 	push	#0x50
      008A13 CD 98 A3         [ 4]  476 	call	_GPIO_WriteHigh
      008A16 5B 03            [ 2]  477 	addw	sp, #3
                                    478 ;	user/nRF24L01.c: 117: return(status);
      008A18 7B 01            [ 1]  479 	ld	a, (0x01, sp)
      008A1A 5B 01            [ 2]  480 	addw	sp, #1
      008A1C 81               [ 4]  481 	ret
                                    482 ;	user/nRF24L01.c: 120: uint8_t nRF_SPI_Read_Buf(uint8_t RegAddr, uint8_t *buff, uint8_t len)
                                    483 ;	-----------------------------------------
                                    484 ;	 function nRF_SPI_Read_Buf
                                    485 ;	-----------------------------------------
      008A1D                        486 _nRF_SPI_Read_Buf:
      008A1D 89               [ 2]  487 	pushw	x
                                    488 ;	user/nRF24L01.c: 123: ClrCSN;
      008A1E 4B 20            [ 1]  489 	push	#0x20
      008A20 4B 14            [ 1]  490 	push	#0x14
      008A22 4B 50            [ 1]  491 	push	#0x50
      008A24 CD 98 AA         [ 4]  492 	call	_GPIO_WriteLow
      008A27 5B 03            [ 2]  493 	addw	sp, #3
                                    494 ;	user/nRF24L01.c: 124: status = nRF_spiTransfer(RegAddr);
      008A29 7B 05            [ 1]  495 	ld	a, (0x05, sp)
      008A2B 88               [ 1]  496 	push	a
      008A2C CD 89 AB         [ 4]  497 	call	_nRF_spiTransfer
      008A2F 5B 01            [ 2]  498 	addw	sp, #1
      008A31 6B 02            [ 1]  499 	ld	(0x02, sp), a
                                    500 ;	user/nRF24L01.c: 125: for(i = 0; i < len; i++)
      008A33 0F 01            [ 1]  501 	clr	(0x01, sp)
      008A35                        502 00103$:
      008A35 7B 01            [ 1]  503 	ld	a, (0x01, sp)
      008A37 11 08            [ 1]  504 	cp	a, (0x08, sp)
      008A39 24 15            [ 1]  505 	jrnc	00101$
                                    506 ;	user/nRF24L01.c: 126: buff[i] = nRF_spiTransfer(0);
      008A3B 5F               [ 1]  507 	clrw	x
      008A3C 7B 01            [ 1]  508 	ld	a, (0x01, sp)
      008A3E 97               [ 1]  509 	ld	xl, a
      008A3F 72 FB 06         [ 2]  510 	addw	x, (0x06, sp)
      008A42 89               [ 2]  511 	pushw	x
      008A43 4B 00            [ 1]  512 	push	#0x00
      008A45 CD 89 AB         [ 4]  513 	call	_nRF_spiTransfer
      008A48 5B 01            [ 2]  514 	addw	sp, #1
      008A4A 85               [ 2]  515 	popw	x
      008A4B F7               [ 1]  516 	ld	(x), a
                                    517 ;	user/nRF24L01.c: 125: for(i = 0; i < len; i++)
      008A4C 0C 01            [ 1]  518 	inc	(0x01, sp)
      008A4E 20 E5            [ 2]  519 	jra	00103$
      008A50                        520 00101$:
                                    521 ;	user/nRF24L01.c: 127: SetCSN;
      008A50 4B 20            [ 1]  522 	push	#0x20
      008A52 4B 14            [ 1]  523 	push	#0x14
      008A54 4B 50            [ 1]  524 	push	#0x50
      008A56 CD 98 A3         [ 4]  525 	call	_GPIO_WriteHigh
      008A59 5B 03            [ 2]  526 	addw	sp, #3
                                    527 ;	user/nRF24L01.c: 128: return(status);
      008A5B 7B 02            [ 1]  528 	ld	a, (0x02, sp)
      008A5D 85               [ 2]  529 	popw	x
      008A5E 81               [ 4]  530 	ret
                                    531 ;	user/nRF24L01.c: 131: uint8_t nRF_SPI_Write_Buf(uint8_t RegAddr, uint8_t *buff, uint8_t len)
                                    532 ;	-----------------------------------------
                                    533 ;	 function nRF_SPI_Write_Buf
                                    534 ;	-----------------------------------------
      008A5F                        535 _nRF_SPI_Write_Buf:
      008A5F 89               [ 2]  536 	pushw	x
                                    537 ;	user/nRF24L01.c: 134: ClrCSN;
      008A60 4B 20            [ 1]  538 	push	#0x20
      008A62 4B 14            [ 1]  539 	push	#0x14
      008A64 4B 50            [ 1]  540 	push	#0x50
      008A66 CD 98 AA         [ 4]  541 	call	_GPIO_WriteLow
      008A69 5B 03            [ 2]  542 	addw	sp, #3
                                    543 ;	user/nRF24L01.c: 135: status = nRF_spiTransfer(RegAddr);
      008A6B 7B 05            [ 1]  544 	ld	a, (0x05, sp)
      008A6D 88               [ 1]  545 	push	a
      008A6E CD 89 AB         [ 4]  546 	call	_nRF_spiTransfer
      008A71 5B 01            [ 2]  547 	addw	sp, #1
      008A73 6B 01            [ 1]  548 	ld	(0x01, sp), a
                                    549 ;	user/nRF24L01.c: 136: for(i = 0; i < len; i++)
      008A75 1E 06            [ 2]  550 	ldw	x, (0x06, sp)
      008A77 0F 02            [ 1]  551 	clr	(0x02, sp)
      008A79                        552 00103$:
      008A79 7B 02            [ 1]  553 	ld	a, (0x02, sp)
      008A7B 11 08            [ 1]  554 	cp	a, (0x08, sp)
      008A7D 24 0D            [ 1]  555 	jrnc	00101$
                                    556 ;	user/nRF24L01.c: 138: nRF_spiTransfer(*buff);
      008A7F F6               [ 1]  557 	ld	a, (x)
      008A80 89               [ 2]  558 	pushw	x
      008A81 88               [ 1]  559 	push	a
      008A82 CD 89 AB         [ 4]  560 	call	_nRF_spiTransfer
      008A85 84               [ 1]  561 	pop	a
      008A86 85               [ 2]  562 	popw	x
                                    563 ;	user/nRF24L01.c: 139: buff++;
      008A87 5C               [ 2]  564 	incw	x
                                    565 ;	user/nRF24L01.c: 136: for(i = 0; i < len; i++)
      008A88 0C 02            [ 1]  566 	inc	(0x02, sp)
      008A8A 20 ED            [ 2]  567 	jra	00103$
      008A8C                        568 00101$:
                                    569 ;	user/nRF24L01.c: 141: SetCSN;
      008A8C 4B 20            [ 1]  570 	push	#0x20
      008A8E 4B 14            [ 1]  571 	push	#0x14
      008A90 4B 50            [ 1]  572 	push	#0x50
      008A92 CD 98 A3         [ 4]  573 	call	_GPIO_WriteHigh
      008A95 5B 03            [ 2]  574 	addw	sp, #3
                                    575 ;	user/nRF24L01.c: 142: return(status);
      008A97 7B 01            [ 1]  576 	ld	a, (0x01, sp)
      008A99 85               [ 2]  577 	popw	x
      008A9A 81               [ 4]  578 	ret
                                    579 ;	user/nRF24L01.c: 145: void nRF_Set_RxMode(void)
                                    580 ;	-----------------------------------------
                                    581 ;	 function nRF_Set_RxMode
                                    582 ;	-----------------------------------------
      008A9B                        583 _nRF_Set_RxMode:
                                    584 ;	user/nRF24L01.c: 148: ClrCE;
      008A9B 4B 10            [ 1]  585 	push	#0x10
      008A9D 4B 19            [ 1]  586 	push	#0x19
      008A9F 4B 50            [ 1]  587 	push	#0x50
      008AA1 CD 98 AA         [ 4]  588 	call	_GPIO_WriteLow
      008AA4 5B 03            [ 2]  589 	addw	sp, #3
                                    590 ;	user/nRF24L01.c: 149: status = nRF_Read(CONFIG);
      008AA6 4B 00            [ 1]  591 	push	#0x00
      008AA8 CD 89 C9         [ 4]  592 	call	_nRF_Read
      008AAB 5B 01            [ 2]  593 	addw	sp, #1
                                    594 ;	user/nRF24L01.c: 150: status = (status&0xFE)|PRIM_RX;
      008AAD A4 FE            [ 1]  595 	and	a, #0xfe
      008AAF AA 01            [ 1]  596 	or	a, #0x01
                                    597 ;	user/nRF24L01.c: 151: nRF_Write_Reg(W_REGISTER + CONFIG, status);
      008AB1 88               [ 1]  598 	push	a
      008AB2 4B 20            [ 1]  599 	push	#0x20
      008AB4 CD 89 F0         [ 4]  600 	call	_nRF_Write_Reg
      008AB7 85               [ 2]  601 	popw	x
                                    602 ;	user/nRF24L01.c: 152: SetCE;
      008AB8 4B 10            [ 1]  603 	push	#0x10
      008ABA 4B 19            [ 1]  604 	push	#0x19
      008ABC 4B 50            [ 1]  605 	push	#0x50
      008ABE CD 98 A3         [ 4]  606 	call	_GPIO_WriteHigh
      008AC1 5B 03            [ 2]  607 	addw	sp, #3
                                    608 ;	user/nRF24L01.c: 153: status = nRF_Read_Status();
      008AC3 CD 8B 5B         [ 4]  609 	call	_nRF_Read_Status
                                    610 ;	user/nRF24L01.c: 154: nRF_Clear_Status(status|IRQ_RX_dataready); // Clear Data Ready RX FIFO interrupt
      008AC6 AA 40            [ 1]  611 	or	a, #0x40
      008AC8 88               [ 1]  612 	push	a
      008AC9 CD 8B 51         [ 4]  613 	call	_nRF_Clear_Status
      008ACC 84               [ 1]  614 	pop	a
                                    615 ;	user/nRF24L01.c: 155: nRF_Write_Reg(FLUSH_RX, 0x00); //Clear RX FIFO Buf
      008ACD 4B 00            [ 1]  616 	push	#0x00
      008ACF 4B E2            [ 1]  617 	push	#0xe2
      008AD1 CD 89 F0         [ 4]  618 	call	_nRF_Write_Reg
      008AD4 85               [ 2]  619 	popw	x
      008AD5 81               [ 4]  620 	ret
                                    621 ;	user/nRF24L01.c: 169: void nRF_Set_TxMode(void)
                                    622 ;	-----------------------------------------
                                    623 ;	 function nRF_Set_TxMode
                                    624 ;	-----------------------------------------
      008AD6                        625 _nRF_Set_TxMode:
                                    626 ;	user/nRF24L01.c: 172: ClrCE;
      008AD6 4B 10            [ 1]  627 	push	#0x10
      008AD8 4B 19            [ 1]  628 	push	#0x19
      008ADA 4B 50            [ 1]  629 	push	#0x50
      008ADC CD 98 AA         [ 4]  630 	call	_GPIO_WriteLow
      008ADF 5B 03            [ 2]  631 	addw	sp, #3
                                    632 ;	user/nRF24L01.c: 173: nRF_delay(10);
      008AE1 4B 0A            [ 1]  633 	push	#0x0a
      008AE3 5F               [ 1]  634 	clrw	x
      008AE4 89               [ 2]  635 	pushw	x
      008AE5 4B 00            [ 1]  636 	push	#0x00
      008AE7 CD 87 D7         [ 4]  637 	call	_nRF_delay
      008AEA 5B 04            [ 2]  638 	addw	sp, #4
                                    639 ;	user/nRF24L01.c: 174: status = nRF_Read(CONFIG);
      008AEC 4B 00            [ 1]  640 	push	#0x00
      008AEE CD 89 C9         [ 4]  641 	call	_nRF_Read
      008AF1 5B 01            [ 2]  642 	addw	sp, #1
                                    643 ;	user/nRF24L01.c: 175: status = (status&0xFE)|PRIM_TX;
      008AF3 A4 FE            [ 1]  644 	and	a, #0xfe
                                    645 ;	user/nRF24L01.c: 176: nRF_Write_Reg(W_REGISTER + CONFIG, status);
      008AF5 88               [ 1]  646 	push	a
      008AF6 4B 20            [ 1]  647 	push	#0x20
      008AF8 CD 89 F0         [ 4]  648 	call	_nRF_Write_Reg
      008AFB 85               [ 2]  649 	popw	x
                                    650 ;	user/nRF24L01.c: 177: SetCE;
      008AFC 4B 10            [ 1]  651 	push	#0x10
      008AFE 4B 19            [ 1]  652 	push	#0x19
      008B00 4B 50            [ 1]  653 	push	#0x50
      008B02 CD 98 A3         [ 4]  654 	call	_GPIO_WriteHigh
      008B05 5B 03            [ 2]  655 	addw	sp, #3
                                    656 ;	user/nRF24L01.c: 179: status = nRF_Read_Status();
      008B07 CD 8B 5B         [ 4]  657 	call	_nRF_Read_Status
                                    658 ;	user/nRF24L01.c: 180: nRF_Clear_Status(status|IRQ_TX_datasent|IRQ_MAX_retransmit); // Clear Data Sent TX FIFO interrupt,Maximum number of TX retransmits interrupt
      008B0A AA 30            [ 1]  659 	or	a, #0x30
      008B0C 88               [ 1]  660 	push	a
      008B0D CD 8B 51         [ 4]  661 	call	_nRF_Clear_Status
      008B10 84               [ 1]  662 	pop	a
                                    663 ;	user/nRF24L01.c: 181: nRF_Write_Reg(FLUSH_TX, 0x00);					 				      // Clear TX FIFO Buf
      008B11 4B 00            [ 1]  664 	push	#0x00
      008B13 4B E1            [ 1]  665 	push	#0xe1
      008B15 CD 89 F0         [ 4]  666 	call	_nRF_Write_Reg
      008B18 85               [ 2]  667 	popw	x
      008B19 81               [ 4]  668 	ret
                                    669 ;	user/nRF24L01.c: 200: void nRF_Set_Channel(uint8_t channel)
                                    670 ;	-----------------------------------------
                                    671 ;	 function nRF_Set_Channel
                                    672 ;	-----------------------------------------
      008B1A                        673 _nRF_Set_Channel:
                                    674 ;	user/nRF24L01.c: 202: if (channel > 127)
      008B1A 7B 03            [ 1]  675 	ld	a, (0x03, sp)
      008B1C A1 7F            [ 1]  676 	cp	a, #0x7f
      008B1E 23 04            [ 2]  677 	jrule	00102$
                                    678 ;	user/nRF24L01.c: 203: channel = 127;
      008B20 A6 7F            [ 1]  679 	ld	a, #0x7f
      008B22 6B 03            [ 1]  680 	ld	(0x03, sp), a
      008B24                        681 00102$:
                                    682 ;	user/nRF24L01.c: 204: nRF_Write_Reg(W_REGISTER + RF_CH, channel);
      008B24 7B 03            [ 1]  683 	ld	a, (0x03, sp)
      008B26 88               [ 1]  684 	push	a
      008B27 4B 25            [ 1]  685 	push	#0x25
      008B29 CD 89 F0         [ 4]  686 	call	_nRF_Write_Reg
      008B2C 85               [ 2]  687 	popw	x
      008B2D 81               [ 4]  688 	ret
                                    689 ;	user/nRF24L01.c: 207: void nRF_ClearSend(void)
                                    690 ;	-----------------------------------------
                                    691 ;	 function nRF_ClearSend
                                    692 ;	-----------------------------------------
      008B2E                        693 _nRF_ClearSend:
                                    694 ;	user/nRF24L01.c: 209: nRF_Write_Reg(W_REGISTER + STATUS, 0XFF);
      008B2E 4B FF            [ 1]  695 	push	#0xff
      008B30 4B 27            [ 1]  696 	push	#0x27
      008B32 CD 89 F0         [ 4]  697 	call	_nRF_Write_Reg
      008B35 85               [ 2]  698 	popw	x
      008B36 81               [ 4]  699 	ret
                                    700 ;	user/nRF24L01.c: 212: void nRF_Set_Tx_Addr(uint8_t *add)
                                    701 ;	-----------------------------------------
                                    702 ;	 function nRF_Set_Tx_Addr
                                    703 ;	-----------------------------------------
      008B37                        704 _nRF_Set_Tx_Addr:
                                    705 ;	user/nRF24L01.c: 214: nRF_SPI_Write_Buf(W_REGISTER + TX_ADDR, add, ADR_WIDTH);
      008B37 4B 05            [ 1]  706 	push	#0x05
      008B39 1E 04            [ 2]  707 	ldw	x, (0x04, sp)
      008B3B 89               [ 2]  708 	pushw	x
      008B3C 4B 30            [ 1]  709 	push	#0x30
      008B3E CD 8A 5F         [ 4]  710 	call	_nRF_SPI_Write_Buf
      008B41 5B 04            [ 2]  711 	addw	sp, #4
      008B43 81               [ 4]  712 	ret
                                    713 ;	user/nRF24L01.c: 217: void nRF_Set_Rx_Addr(uint8_t *add)
                                    714 ;	-----------------------------------------
                                    715 ;	 function nRF_Set_Rx_Addr
                                    716 ;	-----------------------------------------
      008B44                        717 _nRF_Set_Rx_Addr:
                                    718 ;	user/nRF24L01.c: 219: nRF_SPI_Write_Buf(W_REGISTER + RX_ADDR_P0, add, ADR_WIDTH);
      008B44 4B 05            [ 1]  719 	push	#0x05
      008B46 1E 04            [ 2]  720 	ldw	x, (0x04, sp)
      008B48 89               [ 2]  721 	pushw	x
      008B49 4B 2A            [ 1]  722 	push	#0x2a
      008B4B CD 8A 5F         [ 4]  723 	call	_nRF_SPI_Write_Buf
      008B4E 5B 04            [ 2]  724 	addw	sp, #4
      008B50 81               [ 4]  725 	ret
                                    726 ;	user/nRF24L01.c: 222: void nRF_Clear_Status(uint8_t clear)
                                    727 ;	-----------------------------------------
                                    728 ;	 function nRF_Clear_Status
                                    729 ;	-----------------------------------------
      008B51                        730 _nRF_Clear_Status:
                                    731 ;	user/nRF24L01.c: 224: nRF_Write_Reg(W_REGISTER + STATUS, clear);
      008B51 7B 03            [ 1]  732 	ld	a, (0x03, sp)
      008B53 88               [ 1]  733 	push	a
      008B54 4B 27            [ 1]  734 	push	#0x27
      008B56 CD 89 F0         [ 4]  735 	call	_nRF_Write_Reg
      008B59 85               [ 2]  736 	popw	x
      008B5A 81               [ 4]  737 	ret
                                    738 ;	user/nRF24L01.c: 227: uint8_t nRF_Read_Status(void)
                                    739 ;	-----------------------------------------
                                    740 ;	 function nRF_Read_Status
                                    741 ;	-----------------------------------------
      008B5B                        742 _nRF_Read_Status:
                                    743 ;	user/nRF24L01.c: 230: status = nRF_Read(STATUS);
      008B5B 4B 07            [ 1]  744 	push	#0x07
      008B5D CD 89 C9         [ 4]  745 	call	_nRF_Read
      008B60 5B 01            [ 2]  746 	addw	sp, #1
                                    747 ;	user/nRF24L01.c: 231: return status;
      008B62 81               [ 4]  748 	ret
                                    749 ;	user/nRF24L01.c: 234: uint8_t nRF_Read_Lost_Packet(void)
                                    750 ;	-----------------------------------------
                                    751 ;	 function nRF_Read_Lost_Packet
                                    752 ;	-----------------------------------------
      008B63                        753 _nRF_Read_Lost_Packet:
                                    754 ;	user/nRF24L01.c: 237: status = nRF_Read(OBSERVE_TX);
      008B63 4B 08            [ 1]  755 	push	#0x08
      008B65 CD 89 C9         [ 4]  756 	call	_nRF_Read
      008B68 5B 01            [ 2]  757 	addw	sp, #1
                                    758 ;	user/nRF24L01.c: 238: return((status&0xF0)>>4);
      008B6A A4 F0            [ 1]  759 	and	a, #0xf0
      008B6C 4E               [ 1]  760 	swap	a
      008B6D A4 0F            [ 1]  761 	and	a, #0x0f
      008B6F 81               [ 4]  762 	ret
                                    763 ;	user/nRF24L01.c: 241: uint8_t nRF_Read_Power_Detector(void)
                                    764 ;	-----------------------------------------
                                    765 ;	 function nRF_Read_Power_Detector
                                    766 ;	-----------------------------------------
      008B70                        767 _nRF_Read_Power_Detector:
                                    768 ;	user/nRF24L01.c: 244: status = nRF_Read(STATUS);
      008B70 4B 07            [ 1]  769 	push	#0x07
      008B72 CD 89 C9         [ 4]  770 	call	_nRF_Read
      008B75 5B 01            [ 2]  771 	addw	sp, #1
                                    772 ;	user/nRF24L01.c: 245: return status;
      008B77 81               [ 4]  773 	ret
                                    774 ;	user/nRF24L01.c: 248: uint8_t nRF_Read_Retransmitted_Packet(void)
                                    775 ;	-----------------------------------------
                                    776 ;	 function nRF_Read_Retransmitted_Packet
                                    777 ;	-----------------------------------------
      008B78                        778 _nRF_Read_Retransmitted_Packet:
                                    779 ;	user/nRF24L01.c: 251: status = nRF_Read(OBSERVE_TX);
      008B78 4B 08            [ 1]  780 	push	#0x08
      008B7A CD 89 C9         [ 4]  781 	call	_nRF_Read
      008B7D 5B 01            [ 2]  782 	addw	sp, #1
                                    783 ;	user/nRF24L01.c: 252: return (status&0x0F); 
      008B7F A4 0F            [ 1]  784 	and	a, #0x0f
      008B81 81               [ 4]  785 	ret
                                    786 ;	user/nRF24L01.c: 255: uint8_t nRF_RxPacket(uint8_t *rxbuf)
                                    787 ;	-----------------------------------------
                                    788 ;	 function nRF_RxPacket
                                    789 ;	-----------------------------------------
      008B82                        790 _nRF_RxPacket:
                                    791 ;	user/nRF24L01.c: 258: flag = nRF_Read_Status();
      008B82 CD 8B 5B         [ 4]  792 	call	_nRF_Read_Status
                                    793 ;	user/nRF24L01.c: 259: if(flag & IRQ_RX_dataready) //Data Ready RX FIFO interrupt
      008B85 A5 40            [ 1]  794 	bcp	a, #0x40
      008B87 27 21            [ 1]  795 	jreq	00102$
                                    796 ;	user/nRF24L01.c: 261: nRF_Clear_Status(flag); // Write 1 to clear bit IRQ_RX_dataready
      008B89 88               [ 1]  797 	push	a
      008B8A 88               [ 1]  798 	push	a
      008B8B CD 8B 51         [ 4]  799 	call	_nRF_Clear_Status
      008B8E 84               [ 1]  800 	pop	a
      008B8F 84               [ 1]  801 	pop	a
                                    802 ;	user/nRF24L01.c: 262: nRF_SPI_Read_Buf(R_RX_PAYLOAD, rxbuf, RX_PLOAD_WIDTH); //read receive payload from RX_FIFO buffer
      008B90 88               [ 1]  803 	push	a
      008B91 4B 20            [ 1]  804 	push	#0x20
      008B93 1E 05            [ 2]  805 	ldw	x, (0x05, sp)
      008B95 89               [ 2]  806 	pushw	x
      008B96 4B 61            [ 1]  807 	push	#0x61
      008B98 CD 8A 1D         [ 4]  808 	call	_nRF_SPI_Read_Buf
      008B9B 5B 04            [ 2]  809 	addw	sp, #4
      008B9D 4B 00            [ 1]  810 	push	#0x00
      008B9F 4B E2            [ 1]  811 	push	#0xe2
      008BA1 CD 89 F0         [ 4]  812 	call	_nRF_Write_Reg
      008BA4 85               [ 2]  813 	popw	x
      008BA5 84               [ 1]  814 	pop	a
                                    815 ;	user/nRF24L01.c: 264: return (flag&0x0E)>>1; //return pipe
      008BA6 A4 0E            [ 1]  816 	and	a, #0x0e
      008BA8 44               [ 1]  817 	srl	a
      008BA9 81               [ 4]  818 	ret
      008BAA                        819 00102$:
                                    820 ;	user/nRF24L01.c: 266: return 0x07;
      008BAA A6 07            [ 1]  821 	ld	a, #0x07
      008BAC 81               [ 4]  822 	ret
                                    823 ;	user/nRF24L01.c: 269: void nRF_TxPacket(uint8_t *txbuf)
                                    824 ;	-----------------------------------------
                                    825 ;	 function nRF_TxPacket
                                    826 ;	-----------------------------------------
      008BAD                        827 _nRF_TxPacket:
                                    828 ;	user/nRF24L01.c: 272: status = nRF_Read_Status(); // read register STATUS's value
      008BAD CD 8B 5B         [ 4]  829 	call	_nRF_Read_Status
                                    830 ;	user/nRF24L01.c: 273: Fifo = nRF_Read(FIFO_STATUS);
      008BB0 88               [ 1]  831 	push	a
      008BB1 4B 17            [ 1]  832 	push	#0x17
      008BB3 CD 89 C9         [ 4]  833 	call	_nRF_Read
      008BB6 5B 01            [ 2]  834 	addw	sp, #1
      008BB8 97               [ 1]  835 	ld	xl, a
      008BB9 84               [ 1]  836 	pop	a
                                    837 ;	user/nRF24L01.c: 274: if((status&IRQ_TX_datasent)||(status&IRQ_MAX_retransmit)||(Fifo&TX_EMPTY))
      008BBA A5 20            [ 1]  838 	bcp	a, #0x20
      008BBC 26 0C            [ 1]  839 	jrne	00101$
      008BBE A5 10            [ 1]  840 	bcp	a, #0x10
      008BC0 26 08            [ 1]  841 	jrne	00101$
      008BC2 88               [ 1]  842 	push	a
      008BC3 9F               [ 1]  843 	ld	a, xl
      008BC4 A5 10            [ 1]  844 	bcp	a, #0x10
      008BC6 84               [ 1]  845 	pop	a
      008BC7 26 01            [ 1]  846 	jrne	00117$
      008BC9 81               [ 4]  847 	ret
      008BCA                        848 00117$:
      008BCA                        849 00101$:
                                    850 ;	user/nRF24L01.c: 276: nRF_Clear_Status(status);
      008BCA 88               [ 1]  851 	push	a
      008BCB CD 8B 51         [ 4]  852 	call	_nRF_Clear_Status
      008BCE 84               [ 1]  853 	pop	a
                                    854 ;	user/nRF24L01.c: 277: nRF_Write_Reg(FLUSH_TX, 0x00);
      008BCF 4B 00            [ 1]  855 	push	#0x00
      008BD1 4B E1            [ 1]  856 	push	#0xe1
      008BD3 CD 89 F0         [ 4]  857 	call	_nRF_Write_Reg
      008BD6 85               [ 2]  858 	popw	x
                                    859 ;	user/nRF24L01.c: 278: nRF_SPI_Write_Buf(W_TX_PAYLOAD, txbuf, TX_PLOAD_WIDTH);	
      008BD7 4B 20            [ 1]  860 	push	#0x20
      008BD9 1E 04            [ 2]  861 	ldw	x, (0x04, sp)
      008BDB 89               [ 2]  862 	pushw	x
      008BDC 4B A0            [ 1]  863 	push	#0xa0
      008BDE CD 8A 5F         [ 4]  864 	call	_nRF_SPI_Write_Buf
      008BE1 5B 04            [ 2]  865 	addw	sp, #4
      008BE3 81               [ 4]  866 	ret
                                    867 ;	user/nRF24L01.c: 287: void nRF_Debug(void)
                                    868 ;	-----------------------------------------
                                    869 ;	 function nRF_Debug
                                    870 ;	-----------------------------------------
      008BE4                        871 _nRF_Debug:
      008BE4 52 97            [ 2]  872 	sub	sp, #151
                                    873 ;	user/nRF24L01.c: 292: status = nRF_Read(CONFIG);
      008BE6 4B 00            [ 1]  874 	push	#0x00
      008BE8 CD 89 C9         [ 4]  875 	call	_nRF_Read
      008BEB 5B 01            [ 2]  876 	addw	sp, #1
                                    877 ;	user/nRF24L01.c: 293: sprintf(buff_usart,"CONFIG: %2x\r\n",status);
      008BED 0F 7C            [ 1]  878 	clr	(0x7c, sp)
      008BEF AE 90 38         [ 2]  879 	ldw	x, #___str_0+0
      008BF2 1F 94            [ 2]  880 	ldw	(0x94, sp), x
      008BF4 96               [ 1]  881 	ldw	x, sp
      008BF5 1C 00 06         [ 2]  882 	addw	x, #6
      008BF8 1F 8E            [ 2]  883 	ldw	(0x8e, sp), x
      008BFA 1E 8E            [ 2]  884 	ldw	x, (0x8e, sp)
      008BFC 88               [ 1]  885 	push	a
      008BFD 7B 7D            [ 1]  886 	ld	a, (0x7d, sp)
      008BFF 88               [ 1]  887 	push	a
      008C00 16 96            [ 2]  888 	ldw	y, (0x96, sp)
      008C02 90 89            [ 2]  889 	pushw	y
      008C04 89               [ 2]  890 	pushw	x
      008C05 CD 9F B9         [ 4]  891 	call	_sprintf
      008C08 5B 06            [ 2]  892 	addw	sp, #6
                                    893 ;	user/nRF24L01.c: 294: VCOM_puts(buff_usart);
      008C0A 1E 8E            [ 2]  894 	ldw	x, (0x8e, sp)
      008C0C 89               [ 2]  895 	pushw	x
      008C0D CD 93 41         [ 4]  896 	call	_VCOM_puts
      008C10 85               [ 2]  897 	popw	x
                                    898 ;	user/nRF24L01.c: 295: status = nRF_Read(EN_AA);
      008C11 4B 01            [ 1]  899 	push	#0x01
      008C13 CD 89 C9         [ 4]  900 	call	_nRF_Read
      008C16 5B 01            [ 2]  901 	addw	sp, #1
                                    902 ;	user/nRF24L01.c: 296: sprintf(buff_usart,"EN_AA: %2x\r\n",status);
      008C18 5F               [ 1]  903 	clrw	x
      008C19 97               [ 1]  904 	ld	xl, a
      008C1A 90 AE 90 46      [ 2]  905 	ldw	y, #___str_1+0
      008C1E 17 8C            [ 2]  906 	ldw	(0x8c, sp), y
      008C20 16 8E            [ 2]  907 	ldw	y, (0x8e, sp)
      008C22 89               [ 2]  908 	pushw	x
      008C23 1E 8E            [ 2]  909 	ldw	x, (0x8e, sp)
      008C25 89               [ 2]  910 	pushw	x
      008C26 90 89            [ 2]  911 	pushw	y
      008C28 CD 9F B9         [ 4]  912 	call	_sprintf
      008C2B 5B 06            [ 2]  913 	addw	sp, #6
                                    914 ;	user/nRF24L01.c: 297: VCOM_puts(buff_usart);
      008C2D 1E 8E            [ 2]  915 	ldw	x, (0x8e, sp)
      008C2F 89               [ 2]  916 	pushw	x
      008C30 CD 93 41         [ 4]  917 	call	_VCOM_puts
      008C33 85               [ 2]  918 	popw	x
                                    919 ;	user/nRF24L01.c: 298: status = nRF_Read(EN_RXADDR);
      008C34 4B 02            [ 1]  920 	push	#0x02
      008C36 CD 89 C9         [ 4]  921 	call	_nRF_Read
      008C39 5B 01            [ 2]  922 	addw	sp, #1
                                    923 ;	user/nRF24L01.c: 299: sprintf(buff_usart,"EN_RXADDR: %2x\r\n",status);
      008C3B 5F               [ 1]  924 	clrw	x
      008C3C 97               [ 1]  925 	ld	xl, a
      008C3D 90 AE 90 53      [ 2]  926 	ldw	y, #___str_2+0
      008C41 17 82            [ 2]  927 	ldw	(0x82, sp), y
      008C43 16 8E            [ 2]  928 	ldw	y, (0x8e, sp)
      008C45 89               [ 2]  929 	pushw	x
      008C46 1E 84            [ 2]  930 	ldw	x, (0x84, sp)
      008C48 89               [ 2]  931 	pushw	x
      008C49 90 89            [ 2]  932 	pushw	y
      008C4B CD 9F B9         [ 4]  933 	call	_sprintf
      008C4E 5B 06            [ 2]  934 	addw	sp, #6
                                    935 ;	user/nRF24L01.c: 300: VCOM_puts(buff_usart);
      008C50 1E 8E            [ 2]  936 	ldw	x, (0x8e, sp)
      008C52 89               [ 2]  937 	pushw	x
      008C53 CD 93 41         [ 4]  938 	call	_VCOM_puts
      008C56 85               [ 2]  939 	popw	x
                                    940 ;	user/nRF24L01.c: 301: status = nRF_Read(SETUP_AW);
      008C57 4B 03            [ 1]  941 	push	#0x03
      008C59 CD 89 C9         [ 4]  942 	call	_nRF_Read
      008C5C 5B 01            [ 2]  943 	addw	sp, #1
                                    944 ;	user/nRF24L01.c: 302: sprintf(buff_usart,"SETUP_AW: %2x\r\n",status);
      008C5E 5F               [ 1]  945 	clrw	x
      008C5F 97               [ 1]  946 	ld	xl, a
      008C60 90 AE 90 64      [ 2]  947 	ldw	y, #___str_3+0
      008C64 17 96            [ 2]  948 	ldw	(0x96, sp), y
      008C66 16 8E            [ 2]  949 	ldw	y, (0x8e, sp)
      008C68 89               [ 2]  950 	pushw	x
      008C69 1E 98            [ 2]  951 	ldw	x, (0x98, sp)
      008C6B 89               [ 2]  952 	pushw	x
      008C6C 90 89            [ 2]  953 	pushw	y
      008C6E CD 9F B9         [ 4]  954 	call	_sprintf
      008C71 5B 06            [ 2]  955 	addw	sp, #6
                                    956 ;	user/nRF24L01.c: 303: VCOM_puts(buff_usart);
      008C73 1E 8E            [ 2]  957 	ldw	x, (0x8e, sp)
      008C75 89               [ 2]  958 	pushw	x
      008C76 CD 93 41         [ 4]  959 	call	_VCOM_puts
      008C79 85               [ 2]  960 	popw	x
                                    961 ;	user/nRF24L01.c: 304: status = nRF_Read(SETUP_RETR);
      008C7A 4B 04            [ 1]  962 	push	#0x04
      008C7C CD 89 C9         [ 4]  963 	call	_nRF_Read
      008C7F 5B 01            [ 2]  964 	addw	sp, #1
                                    965 ;	user/nRF24L01.c: 305: sprintf(buff_usart,"SETUP_RETR: %2x\r\n",status);
      008C81 5F               [ 1]  966 	clrw	x
      008C82 97               [ 1]  967 	ld	xl, a
      008C83 90 AE 90 74      [ 2]  968 	ldw	y, #___str_4+0
      008C87 17 80            [ 2]  969 	ldw	(0x80, sp), y
      008C89 16 8E            [ 2]  970 	ldw	y, (0x8e, sp)
      008C8B 89               [ 2]  971 	pushw	x
      008C8C 1E 82            [ 2]  972 	ldw	x, (0x82, sp)
      008C8E 89               [ 2]  973 	pushw	x
      008C8F 90 89            [ 2]  974 	pushw	y
      008C91 CD 9F B9         [ 4]  975 	call	_sprintf
      008C94 5B 06            [ 2]  976 	addw	sp, #6
                                    977 ;	user/nRF24L01.c: 306: VCOM_puts(buff_usart);
      008C96 1E 8E            [ 2]  978 	ldw	x, (0x8e, sp)
      008C98 89               [ 2]  979 	pushw	x
      008C99 CD 93 41         [ 4]  980 	call	_VCOM_puts
      008C9C 85               [ 2]  981 	popw	x
                                    982 ;	user/nRF24L01.c: 307: status = nRF_Read(RF_CH);
      008C9D 4B 05            [ 1]  983 	push	#0x05
      008C9F CD 89 C9         [ 4]  984 	call	_nRF_Read
      008CA2 5B 01            [ 2]  985 	addw	sp, #1
                                    986 ;	user/nRF24L01.c: 308: sprintf(buff_usart,"RF_CH: %2x\r\n",status);
      008CA4 5F               [ 1]  987 	clrw	x
      008CA5 97               [ 1]  988 	ld	xl, a
      008CA6 90 AE 90 86      [ 2]  989 	ldw	y, #___str_5+0
      008CAA 17 7A            [ 2]  990 	ldw	(0x7a, sp), y
      008CAC 16 8E            [ 2]  991 	ldw	y, (0x8e, sp)
      008CAE 89               [ 2]  992 	pushw	x
      008CAF 1E 7C            [ 2]  993 	ldw	x, (0x7c, sp)
      008CB1 89               [ 2]  994 	pushw	x
      008CB2 90 89            [ 2]  995 	pushw	y
      008CB4 CD 9F B9         [ 4]  996 	call	_sprintf
      008CB7 5B 06            [ 2]  997 	addw	sp, #6
                                    998 ;	user/nRF24L01.c: 309: VCOM_puts(buff_usart);
      008CB9 1E 8E            [ 2]  999 	ldw	x, (0x8e, sp)
      008CBB 89               [ 2] 1000 	pushw	x
      008CBC CD 93 41         [ 4] 1001 	call	_VCOM_puts
      008CBF 85               [ 2] 1002 	popw	x
                                   1003 ;	user/nRF24L01.c: 310: status = nRF_Read(RF_SETUP);
      008CC0 4B 06            [ 1] 1004 	push	#0x06
      008CC2 CD 89 C9         [ 4] 1005 	call	_nRF_Read
      008CC5 5B 01            [ 2] 1006 	addw	sp, #1
                                   1007 ;	user/nRF24L01.c: 311: sprintf(buff_usart,"RF_SETUP: %2x\r\n",status);
      008CC7 5F               [ 1] 1008 	clrw	x
      008CC8 97               [ 1] 1009 	ld	xl, a
      008CC9 90 AE 90 93      [ 2] 1010 	ldw	y, #___str_6+0
      008CCD 17 78            [ 2] 1011 	ldw	(0x78, sp), y
      008CCF 16 8E            [ 2] 1012 	ldw	y, (0x8e, sp)
      008CD1 89               [ 2] 1013 	pushw	x
      008CD2 1E 7A            [ 2] 1014 	ldw	x, (0x7a, sp)
      008CD4 89               [ 2] 1015 	pushw	x
      008CD5 90 89            [ 2] 1016 	pushw	y
      008CD7 CD 9F B9         [ 4] 1017 	call	_sprintf
      008CDA 5B 06            [ 2] 1018 	addw	sp, #6
                                   1019 ;	user/nRF24L01.c: 312: VCOM_puts(buff_usart);
      008CDC 1E 8E            [ 2] 1020 	ldw	x, (0x8e, sp)
      008CDE 89               [ 2] 1021 	pushw	x
      008CDF CD 93 41         [ 4] 1022 	call	_VCOM_puts
      008CE2 85               [ 2] 1023 	popw	x
                                   1024 ;	user/nRF24L01.c: 313: status = nRF_Read(STATUS);
      008CE3 4B 07            [ 1] 1025 	push	#0x07
      008CE5 CD 89 C9         [ 4] 1026 	call	_nRF_Read
      008CE8 5B 01            [ 2] 1027 	addw	sp, #1
                                   1028 ;	user/nRF24L01.c: 314: sprintf(buff_usart,"STATUS: %2x\r\n",status);
      008CEA 5F               [ 1] 1029 	clrw	x
      008CEB 97               [ 1] 1030 	ld	xl, a
      008CEC 90 AE 90 A3      [ 2] 1031 	ldw	y, #___str_7+0
      008CF0 17 86            [ 2] 1032 	ldw	(0x86, sp), y
      008CF2 16 8E            [ 2] 1033 	ldw	y, (0x8e, sp)
      008CF4 89               [ 2] 1034 	pushw	x
      008CF5 1E 88            [ 2] 1035 	ldw	x, (0x88, sp)
      008CF7 89               [ 2] 1036 	pushw	x
      008CF8 90 89            [ 2] 1037 	pushw	y
      008CFA CD 9F B9         [ 4] 1038 	call	_sprintf
      008CFD 5B 06            [ 2] 1039 	addw	sp, #6
                                   1040 ;	user/nRF24L01.c: 315: VCOM_puts(buff_usart);
      008CFF 1E 8E            [ 2] 1041 	ldw	x, (0x8e, sp)
      008D01 89               [ 2] 1042 	pushw	x
      008D02 CD 93 41         [ 4] 1043 	call	_VCOM_puts
      008D05 85               [ 2] 1044 	popw	x
                                   1045 ;	user/nRF24L01.c: 316: status = nRF_Read(OBSERVE_TX);
      008D06 4B 08            [ 1] 1046 	push	#0x08
      008D08 CD 89 C9         [ 4] 1047 	call	_nRF_Read
      008D0B 5B 01            [ 2] 1048 	addw	sp, #1
                                   1049 ;	user/nRF24L01.c: 317: sprintf(buff_usart,"OBSERVE_TX: %2x\r\n",status);
      008D0D 5F               [ 1] 1050 	clrw	x
      008D0E 97               [ 1] 1051 	ld	xl, a
      008D0F 90 AE 90 B1      [ 2] 1052 	ldw	y, #___str_8+0
      008D13 17 7E            [ 2] 1053 	ldw	(0x7e, sp), y
      008D15 16 8E            [ 2] 1054 	ldw	y, (0x8e, sp)
      008D17 89               [ 2] 1055 	pushw	x
      008D18 1E 80            [ 2] 1056 	ldw	x, (0x80, sp)
      008D1A 89               [ 2] 1057 	pushw	x
      008D1B 90 89            [ 2] 1058 	pushw	y
      008D1D CD 9F B9         [ 4] 1059 	call	_sprintf
      008D20 5B 06            [ 2] 1060 	addw	sp, #6
                                   1061 ;	user/nRF24L01.c: 318: VCOM_puts(buff_usart);
      008D22 1E 8E            [ 2] 1062 	ldw	x, (0x8e, sp)
      008D24 89               [ 2] 1063 	pushw	x
      008D25 CD 93 41         [ 4] 1064 	call	_VCOM_puts
      008D28 85               [ 2] 1065 	popw	x
                                   1066 ;	user/nRF24L01.c: 319: status = nRF_Read(CD);
      008D29 4B 09            [ 1] 1067 	push	#0x09
      008D2B CD 89 C9         [ 4] 1068 	call	_nRF_Read
      008D2E 5B 01            [ 2] 1069 	addw	sp, #1
                                   1070 ;	user/nRF24L01.c: 320: sprintf(buff_usart,"CD: %2x\r\n",status);
      008D30 5F               [ 1] 1071 	clrw	x
      008D31 97               [ 1] 1072 	ld	xl, a
      008D32 90 AE 90 C3      [ 2] 1073 	ldw	y, #___str_9+0
      008D36 17 76            [ 2] 1074 	ldw	(0x76, sp), y
      008D38 16 8E            [ 2] 1075 	ldw	y, (0x8e, sp)
      008D3A 89               [ 2] 1076 	pushw	x
      008D3B 1E 78            [ 2] 1077 	ldw	x, (0x78, sp)
      008D3D 89               [ 2] 1078 	pushw	x
      008D3E 90 89            [ 2] 1079 	pushw	y
      008D40 CD 9F B9         [ 4] 1080 	call	_sprintf
      008D43 5B 06            [ 2] 1081 	addw	sp, #6
                                   1082 ;	user/nRF24L01.c: 321: VCOM_puts(buff_usart);
      008D45 1E 8E            [ 2] 1083 	ldw	x, (0x8e, sp)
      008D47 89               [ 2] 1084 	pushw	x
      008D48 CD 93 41         [ 4] 1085 	call	_VCOM_puts
      008D4B 85               [ 2] 1086 	popw	x
                                   1087 ;	user/nRF24L01.c: 322: nRF_SPI_Read_Buf(RX_ADDR_P0,buff,5);
      008D4C 96               [ 1] 1088 	ldw	x, sp
      008D4D 5C               [ 2] 1089 	incw	x
      008D4E 1F 74            [ 2] 1090 	ldw	(0x74, sp), x
      008D50 1E 74            [ 2] 1091 	ldw	x, (0x74, sp)
      008D52 4B 05            [ 1] 1092 	push	#0x05
      008D54 89               [ 2] 1093 	pushw	x
      008D55 4B 0A            [ 1] 1094 	push	#0x0a
      008D57 CD 8A 1D         [ 4] 1095 	call	_nRF_SPI_Read_Buf
      008D5A 5B 04            [ 2] 1096 	addw	sp, #4
                                   1097 ;	user/nRF24L01.c: 323: sprintf(buff_usart,"RX_ADDR_P0: %2x%2x%2x%2x%2x\r\n",buff[0],buff[1],buff[2],buff[3],buff[4]);
      008D5C 1E 74            [ 2] 1098 	ldw	x, (0x74, sp)
      008D5E 1C 00 04         [ 2] 1099 	addw	x, #0x0004
      008D61 1F 8A            [ 2] 1100 	ldw	(0x8a, sp), x
      008D63 1E 8A            [ 2] 1101 	ldw	x, (0x8a, sp)
      008D65 F6               [ 1] 1102 	ld	a, (x)
      008D66 6B 85            [ 1] 1103 	ld	(0x85, sp), a
      008D68 0F 84            [ 1] 1104 	clr	(0x84, sp)
      008D6A 1E 74            [ 2] 1105 	ldw	x, (0x74, sp)
      008D6C 1C 00 03         [ 2] 1106 	addw	x, #0x0003
      008D6F 1F 72            [ 2] 1107 	ldw	(0x72, sp), x
      008D71 1E 72            [ 2] 1108 	ldw	x, (0x72, sp)
      008D73 F6               [ 1] 1109 	ld	a, (x)
      008D74 5F               [ 1] 1110 	clrw	x
      008D75 97               [ 1] 1111 	ld	xl, a
      008D76 16 74            [ 2] 1112 	ldw	y, (0x74, sp)
      008D78 90 5C            [ 2] 1113 	incw	y
      008D7A 90 5C            [ 2] 1114 	incw	y
      008D7C 17 92            [ 2] 1115 	ldw	(0x92, sp), y
      008D7E 16 92            [ 2] 1116 	ldw	y, (0x92, sp)
      008D80 90 F6            [ 1] 1117 	ld	a, (y)
      008D82 6B 91            [ 1] 1118 	ld	(0x91, sp), a
      008D84 0F 90            [ 1] 1119 	clr	(0x90, sp)
      008D86 16 74            [ 2] 1120 	ldw	y, (0x74, sp)
      008D88 90 5C            [ 2] 1121 	incw	y
      008D8A 17 88            [ 2] 1122 	ldw	(0x88, sp), y
      008D8C 16 88            [ 2] 1123 	ldw	y, (0x88, sp)
      008D8E 90 F6            [ 1] 1124 	ld	a, (y)
      008D90 6B 5D            [ 1] 1125 	ld	(0x5d, sp), a
      008D92 0F 5C            [ 1] 1126 	clr	(0x5c, sp)
      008D94 16 74            [ 2] 1127 	ldw	y, (0x74, sp)
      008D96 90 F6            [ 1] 1128 	ld	a, (y)
      008D98 0F 50            [ 1] 1129 	clr	(0x50, sp)
      008D9A 90 AE 90 CD      [ 2] 1130 	ldw	y, #___str_10+0
      008D9E 17 4C            [ 2] 1131 	ldw	(0x4c, sp), y
      008DA0 16 8E            [ 2] 1132 	ldw	y, (0x8e, sp)
      008DA2 17 4E            [ 2] 1133 	ldw	(0x4e, sp), y
      008DA4 16 84            [ 2] 1134 	ldw	y, (0x84, sp)
      008DA6 90 89            [ 2] 1135 	pushw	y
      008DA8 89               [ 2] 1136 	pushw	x
      008DA9 1E 94            [ 2] 1137 	ldw	x, (0x94, sp)
      008DAB 89               [ 2] 1138 	pushw	x
      008DAC 1E 62            [ 2] 1139 	ldw	x, (0x62, sp)
      008DAE 89               [ 2] 1140 	pushw	x
      008DAF 88               [ 1] 1141 	push	a
      008DB0 7B 59            [ 1] 1142 	ld	a, (0x59, sp)
      008DB2 88               [ 1] 1143 	push	a
      008DB3 1E 56            [ 2] 1144 	ldw	x, (0x56, sp)
      008DB5 89               [ 2] 1145 	pushw	x
      008DB6 1E 5A            [ 2] 1146 	ldw	x, (0x5a, sp)
      008DB8 89               [ 2] 1147 	pushw	x
      008DB9 CD 9F B9         [ 4] 1148 	call	_sprintf
      008DBC 5B 0E            [ 2] 1149 	addw	sp, #14
                                   1150 ;	user/nRF24L01.c: 324: VCOM_puts(buff_usart);
      008DBE 1E 8E            [ 2] 1151 	ldw	x, (0x8e, sp)
      008DC0 89               [ 2] 1152 	pushw	x
      008DC1 CD 93 41         [ 4] 1153 	call	_VCOM_puts
      008DC4 85               [ 2] 1154 	popw	x
                                   1155 ;	user/nRF24L01.c: 325: nRF_SPI_Read_Buf(RX_ADDR_P1,buff,5);
      008DC5 1E 74            [ 2] 1156 	ldw	x, (0x74, sp)
      008DC7 4B 05            [ 1] 1157 	push	#0x05
      008DC9 89               [ 2] 1158 	pushw	x
      008DCA 4B 0B            [ 1] 1159 	push	#0x0b
      008DCC CD 8A 1D         [ 4] 1160 	call	_nRF_SPI_Read_Buf
      008DCF 5B 04            [ 2] 1161 	addw	sp, #4
                                   1162 ;	user/nRF24L01.c: 326: sprintf(buff_usart,"RX_ADDR_P1: %2x%2x%2x%2x%2x\r\n",buff[0],buff[1],buff[2],buff[3],buff[4]);
      008DD1 1E 8A            [ 2] 1163 	ldw	x, (0x8a, sp)
      008DD3 F6               [ 1] 1164 	ld	a, (x)
      008DD4 6B 71            [ 1] 1165 	ld	(0x71, sp), a
      008DD6 0F 70            [ 1] 1166 	clr	(0x70, sp)
      008DD8 1E 72            [ 2] 1167 	ldw	x, (0x72, sp)
      008DDA F6               [ 1] 1168 	ld	a, (x)
      008DDB 6B 59            [ 1] 1169 	ld	(0x59, sp), a
      008DDD 0F 58            [ 1] 1170 	clr	(0x58, sp)
      008DDF 1E 92            [ 2] 1171 	ldw	x, (0x92, sp)
      008DE1 F6               [ 1] 1172 	ld	a, (x)
      008DE2 6B 67            [ 1] 1173 	ld	(0x67, sp), a
      008DE4 0F 66            [ 1] 1174 	clr	(0x66, sp)
      008DE6 1E 88            [ 2] 1175 	ldw	x, (0x88, sp)
      008DE8 F6               [ 1] 1176 	ld	a, (x)
      008DE9 6B 6D            [ 1] 1177 	ld	(0x6d, sp), a
      008DEB 0F 6C            [ 1] 1178 	clr	(0x6c, sp)
      008DED 1E 74            [ 2] 1179 	ldw	x, (0x74, sp)
      008DEF F6               [ 1] 1180 	ld	a, (x)
      008DF0 0F 6A            [ 1] 1181 	clr	(0x6a, sp)
      008DF2 AE 90 EB         [ 2] 1182 	ldw	x, #___str_11+0
      008DF5 1F 4A            [ 2] 1183 	ldw	(0x4a, sp), x
      008DF7 16 8E            [ 2] 1184 	ldw	y, (0x8e, sp)
      008DF9 1E 70            [ 2] 1185 	ldw	x, (0x70, sp)
      008DFB 89               [ 2] 1186 	pushw	x
      008DFC 1E 5A            [ 2] 1187 	ldw	x, (0x5a, sp)
      008DFE 89               [ 2] 1188 	pushw	x
      008DFF 1E 6A            [ 2] 1189 	ldw	x, (0x6a, sp)
      008E01 89               [ 2] 1190 	pushw	x
      008E02 1E 72            [ 2] 1191 	ldw	x, (0x72, sp)
      008E04 89               [ 2] 1192 	pushw	x
      008E05 88               [ 1] 1193 	push	a
      008E06 7B 73            [ 1] 1194 	ld	a, (0x73, sp)
      008E08 88               [ 1] 1195 	push	a
      008E09 1E 54            [ 2] 1196 	ldw	x, (0x54, sp)
      008E0B 89               [ 2] 1197 	pushw	x
      008E0C 90 89            [ 2] 1198 	pushw	y
      008E0E CD 9F B9         [ 4] 1199 	call	_sprintf
      008E11 5B 0E            [ 2] 1200 	addw	sp, #14
                                   1201 ;	user/nRF24L01.c: 327: VCOM_puts(buff_usart);
      008E13 1E 8E            [ 2] 1202 	ldw	x, (0x8e, sp)
      008E15 89               [ 2] 1203 	pushw	x
      008E16 CD 93 41         [ 4] 1204 	call	_VCOM_puts
      008E19 85               [ 2] 1205 	popw	x
                                   1206 ;	user/nRF24L01.c: 328: status = nRF_Read(RX_ADDR_P2);
      008E1A 4B 0C            [ 1] 1207 	push	#0x0c
      008E1C CD 89 C9         [ 4] 1208 	call	_nRF_Read
      008E1F 5B 01            [ 2] 1209 	addw	sp, #1
                                   1210 ;	user/nRF24L01.c: 329: sprintf(buff_usart,"RX_ADDR_P2: %2x\r\n",status);
      008E21 5F               [ 1] 1211 	clrw	x
      008E22 97               [ 1] 1212 	ld	xl, a
      008E23 90 AE 91 09      [ 2] 1213 	ldw	y, #___str_12+0
      008E27 17 68            [ 2] 1214 	ldw	(0x68, sp), y
      008E29 16 8E            [ 2] 1215 	ldw	y, (0x8e, sp)
      008E2B 89               [ 2] 1216 	pushw	x
      008E2C 1E 6A            [ 2] 1217 	ldw	x, (0x6a, sp)
      008E2E 89               [ 2] 1218 	pushw	x
      008E2F 90 89            [ 2] 1219 	pushw	y
      008E31 CD 9F B9         [ 4] 1220 	call	_sprintf
      008E34 5B 06            [ 2] 1221 	addw	sp, #6
                                   1222 ;	user/nRF24L01.c: 330: VCOM_puts(buff_usart);
      008E36 1E 8E            [ 2] 1223 	ldw	x, (0x8e, sp)
      008E38 89               [ 2] 1224 	pushw	x
      008E39 CD 93 41         [ 4] 1225 	call	_VCOM_puts
      008E3C 85               [ 2] 1226 	popw	x
                                   1227 ;	user/nRF24L01.c: 331: status = nRF_Read(RX_ADDR_P3);
      008E3D 4B 0D            [ 1] 1228 	push	#0x0d
      008E3F CD 89 C9         [ 4] 1229 	call	_nRF_Read
      008E42 5B 01            [ 2] 1230 	addw	sp, #1
                                   1231 ;	user/nRF24L01.c: 332: sprintf(buff_usart,"RX_ADDR_P3: %2x\r\n",status);
      008E44 5F               [ 1] 1232 	clrw	x
      008E45 97               [ 1] 1233 	ld	xl, a
      008E46 90 AE 91 1B      [ 2] 1234 	ldw	y, #___str_13+0
      008E4A 17 44            [ 2] 1235 	ldw	(0x44, sp), y
      008E4C 16 8E            [ 2] 1236 	ldw	y, (0x8e, sp)
      008E4E 89               [ 2] 1237 	pushw	x
      008E4F 1E 46            [ 2] 1238 	ldw	x, (0x46, sp)
      008E51 89               [ 2] 1239 	pushw	x
      008E52 90 89            [ 2] 1240 	pushw	y
      008E54 CD 9F B9         [ 4] 1241 	call	_sprintf
      008E57 5B 06            [ 2] 1242 	addw	sp, #6
                                   1243 ;	user/nRF24L01.c: 333: VCOM_puts(buff_usart);
      008E59 1E 8E            [ 2] 1244 	ldw	x, (0x8e, sp)
      008E5B 89               [ 2] 1245 	pushw	x
      008E5C CD 93 41         [ 4] 1246 	call	_VCOM_puts
      008E5F 85               [ 2] 1247 	popw	x
                                   1248 ;	user/nRF24L01.c: 334: status = nRF_Read(RX_ADDR_P4);
      008E60 4B 0E            [ 1] 1249 	push	#0x0e
      008E62 CD 89 C9         [ 4] 1250 	call	_nRF_Read
      008E65 5B 01            [ 2] 1251 	addw	sp, #1
                                   1252 ;	user/nRF24L01.c: 335: sprintf(buff_usart,"RX_ADDR_P4: %2x\r\n",status);
      008E67 5F               [ 1] 1253 	clrw	x
      008E68 97               [ 1] 1254 	ld	xl, a
      008E69 90 AE 91 2D      [ 2] 1255 	ldw	y, #___str_14+0
      008E6D 17 38            [ 2] 1256 	ldw	(0x38, sp), y
      008E6F 16 8E            [ 2] 1257 	ldw	y, (0x8e, sp)
      008E71 89               [ 2] 1258 	pushw	x
      008E72 1E 3A            [ 2] 1259 	ldw	x, (0x3a, sp)
      008E74 89               [ 2] 1260 	pushw	x
      008E75 90 89            [ 2] 1261 	pushw	y
      008E77 CD 9F B9         [ 4] 1262 	call	_sprintf
      008E7A 5B 06            [ 2] 1263 	addw	sp, #6
                                   1264 ;	user/nRF24L01.c: 336: VCOM_puts(buff_usart);
      008E7C 1E 8E            [ 2] 1265 	ldw	x, (0x8e, sp)
      008E7E 89               [ 2] 1266 	pushw	x
      008E7F CD 93 41         [ 4] 1267 	call	_VCOM_puts
      008E82 85               [ 2] 1268 	popw	x
                                   1269 ;	user/nRF24L01.c: 337: status = nRF_Read(RX_ADDR_P5);
      008E83 4B 0F            [ 1] 1270 	push	#0x0f
      008E85 CD 89 C9         [ 4] 1271 	call	_nRF_Read
      008E88 5B 01            [ 2] 1272 	addw	sp, #1
                                   1273 ;	user/nRF24L01.c: 338: sprintf(buff_usart,"RX_ADDR_P5: %2x\r\n",status);
      008E8A 5F               [ 1] 1274 	clrw	x
      008E8B 97               [ 1] 1275 	ld	xl, a
      008E8C 90 AE 91 3F      [ 2] 1276 	ldw	y, #___str_15+0
      008E90 17 5A            [ 2] 1277 	ldw	(0x5a, sp), y
      008E92 16 8E            [ 2] 1278 	ldw	y, (0x8e, sp)
      008E94 89               [ 2] 1279 	pushw	x
      008E95 1E 5C            [ 2] 1280 	ldw	x, (0x5c, sp)
      008E97 89               [ 2] 1281 	pushw	x
      008E98 90 89            [ 2] 1282 	pushw	y
      008E9A CD 9F B9         [ 4] 1283 	call	_sprintf
      008E9D 5B 06            [ 2] 1284 	addw	sp, #6
                                   1285 ;	user/nRF24L01.c: 339: VCOM_puts(buff_usart);	
      008E9F 1E 8E            [ 2] 1286 	ldw	x, (0x8e, sp)
      008EA1 89               [ 2] 1287 	pushw	x
      008EA2 CD 93 41         [ 4] 1288 	call	_VCOM_puts
      008EA5 85               [ 2] 1289 	popw	x
                                   1290 ;	user/nRF24L01.c: 340: nRF_SPI_Read_Buf(TX_ADDR,buff,5);
      008EA6 1E 74            [ 2] 1291 	ldw	x, (0x74, sp)
      008EA8 4B 05            [ 1] 1292 	push	#0x05
      008EAA 89               [ 2] 1293 	pushw	x
      008EAB 4B 10            [ 1] 1294 	push	#0x10
      008EAD CD 8A 1D         [ 4] 1295 	call	_nRF_SPI_Read_Buf
      008EB0 5B 04            [ 2] 1296 	addw	sp, #4
                                   1297 ;	user/nRF24L01.c: 341: sprintf(buff_usart,"TX_ADDR: %2x%2x%2x%2x%2x\r\n",buff[0],buff[1],buff[2],buff[3],buff[4]);
      008EB2 1E 8A            [ 2] 1298 	ldw	x, (0x8a, sp)
      008EB4 F6               [ 1] 1299 	ld	a, (x)
      008EB5 6B 41            [ 1] 1300 	ld	(0x41, sp), a
      008EB7 0F 40            [ 1] 1301 	clr	(0x40, sp)
      008EB9 1E 72            [ 2] 1302 	ldw	x, (0x72, sp)
      008EBB F6               [ 1] 1303 	ld	a, (x)
      008EBC 6B 6F            [ 1] 1304 	ld	(0x6f, sp), a
      008EBE 0F 6E            [ 1] 1305 	clr	(0x6e, sp)
      008EC0 1E 92            [ 2] 1306 	ldw	x, (0x92, sp)
      008EC2 F6               [ 1] 1307 	ld	a, (x)
      008EC3 6B 63            [ 1] 1308 	ld	(0x63, sp), a
      008EC5 0F 62            [ 1] 1309 	clr	(0x62, sp)
      008EC7 1E 88            [ 2] 1310 	ldw	x, (0x88, sp)
      008EC9 F6               [ 1] 1311 	ld	a, (x)
      008ECA 6B 3D            [ 1] 1312 	ld	(0x3d, sp), a
      008ECC 0F 3C            [ 1] 1313 	clr	(0x3c, sp)
      008ECE 1E 74            [ 2] 1314 	ldw	x, (0x74, sp)
      008ED0 F6               [ 1] 1315 	ld	a, (x)
      008ED1 0F 64            [ 1] 1316 	clr	(0x64, sp)
      008ED3 AE 91 51         [ 2] 1317 	ldw	x, #___str_16+0
      008ED6 1F 52            [ 2] 1318 	ldw	(0x52, sp), x
      008ED8 16 8E            [ 2] 1319 	ldw	y, (0x8e, sp)
      008EDA 1E 40            [ 2] 1320 	ldw	x, (0x40, sp)
      008EDC 89               [ 2] 1321 	pushw	x
      008EDD 1E 70            [ 2] 1322 	ldw	x, (0x70, sp)
      008EDF 89               [ 2] 1323 	pushw	x
      008EE0 1E 66            [ 2] 1324 	ldw	x, (0x66, sp)
      008EE2 89               [ 2] 1325 	pushw	x
      008EE3 1E 42            [ 2] 1326 	ldw	x, (0x42, sp)
      008EE5 89               [ 2] 1327 	pushw	x
      008EE6 88               [ 1] 1328 	push	a
      008EE7 7B 6D            [ 1] 1329 	ld	a, (0x6d, sp)
      008EE9 88               [ 1] 1330 	push	a
      008EEA 1E 5C            [ 2] 1331 	ldw	x, (0x5c, sp)
      008EEC 89               [ 2] 1332 	pushw	x
      008EED 90 89            [ 2] 1333 	pushw	y
      008EEF CD 9F B9         [ 4] 1334 	call	_sprintf
      008EF2 5B 0E            [ 2] 1335 	addw	sp, #14
                                   1336 ;	user/nRF24L01.c: 342: VCOM_puts(buff_usart);
      008EF4 1E 8E            [ 2] 1337 	ldw	x, (0x8e, sp)
      008EF6 89               [ 2] 1338 	pushw	x
      008EF7 CD 93 41         [ 4] 1339 	call	_VCOM_puts
      008EFA 85               [ 2] 1340 	popw	x
                                   1341 ;	user/nRF24L01.c: 343: status = nRF_Read(RX_PW_P0);
      008EFB 4B 11            [ 1] 1342 	push	#0x11
      008EFD CD 89 C9         [ 4] 1343 	call	_nRF_Read
      008F00 5B 01            [ 2] 1344 	addw	sp, #1
                                   1345 ;	user/nRF24L01.c: 344: sprintf(buff_usart,"RX_PW_P0: %2x\r\n",status);
      008F02 5F               [ 1] 1346 	clrw	x
      008F03 97               [ 1] 1347 	ld	xl, a
      008F04 90 AE 91 6C      [ 2] 1348 	ldw	y, #___str_17+0
      008F08 17 60            [ 2] 1349 	ldw	(0x60, sp), y
      008F0A 16 8E            [ 2] 1350 	ldw	y, (0x8e, sp)
      008F0C 89               [ 2] 1351 	pushw	x
      008F0D 1E 62            [ 2] 1352 	ldw	x, (0x62, sp)
      008F0F 89               [ 2] 1353 	pushw	x
      008F10 90 89            [ 2] 1354 	pushw	y
      008F12 CD 9F B9         [ 4] 1355 	call	_sprintf
      008F15 5B 06            [ 2] 1356 	addw	sp, #6
                                   1357 ;	user/nRF24L01.c: 345: VCOM_puts(buff_usart);
      008F17 1E 8E            [ 2] 1358 	ldw	x, (0x8e, sp)
      008F19 89               [ 2] 1359 	pushw	x
      008F1A CD 93 41         [ 4] 1360 	call	_VCOM_puts
      008F1D 85               [ 2] 1361 	popw	x
                                   1362 ;	user/nRF24L01.c: 346: status = nRF_Read(RX_PW_P1);
      008F1E 4B 12            [ 1] 1363 	push	#0x12
      008F20 CD 89 C9         [ 4] 1364 	call	_nRF_Read
      008F23 5B 01            [ 2] 1365 	addw	sp, #1
                                   1366 ;	user/nRF24L01.c: 347: sprintf(buff_usart,"RX_PW_P1: %2x\r\n",status);
      008F25 5F               [ 1] 1367 	clrw	x
      008F26 97               [ 1] 1368 	ld	xl, a
      008F27 90 AE 91 7C      [ 2] 1369 	ldw	y, #___str_18+0
      008F2B 17 3E            [ 2] 1370 	ldw	(0x3e, sp), y
      008F2D 16 8E            [ 2] 1371 	ldw	y, (0x8e, sp)
      008F2F 89               [ 2] 1372 	pushw	x
      008F30 1E 40            [ 2] 1373 	ldw	x, (0x40, sp)
      008F32 89               [ 2] 1374 	pushw	x
      008F33 90 89            [ 2] 1375 	pushw	y
      008F35 CD 9F B9         [ 4] 1376 	call	_sprintf
      008F38 5B 06            [ 2] 1377 	addw	sp, #6
                                   1378 ;	user/nRF24L01.c: 348: VCOM_puts(buff_usart);
      008F3A 1E 8E            [ 2] 1379 	ldw	x, (0x8e, sp)
      008F3C 89               [ 2] 1380 	pushw	x
      008F3D CD 93 41         [ 4] 1381 	call	_VCOM_puts
      008F40 85               [ 2] 1382 	popw	x
                                   1383 ;	user/nRF24L01.c: 349: status = nRF_Read(RX_PW_P2);
      008F41 4B 13            [ 1] 1384 	push	#0x13
      008F43 CD 89 C9         [ 4] 1385 	call	_nRF_Read
      008F46 5B 01            [ 2] 1386 	addw	sp, #1
                                   1387 ;	user/nRF24L01.c: 350: sprintf(buff_usart,"RX_PW_P2: %2x\r\n",status);
      008F48 5F               [ 1] 1388 	clrw	x
      008F49 97               [ 1] 1389 	ld	xl, a
      008F4A 90 AE 91 8C      [ 2] 1390 	ldw	y, #___str_19+0
      008F4E 17 5E            [ 2] 1391 	ldw	(0x5e, sp), y
      008F50 16 8E            [ 2] 1392 	ldw	y, (0x8e, sp)
      008F52 89               [ 2] 1393 	pushw	x
      008F53 1E 60            [ 2] 1394 	ldw	x, (0x60, sp)
      008F55 89               [ 2] 1395 	pushw	x
      008F56 90 89            [ 2] 1396 	pushw	y
      008F58 CD 9F B9         [ 4] 1397 	call	_sprintf
      008F5B 5B 06            [ 2] 1398 	addw	sp, #6
                                   1399 ;	user/nRF24L01.c: 351: VCOM_puts(buff_usart);
      008F5D 1E 8E            [ 2] 1400 	ldw	x, (0x8e, sp)
      008F5F 89               [ 2] 1401 	pushw	x
      008F60 CD 93 41         [ 4] 1402 	call	_VCOM_puts
      008F63 85               [ 2] 1403 	popw	x
                                   1404 ;	user/nRF24L01.c: 352: status = nRF_Read(RX_PW_P3);
      008F64 4B 14            [ 1] 1405 	push	#0x14
      008F66 CD 89 C9         [ 4] 1406 	call	_nRF_Read
      008F69 5B 01            [ 2] 1407 	addw	sp, #1
                                   1408 ;	user/nRF24L01.c: 353: sprintf(buff_usart,"RX_PW_P3: %2x\r\n",status);
      008F6B 5F               [ 1] 1409 	clrw	x
      008F6C 97               [ 1] 1410 	ld	xl, a
      008F6D 90 AE 91 9C      [ 2] 1411 	ldw	y, #___str_20+0
      008F71 17 56            [ 2] 1412 	ldw	(0x56, sp), y
      008F73 16 8E            [ 2] 1413 	ldw	y, (0x8e, sp)
      008F75 89               [ 2] 1414 	pushw	x
      008F76 1E 58            [ 2] 1415 	ldw	x, (0x58, sp)
      008F78 89               [ 2] 1416 	pushw	x
      008F79 90 89            [ 2] 1417 	pushw	y
      008F7B CD 9F B9         [ 4] 1418 	call	_sprintf
      008F7E 5B 06            [ 2] 1419 	addw	sp, #6
                                   1420 ;	user/nRF24L01.c: 354: VCOM_puts(buff_usart);
      008F80 1E 8E            [ 2] 1421 	ldw	x, (0x8e, sp)
      008F82 89               [ 2] 1422 	pushw	x
      008F83 CD 93 41         [ 4] 1423 	call	_VCOM_puts
      008F86 85               [ 2] 1424 	popw	x
                                   1425 ;	user/nRF24L01.c: 355: status = nRF_Read(RX_PW_P4);
      008F87 4B 15            [ 1] 1426 	push	#0x15
      008F89 CD 89 C9         [ 4] 1427 	call	_nRF_Read
      008F8C 5B 01            [ 2] 1428 	addw	sp, #1
                                   1429 ;	user/nRF24L01.c: 356: sprintf(buff_usart,"RX_PW_P4: %2x\r\n",status);
      008F8E 5F               [ 1] 1430 	clrw	x
      008F8F 97               [ 1] 1431 	ld	xl, a
      008F90 90 AE 91 AC      [ 2] 1432 	ldw	y, #___str_21+0
      008F94 17 48            [ 2] 1433 	ldw	(0x48, sp), y
      008F96 16 8E            [ 2] 1434 	ldw	y, (0x8e, sp)
      008F98 89               [ 2] 1435 	pushw	x
      008F99 1E 4A            [ 2] 1436 	ldw	x, (0x4a, sp)
      008F9B 89               [ 2] 1437 	pushw	x
      008F9C 90 89            [ 2] 1438 	pushw	y
      008F9E CD 9F B9         [ 4] 1439 	call	_sprintf
      008FA1 5B 06            [ 2] 1440 	addw	sp, #6
                                   1441 ;	user/nRF24L01.c: 357: VCOM_puts(buff_usart);
      008FA3 1E 8E            [ 2] 1442 	ldw	x, (0x8e, sp)
      008FA5 89               [ 2] 1443 	pushw	x
      008FA6 CD 93 41         [ 4] 1444 	call	_VCOM_puts
      008FA9 85               [ 2] 1445 	popw	x
                                   1446 ;	user/nRF24L01.c: 358: status = nRF_Read(RX_PW_P5);
      008FAA 4B 16            [ 1] 1447 	push	#0x16
      008FAC CD 89 C9         [ 4] 1448 	call	_nRF_Read
      008FAF 5B 01            [ 2] 1449 	addw	sp, #1
                                   1450 ;	user/nRF24L01.c: 359: sprintf(buff_usart,"RX_PW_P5: %2x\r\n",status);
      008FB1 5F               [ 1] 1451 	clrw	x
      008FB2 97               [ 1] 1452 	ld	xl, a
      008FB3 90 AE 91 BC      [ 2] 1453 	ldw	y, #___str_22+0
      008FB7 17 54            [ 2] 1454 	ldw	(0x54, sp), y
      008FB9 16 8E            [ 2] 1455 	ldw	y, (0x8e, sp)
      008FBB 89               [ 2] 1456 	pushw	x
      008FBC 1E 56            [ 2] 1457 	ldw	x, (0x56, sp)
      008FBE 89               [ 2] 1458 	pushw	x
      008FBF 90 89            [ 2] 1459 	pushw	y
      008FC1 CD 9F B9         [ 4] 1460 	call	_sprintf
      008FC4 5B 06            [ 2] 1461 	addw	sp, #6
                                   1462 ;	user/nRF24L01.c: 360: VCOM_puts(buff_usart);
      008FC6 1E 8E            [ 2] 1463 	ldw	x, (0x8e, sp)
      008FC8 89               [ 2] 1464 	pushw	x
      008FC9 CD 93 41         [ 4] 1465 	call	_VCOM_puts
      008FCC 85               [ 2] 1466 	popw	x
                                   1467 ;	user/nRF24L01.c: 361: status = nRF_Read(FIFO_STATUS);
      008FCD 4B 17            [ 1] 1468 	push	#0x17
      008FCF CD 89 C9         [ 4] 1469 	call	_nRF_Read
      008FD2 5B 01            [ 2] 1470 	addw	sp, #1
                                   1471 ;	user/nRF24L01.c: 362: sprintf(buff_usart,"FIFO_STATUS: %2x\r\n",status);
      008FD4 5F               [ 1] 1472 	clrw	x
      008FD5 97               [ 1] 1473 	ld	xl, a
      008FD6 90 AE 91 CC      [ 2] 1474 	ldw	y, #___str_23+0
      008FDA 17 46            [ 2] 1475 	ldw	(0x46, sp), y
      008FDC 16 8E            [ 2] 1476 	ldw	y, (0x8e, sp)
      008FDE 89               [ 2] 1477 	pushw	x
      008FDF 1E 48            [ 2] 1478 	ldw	x, (0x48, sp)
      008FE1 89               [ 2] 1479 	pushw	x
      008FE2 90 89            [ 2] 1480 	pushw	y
      008FE4 CD 9F B9         [ 4] 1481 	call	_sprintf
      008FE7 5B 06            [ 2] 1482 	addw	sp, #6
                                   1483 ;	user/nRF24L01.c: 363: VCOM_puts(buff_usart);
      008FE9 1E 8E            [ 2] 1484 	ldw	x, (0x8e, sp)
      008FEB 89               [ 2] 1485 	pushw	x
      008FEC CD 93 41         [ 4] 1486 	call	_VCOM_puts
      008FEF 85               [ 2] 1487 	popw	x
                                   1488 ;	user/nRF24L01.c: 364: status = nRF_Read(DYNPD);
      008FF0 4B 1C            [ 1] 1489 	push	#0x1c
      008FF2 CD 89 C9         [ 4] 1490 	call	_nRF_Read
      008FF5 5B 01            [ 2] 1491 	addw	sp, #1
                                   1492 ;	user/nRF24L01.c: 365: sprintf(buff_usart,"DYNPD: %2x\r\n",status);
      008FF7 5F               [ 1] 1493 	clrw	x
      008FF8 97               [ 1] 1494 	ld	xl, a
      008FF9 90 AE 91 DF      [ 2] 1495 	ldw	y, #___str_24+0
      008FFD 17 3A            [ 2] 1496 	ldw	(0x3a, sp), y
      008FFF 16 8E            [ 2] 1497 	ldw	y, (0x8e, sp)
      009001 89               [ 2] 1498 	pushw	x
      009002 1E 3C            [ 2] 1499 	ldw	x, (0x3c, sp)
      009004 89               [ 2] 1500 	pushw	x
      009005 90 89            [ 2] 1501 	pushw	y
      009007 CD 9F B9         [ 4] 1502 	call	_sprintf
      00900A 5B 06            [ 2] 1503 	addw	sp, #6
                                   1504 ;	user/nRF24L01.c: 366: VCOM_puts(buff_usart);
      00900C 1E 8E            [ 2] 1505 	ldw	x, (0x8e, sp)
      00900E 89               [ 2] 1506 	pushw	x
      00900F CD 93 41         [ 4] 1507 	call	_VCOM_puts
      009012 85               [ 2] 1508 	popw	x
                                   1509 ;	user/nRF24L01.c: 367: status = nRF_Read(FEATURE);
      009013 4B 1D            [ 1] 1510 	push	#0x1d
      009015 CD 89 C9         [ 4] 1511 	call	_nRF_Read
      009018 5B 01            [ 2] 1512 	addw	sp, #1
                                   1513 ;	user/nRF24L01.c: 368: sprintf(buff_usart,"FEATURE: %2x\r\n",status);
      00901A 5F               [ 1] 1514 	clrw	x
      00901B 97               [ 1] 1515 	ld	xl, a
      00901C 90 AE 91 EC      [ 2] 1516 	ldw	y, #___str_25+0
      009020 17 42            [ 2] 1517 	ldw	(0x42, sp), y
      009022 16 8E            [ 2] 1518 	ldw	y, (0x8e, sp)
      009024 89               [ 2] 1519 	pushw	x
      009025 1E 44            [ 2] 1520 	ldw	x, (0x44, sp)
      009027 89               [ 2] 1521 	pushw	x
      009028 90 89            [ 2] 1522 	pushw	y
      00902A CD 9F B9         [ 4] 1523 	call	_sprintf
      00902D 5B 06            [ 2] 1524 	addw	sp, #6
                                   1525 ;	user/nRF24L01.c: 369: VCOM_puts(buff_usart);
      00902F 1E 8E            [ 2] 1526 	ldw	x, (0x8e, sp)
      009031 89               [ 2] 1527 	pushw	x
      009032 CD 93 41         [ 4] 1528 	call	_VCOM_puts
      009035 5B 99            [ 2] 1529 	addw	sp, #153
      009037 81               [ 4] 1530 	ret
                                   1531 	.area CODE
      009038                       1532 ___str_0:
      009038 43 4F 4E 46 49 47 3A  1533 	.ascii "CONFIG: %2x"
             20 25 32 78
      009043 0D                    1534 	.db 0x0d
      009044 0A                    1535 	.db 0x0a
      009045 00                    1536 	.db 0x00
      009046                       1537 ___str_1:
      009046 45 4E 5F 41 41 3A 20  1538 	.ascii "EN_AA: %2x"
             25 32 78
      009050 0D                    1539 	.db 0x0d
      009051 0A                    1540 	.db 0x0a
      009052 00                    1541 	.db 0x00
      009053                       1542 ___str_2:
      009053 45 4E 5F 52 58 41 44  1543 	.ascii "EN_RXADDR: %2x"
             44 52 3A 20 25 32 78
      009061 0D                    1544 	.db 0x0d
      009062 0A                    1545 	.db 0x0a
      009063 00                    1546 	.db 0x00
      009064                       1547 ___str_3:
      009064 53 45 54 55 50 5F 41  1548 	.ascii "SETUP_AW: %2x"
             57 3A 20 25 32 78
      009071 0D                    1549 	.db 0x0d
      009072 0A                    1550 	.db 0x0a
      009073 00                    1551 	.db 0x00
      009074                       1552 ___str_4:
      009074 53 45 54 55 50 5F 52  1553 	.ascii "SETUP_RETR: %2x"
             45 54 52 3A 20 25 32
             78
      009083 0D                    1554 	.db 0x0d
      009084 0A                    1555 	.db 0x0a
      009085 00                    1556 	.db 0x00
      009086                       1557 ___str_5:
      009086 52 46 5F 43 48 3A 20  1558 	.ascii "RF_CH: %2x"
             25 32 78
      009090 0D                    1559 	.db 0x0d
      009091 0A                    1560 	.db 0x0a
      009092 00                    1561 	.db 0x00
      009093                       1562 ___str_6:
      009093 52 46 5F 53 45 54 55  1563 	.ascii "RF_SETUP: %2x"
             50 3A 20 25 32 78
      0090A0 0D                    1564 	.db 0x0d
      0090A1 0A                    1565 	.db 0x0a
      0090A2 00                    1566 	.db 0x00
      0090A3                       1567 ___str_7:
      0090A3 53 54 41 54 55 53 3A  1568 	.ascii "STATUS: %2x"
             20 25 32 78
      0090AE 0D                    1569 	.db 0x0d
      0090AF 0A                    1570 	.db 0x0a
      0090B0 00                    1571 	.db 0x00
      0090B1                       1572 ___str_8:
      0090B1 4F 42 53 45 52 56 45  1573 	.ascii "OBSERVE_TX: %2x"
             5F 54 58 3A 20 25 32
             78
      0090C0 0D                    1574 	.db 0x0d
      0090C1 0A                    1575 	.db 0x0a
      0090C2 00                    1576 	.db 0x00
      0090C3                       1577 ___str_9:
      0090C3 43 44 3A 20 25 32 78  1578 	.ascii "CD: %2x"
      0090CA 0D                    1579 	.db 0x0d
      0090CB 0A                    1580 	.db 0x0a
      0090CC 00                    1581 	.db 0x00
      0090CD                       1582 ___str_10:
      0090CD 52 58 5F 41 44 44 52  1583 	.ascii "RX_ADDR_P0: %2x%2x%2x%2x%2x"
             5F 50 30 3A 20 25 32
             78 25 32 78 25 32 78
             25 32 78 25 32 78
      0090E8 0D                    1584 	.db 0x0d
      0090E9 0A                    1585 	.db 0x0a
      0090EA 00                    1586 	.db 0x00
      0090EB                       1587 ___str_11:
      0090EB 52 58 5F 41 44 44 52  1588 	.ascii "RX_ADDR_P1: %2x%2x%2x%2x%2x"
             5F 50 31 3A 20 25 32
             78 25 32 78 25 32 78
             25 32 78 25 32 78
      009106 0D                    1589 	.db 0x0d
      009107 0A                    1590 	.db 0x0a
      009108 00                    1591 	.db 0x00
      009109                       1592 ___str_12:
      009109 52 58 5F 41 44 44 52  1593 	.ascii "RX_ADDR_P2: %2x"
             5F 50 32 3A 20 25 32
             78
      009118 0D                    1594 	.db 0x0d
      009119 0A                    1595 	.db 0x0a
      00911A 00                    1596 	.db 0x00
      00911B                       1597 ___str_13:
      00911B 52 58 5F 41 44 44 52  1598 	.ascii "RX_ADDR_P3: %2x"
             5F 50 33 3A 20 25 32
             78
      00912A 0D                    1599 	.db 0x0d
      00912B 0A                    1600 	.db 0x0a
      00912C 00                    1601 	.db 0x00
      00912D                       1602 ___str_14:
      00912D 52 58 5F 41 44 44 52  1603 	.ascii "RX_ADDR_P4: %2x"
             5F 50 34 3A 20 25 32
             78
      00913C 0D                    1604 	.db 0x0d
      00913D 0A                    1605 	.db 0x0a
      00913E 00                    1606 	.db 0x00
      00913F                       1607 ___str_15:
      00913F 52 58 5F 41 44 44 52  1608 	.ascii "RX_ADDR_P5: %2x"
             5F 50 35 3A 20 25 32
             78
      00914E 0D                    1609 	.db 0x0d
      00914F 0A                    1610 	.db 0x0a
      009150 00                    1611 	.db 0x00
      009151                       1612 ___str_16:
      009151 54 58 5F 41 44 44 52  1613 	.ascii "TX_ADDR: %2x%2x%2x%2x%2x"
             3A 20 25 32 78 25 32
             78 25 32 78 25 32 78
             25 32 78
      009169 0D                    1614 	.db 0x0d
      00916A 0A                    1615 	.db 0x0a
      00916B 00                    1616 	.db 0x00
      00916C                       1617 ___str_17:
      00916C 52 58 5F 50 57 5F 50  1618 	.ascii "RX_PW_P0: %2x"
             30 3A 20 25 32 78
      009179 0D                    1619 	.db 0x0d
      00917A 0A                    1620 	.db 0x0a
      00917B 00                    1621 	.db 0x00
      00917C                       1622 ___str_18:
      00917C 52 58 5F 50 57 5F 50  1623 	.ascii "RX_PW_P1: %2x"
             31 3A 20 25 32 78
      009189 0D                    1624 	.db 0x0d
      00918A 0A                    1625 	.db 0x0a
      00918B 00                    1626 	.db 0x00
      00918C                       1627 ___str_19:
      00918C 52 58 5F 50 57 5F 50  1628 	.ascii "RX_PW_P2: %2x"
             32 3A 20 25 32 78
      009199 0D                    1629 	.db 0x0d
      00919A 0A                    1630 	.db 0x0a
      00919B 00                    1631 	.db 0x00
      00919C                       1632 ___str_20:
      00919C 52 58 5F 50 57 5F 50  1633 	.ascii "RX_PW_P3: %2x"
             33 3A 20 25 32 78
      0091A9 0D                    1634 	.db 0x0d
      0091AA 0A                    1635 	.db 0x0a
      0091AB 00                    1636 	.db 0x00
      0091AC                       1637 ___str_21:
      0091AC 52 58 5F 50 57 5F 50  1638 	.ascii "RX_PW_P4: %2x"
             34 3A 20 25 32 78
      0091B9 0D                    1639 	.db 0x0d
      0091BA 0A                    1640 	.db 0x0a
      0091BB 00                    1641 	.db 0x00
      0091BC                       1642 ___str_22:
      0091BC 52 58 5F 50 57 5F 50  1643 	.ascii "RX_PW_P5: %2x"
             35 3A 20 25 32 78
      0091C9 0D                    1644 	.db 0x0d
      0091CA 0A                    1645 	.db 0x0a
      0091CB 00                    1646 	.db 0x00
      0091CC                       1647 ___str_23:
      0091CC 46 49 46 4F 5F 53 54  1648 	.ascii "FIFO_STATUS: %2x"
             41 54 55 53 3A 20 25
             32 78
      0091DC 0D                    1649 	.db 0x0d
      0091DD 0A                    1650 	.db 0x0a
      0091DE 00                    1651 	.db 0x00
      0091DF                       1652 ___str_24:
      0091DF 44 59 4E 50 44 3A 20  1653 	.ascii "DYNPD: %2x"
             25 32 78
      0091E9 0D                    1654 	.db 0x0d
      0091EA 0A                    1655 	.db 0x0a
      0091EB 00                    1656 	.db 0x00
      0091EC                       1657 ___str_25:
      0091EC 46 45 41 54 55 52 45  1658 	.ascii "FEATURE: %2x"
             3A 20 25 32 78
      0091F8 0D                    1659 	.db 0x0d
      0091F9 0A                    1660 	.db 0x0a
      0091FA 00                    1661 	.db 0x00
                                   1662 	.area INITIALIZER
                                   1663 	.area CABS (ABS)
