                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module hc05
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strlen
                                     12 	.globl _memset
                                     13 	.globl _strcmp
                                     14 	.globl _strcpy
                                     15 	.globl _memcpy
                                     16 	.globl _UART1_GetFlagStatus
                                     17 	.globl _UART1_SendData8
                                     18 	.globl _UART1_ReceiveData8
                                     19 	.globl _UART1_ITConfig
                                     20 	.globl _UART1_Cmd
                                     21 	.globl _UART1_Init
                                     22 	.globl _UART1_DeInit
                                     23 	.globl _IWDG_ReloadCounter
                                     24 	.globl _GPIO_Init
                                     25 	.globl _new_HC05_msg
                                     26 	.globl _HC05_rx_counter
                                     27 	.globl _HC05_msg
                                     28 	.globl _HC05_rx_buffer
                                     29 	.globl _HC05_Init
                                     30 	.globl _HC05_Read
                                     31 	.globl _HC05_PutChar
                                     32 	.globl _HC05_PutStr
                                     33 	.globl _HC05_ClearRxBuffer
                                     34 	.globl _HC05_Test
                                     35 	.globl _HC05_SetBaud
                                     36 	.globl _HC05_SetName
                                     37 	.globl _HC05_SetPin
                                     38 ;--------------------------------------------------------
                                     39 ; ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DATA
      000000                         42 _HC05_rx_buffer::
      000000                         43 	.ds 40
      000028                         44 _HC05_msg::
      000028                         45 	.ds 40
                                     46 ;--------------------------------------------------------
                                     47 ; ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area INITIALIZED
      000000                         50 _HC05_rx_counter::
      000000                         51 	.ds 1
      000001                         52 _new_HC05_msg::
      000001                         53 	.ds 1
                                     54 ;--------------------------------------------------------
                                     55 ; absolute external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area DABS (ABS)
                                     58 ;--------------------------------------------------------
                                     59 ; global & static initialisations
                                     60 ;--------------------------------------------------------
                                     61 	.area HOME
                                     62 	.area GSINIT
                                     63 	.area GSFINAL
                                     64 	.area GSINIT
                                     65 ;--------------------------------------------------------
                                     66 ; Home
                                     67 ;--------------------------------------------------------
                                     68 	.area HOME
                                     69 	.area HOME
                                     70 ;--------------------------------------------------------
                                     71 ; code
                                     72 ;--------------------------------------------------------
                                     73 	.area CODE
                                     74 ;	user/hc05.c: 18: void HC05_Init(uint32_t baudrate)
                                     75 ;	-----------------------------------------
                                     76 ;	 function HC05_Init
                                     77 ;	-----------------------------------------
      000000                         78 _HC05_Init:
                                     79 ;	user/hc05.c: 21: GPIO_Init(GPIOD, GPIO_PIN_5, GPIO_MODE_OUT_OD_HIZ_FAST);
      000000 4B B0            [ 1]   80 	push	#0xb0
      000002 4B 20            [ 1]   81 	push	#0x20
      000004 4B 0F            [ 1]   82 	push	#0x0f
      000006 4B 50            [ 1]   83 	push	#0x50
      000008 CDr00r00         [ 4]   84 	call	_GPIO_Init
      00000B 5B 04            [ 2]   85 	addw	sp, #4
                                     86 ;	user/hc05.c: 22: GPIO_Init(GPIOD, GPIO_PIN_6, GPIO_MODE_IN_PU_NO_IT);
      00000D 4B 40            [ 1]   87 	push	#0x40
      00000F 4B 40            [ 1]   88 	push	#0x40
      000011 4B 0F            [ 1]   89 	push	#0x0f
      000013 4B 50            [ 1]   90 	push	#0x50
      000015 CDr00r00         [ 4]   91 	call	_GPIO_Init
      000018 5B 04            [ 2]   92 	addw	sp, #4
                                     93 ;	user/hc05.c: 24: UART1_DeInit();
      00001A CDr00r00         [ 4]   94 	call	_UART1_DeInit
                                     95 ;	user/hc05.c: 35: UART1_Init((uint32_t)baudrate, UART1_WORDLENGTH_8D, UART1_STOPBITS_1, UART1_PARITY_NO, UART1_SYNCMODE_CLOCK_DISABLE, UART1_MODE_TXRX_ENABLE);
      00001D 4B 0C            [ 1]   96 	push	#0x0c
      00001F 4B 80            [ 1]   97 	push	#0x80
      000021 4B 00            [ 1]   98 	push	#0x00
      000023 4B 00            [ 1]   99 	push	#0x00
      000025 4B 00            [ 1]  100 	push	#0x00
      000027 1E 0A            [ 2]  101 	ldw	x, (0x0a, sp)
      000029 89               [ 2]  102 	pushw	x
      00002A 1E 0A            [ 2]  103 	ldw	x, (0x0a, sp)
      00002C 89               [ 2]  104 	pushw	x
      00002D CDr00r00         [ 4]  105 	call	_UART1_Init
      000030 5B 09            [ 2]  106 	addw	sp, #9
                                    107 ;	user/hc05.c: 38: UART1_ITConfig(UART1_IT_RXNE_OR, ENABLE);
      000032 4B 01            [ 1]  108 	push	#0x01
      000034 4B 05            [ 1]  109 	push	#0x05
      000036 4B 02            [ 1]  110 	push	#0x02
      000038 CDr00r00         [ 4]  111 	call	_UART1_ITConfig
      00003B 5B 03            [ 2]  112 	addw	sp, #3
                                    113 ;	user/hc05.c: 41: UART1_Cmd(ENABLE);
      00003D 4B 01            [ 1]  114 	push	#0x01
      00003F CDr00r00         [ 4]  115 	call	_UART1_Cmd
      000042 84               [ 1]  116 	pop	a
                                    117 ;	user/hc05.c: 51: HC05_PutStr("\r\n");
      000043 AEr04r98         [ 2]  118 	ldw	x, #___str_0+0
      000046 89               [ 2]  119 	pushw	x
      000047 CDr01r04         [ 4]  120 	call	_HC05_PutStr
      00004A 85               [ 2]  121 	popw	x
                                    122 ;	user/hc05.c: 52: HC05_ClearRxBuffer();
      00004B CDr01r6C         [ 4]  123 	call	_HC05_ClearRxBuffer
                                    124 ;	user/hc05.c: 53: HC05_Delay(1000);
      00004E 4B E8            [ 1]  125 	push	#0xe8
      000050 4B 03            [ 1]  126 	push	#0x03
      000052 5F               [ 1]  127 	clrw	x
      000053 89               [ 2]  128 	pushw	x
      000054 CDr00r5A         [ 4]  129 	call	_HC05_Delay
      000057 5B 04            [ 2]  130 	addw	sp, #4
      000059 81               [ 4]  131 	ret
                                    132 ;	user/hc05.c: 56: static void HC05_Delay(uint32_t delay)
                                    133 ;	-----------------------------------------
                                    134 ;	 function HC05_Delay
                                    135 ;	-----------------------------------------
      00005A                        136 _HC05_Delay:
      00005A 52 08            [ 2]  137 	sub	sp, #8
                                    138 ;	user/hc05.c: 58: while(delay--);
      00005C 16 0B            [ 2]  139 	ldw	y, (0x0b, sp)
      00005E 17 05            [ 2]  140 	ldw	(0x05, sp), y
      000060 1E 0D            [ 2]  141 	ldw	x, (0x0d, sp)
      000062                        142 00101$:
      000062 1F 03            [ 2]  143 	ldw	(0x03, sp), x
      000064 16 05            [ 2]  144 	ldw	y, (0x05, sp)
      000066 17 01            [ 2]  145 	ldw	(0x01, sp), y
      000068 1D 00 01         [ 2]  146 	subw	x, #0x0001
      00006B 7B 06            [ 1]  147 	ld	a, (0x06, sp)
      00006D A2 00            [ 1]  148 	sbc	a, #0x00
      00006F 6B 06            [ 1]  149 	ld	(0x06, sp), a
      000071 7B 05            [ 1]  150 	ld	a, (0x05, sp)
      000073 A2 00            [ 1]  151 	sbc	a, #0x00
      000075 6B 05            [ 1]  152 	ld	(0x05, sp), a
      000077 16 03            [ 2]  153 	ldw	y, (0x03, sp)
      000079 26 E7            [ 1]  154 	jrne	00101$
      00007B 16 01            [ 2]  155 	ldw	y, (0x01, sp)
      00007D 26 E3            [ 1]  156 	jrne	00101$
      00007F 5B 08            [ 2]  157 	addw	sp, #8
      000081 81               [ 4]  158 	ret
                                    159 ;	user/hc05.c: 61: void HC05_Read(void)
                                    160 ;	-----------------------------------------
                                    161 ;	 function HC05_Read
                                    162 ;	-----------------------------------------
      000082                        163 _HC05_Read:
      000082 52 04            [ 2]  164 	sub	sp, #4
                                    165 ;	user/hc05.c: 63: while (UART1_GetFlagStatus(UART1_FLAG_RXNE) == RESET);
      000084                        166 00101$:
      000084 4B 20            [ 1]  167 	push	#0x20
      000086 4B 00            [ 1]  168 	push	#0x00
      000088 CDr00r00         [ 4]  169 	call	_UART1_GetFlagStatus
      00008B 85               [ 2]  170 	popw	x
      00008C 4D               [ 1]  171 	tnz	a
      00008D 27 F5            [ 1]  172 	jreq	00101$
                                    173 ;	user/hc05.c: 64: HC05_rx_buffer[HC05_rx_counter] == UART1_ReceiveData8();
      00008F CDr00r00         [ 4]  174 	call	_UART1_ReceiveData8
                                    175 ;	user/hc05.c: 65: if((HC05_rx_counter+1 == HC05_RX_BUFFER_LENGTH) || (HC05_rx_buffer[HC05_rx_counter] == 0x0a))
      000092 5F               [ 1]  176 	clrw	x
      000093 C6u00u00         [ 1]  177 	ld	a, _HC05_rx_counter+0
      000096 97               [ 1]  178 	ld	xl, a
      000097 5C               [ 2]  179 	incw	x
      000098 A3 00 28         [ 2]  180 	cpw	x, #0x0028
      00009B 27 10            [ 1]  181 	jreq	00104$
      00009D AEr00r00         [ 2]  182 	ldw	x, #_HC05_rx_buffer+0
      0000A0 9F               [ 1]  183 	ld	a, xl
      0000A1 CBu00u00         [ 1]  184 	add	a, _HC05_rx_counter+0
      0000A4 02               [ 1]  185 	rlwa	x
      0000A5 A9 00            [ 1]  186 	adc	a, #0x00
      0000A7 95               [ 1]  187 	ld	xh, a
      0000A8 F6               [ 1]  188 	ld	a, (x)
      0000A9 A1 0A            [ 1]  189 	cp	a, #0x0a
      0000AB 26 37            [ 1]  190 	jrne	00105$
      0000AD                        191 00104$:
                                    192 ;	user/hc05.c: 67: memcpy(HC05_msg, HC05_rx_buffer, HC05_rx_counter);
      0000AD 5F               [ 1]  193 	clrw	x
      0000AE C6u00u00         [ 1]  194 	ld	a, _HC05_rx_counter+0
      0000B1 97               [ 1]  195 	ld	xl, a
      0000B2 90 AEr00r00      [ 2]  196 	ldw	y, #_HC05_rx_buffer+0
      0000B6 17 03            [ 2]  197 	ldw	(0x03, sp), y
      0000B8 16 03            [ 2]  198 	ldw	y, (0x03, sp)
      0000BA 17 01            [ 2]  199 	ldw	(0x01, sp), y
      0000BC 90 AEr00r28      [ 2]  200 	ldw	y, #_HC05_msg+0
      0000C0 89               [ 2]  201 	pushw	x
      0000C1 1E 03            [ 2]  202 	ldw	x, (0x03, sp)
      0000C3 89               [ 2]  203 	pushw	x
      0000C4 90 89            [ 2]  204 	pushw	y
      0000C6 CDr00r00         [ 4]  205 	call	_memcpy
      0000C9 5B 06            [ 2]  206 	addw	sp, #6
                                    207 ;	user/hc05.c: 68: memset(HC05_rx_buffer, 0, HC05_RX_BUFFER_LENGTH);
      0000CB 16 03            [ 2]  208 	ldw	y, (0x03, sp)
      0000CD 4B 28            [ 1]  209 	push	#0x28
      0000CF 4B 00            [ 1]  210 	push	#0x00
      0000D1 5F               [ 1]  211 	clrw	x
      0000D2 89               [ 2]  212 	pushw	x
      0000D3 90 89            [ 2]  213 	pushw	y
      0000D5 CDr00r00         [ 4]  214 	call	_memset
      0000D8 5B 06            [ 2]  215 	addw	sp, #6
                                    216 ;	user/hc05.c: 69: HC05_rx_counter = 0;
      0000DA 72 5Fu00u00      [ 1]  217 	clr	_HC05_rx_counter+0
                                    218 ;	user/hc05.c: 70: new_HC05_msg = 1;
      0000DE 35 01u00u01      [ 1]  219 	mov	_new_HC05_msg+0, #0x01
      0000E2 20 07            [ 2]  220 	jra	00108$
      0000E4                        221 00105$:
                                    222 ;	user/hc05.c: 74: HC05_rx_counter++;
      0000E4 C6u00u00         [ 1]  223 	ld	a, _HC05_rx_counter+0
      0000E7 4C               [ 1]  224 	inc	a
      0000E8 C7u00u00         [ 1]  225 	ld	_HC05_rx_counter+0, a
      0000EB                        226 00108$:
      0000EB 5B 04            [ 2]  227 	addw	sp, #4
      0000ED 81               [ 4]  228 	ret
                                    229 ;	user/hc05.c: 78: void HC05_PutChar(uint8_t c)
                                    230 ;	-----------------------------------------
                                    231 ;	 function HC05_PutChar
                                    232 ;	-----------------------------------------
      0000EE                        233 _HC05_PutChar:
                                    234 ;	user/hc05.c: 80: while(UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET);
      0000EE                        235 00101$:
      0000EE 4B 80            [ 1]  236 	push	#0x80
      0000F0 4B 00            [ 1]  237 	push	#0x00
      0000F2 CDr00r00         [ 4]  238 	call	_UART1_GetFlagStatus
      0000F5 85               [ 2]  239 	popw	x
      0000F6 4D               [ 1]  240 	tnz	a
      0000F7 27 F5            [ 1]  241 	jreq	00101$
                                    242 ;	user/hc05.c: 81: IWDG_ReloadCounter();
      0000F9 CDr00r00         [ 4]  243 	call	_IWDG_ReloadCounter
                                    244 ;	user/hc05.c: 82: UART1_SendData8(c);
      0000FC 7B 03            [ 1]  245 	ld	a, (0x03, sp)
      0000FE 88               [ 1]  246 	push	a
      0000FF CDr00r00         [ 4]  247 	call	_UART1_SendData8
      000102 84               [ 1]  248 	pop	a
      000103 81               [ 4]  249 	ret
                                    250 ;	user/hc05.c: 86: void HC05_PutStr(uint8_t *str)
                                    251 ;	-----------------------------------------
                                    252 ;	 function HC05_PutStr
                                    253 ;	-----------------------------------------
      000104                        254 _HC05_PutStr:
      000104 52 11            [ 2]  255 	sub	sp, #17
                                    256 ;	user/hc05.c: 89: uint32_t tick = 0xFFFF;
      000106 AE FF FF         [ 2]  257 	ldw	x, #0xffff
      000109 1F 05            [ 2]  258 	ldw	(0x05, sp), x
      00010B 5F               [ 1]  259 	clrw	x
      00010C 1F 03            [ 2]  260 	ldw	(0x03, sp), x
                                    261 ;	user/hc05.c: 90: while(str[ad_send] != 0)
      00010E 5F               [ 1]  262 	clrw	x
      00010F 1F 01            [ 2]  263 	ldw	(0x01, sp), x
      000111                        264 00105$:
      000111 1E 14            [ 2]  265 	ldw	x, (0x14, sp)
      000113 72 FB 01         [ 2]  266 	addw	x, (0x01, sp)
      000116 1F 10            [ 2]  267 	ldw	(0x10, sp), x
      000118 1E 10            [ 2]  268 	ldw	x, (0x10, sp)
      00011A F6               [ 1]  269 	ld	a, (x)
      00011B 4D               [ 1]  270 	tnz	a
      00011C 27 4B            [ 1]  271 	jreq	00108$
                                    272 ;	user/hc05.c: 92: while((UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET)&&(tick-- != 0));
      00011E 16 03            [ 2]  273 	ldw	y, (0x03, sp)
      000120 17 0B            [ 2]  274 	ldw	(0x0b, sp), y
      000122 1E 05            [ 2]  275 	ldw	x, (0x05, sp)
      000124                        276 00102$:
      000124 89               [ 2]  277 	pushw	x
      000125 4B 80            [ 1]  278 	push	#0x80
      000127 4B 00            [ 1]  279 	push	#0x00
      000129 CDr00r00         [ 4]  280 	call	_UART1_GetFlagStatus
      00012C 85               [ 2]  281 	popw	x
      00012D 6B 11            [ 1]  282 	ld	(0x11, sp), a
      00012F 85               [ 2]  283 	popw	x
      000130 0D 0F            [ 1]  284 	tnz	(0x0f, sp)
      000132 26 1D            [ 1]  285 	jrne	00113$
      000134 1F 09            [ 2]  286 	ldw	(0x09, sp), x
      000136 16 0B            [ 2]  287 	ldw	y, (0x0b, sp)
      000138 17 07            [ 2]  288 	ldw	(0x07, sp), y
      00013A 1D 00 01         [ 2]  289 	subw	x, #0x0001
      00013D 7B 0C            [ 1]  290 	ld	a, (0x0c, sp)
      00013F A2 00            [ 1]  291 	sbc	a, #0x00
      000141 6B 0C            [ 1]  292 	ld	(0x0c, sp), a
      000143 7B 0B            [ 1]  293 	ld	a, (0x0b, sp)
      000145 A2 00            [ 1]  294 	sbc	a, #0x00
      000147 6B 0B            [ 1]  295 	ld	(0x0b, sp), a
      000149 16 09            [ 2]  296 	ldw	y, (0x09, sp)
      00014B 26 D7            [ 1]  297 	jrne	00102$
      00014D 16 07            [ 2]  298 	ldw	y, (0x07, sp)
      00014F 26 D3            [ 1]  299 	jrne	00102$
      000151                        300 00113$:
      000151 1F 05            [ 2]  301 	ldw	(0x05, sp), x
      000153 16 0B            [ 2]  302 	ldw	y, (0x0b, sp)
      000155 17 03            [ 2]  303 	ldw	(0x03, sp), y
                                    304 ;	user/hc05.c: 93: IWDG_ReloadCounter();
      000157 CDr00r00         [ 4]  305 	call	_IWDG_ReloadCounter
                                    306 ;	user/hc05.c: 94: UART1_SendData8(str[ad_send]);
      00015A 1E 10            [ 2]  307 	ldw	x, (0x10, sp)
      00015C F6               [ 1]  308 	ld	a, (x)
      00015D 88               [ 1]  309 	push	a
      00015E CDr00r00         [ 4]  310 	call	_UART1_SendData8
      000161 84               [ 1]  311 	pop	a
                                    312 ;	user/hc05.c: 95: ad_send++;
      000162 1E 01            [ 2]  313 	ldw	x, (0x01, sp)
      000164 5C               [ 2]  314 	incw	x
      000165 1F 01            [ 2]  315 	ldw	(0x01, sp), x
      000167 20 A8            [ 2]  316 	jra	00105$
      000169                        317 00108$:
      000169 5B 11            [ 2]  318 	addw	sp, #17
      00016B 81               [ 4]  319 	ret
                                    320 ;	user/hc05.c: 99: void HC05_ClearRxBuffer(void)
                                    321 ;	-----------------------------------------
                                    322 ;	 function HC05_ClearRxBuffer
                                    323 ;	-----------------------------------------
      00016C                        324 _HC05_ClearRxBuffer:
                                    325 ;	user/hc05.c: 101: memset(HC05_rx_buffer, 0, HC05_RX_BUFFER_LENGTH);
      00016C AEr00r00         [ 2]  326 	ldw	x, #_HC05_rx_buffer+0
      00016F 4B 28            [ 1]  327 	push	#0x28
      000171 4B 00            [ 1]  328 	push	#0x00
      000173 4B 00            [ 1]  329 	push	#0x00
      000175 4B 00            [ 1]  330 	push	#0x00
      000177 89               [ 2]  331 	pushw	x
      000178 CDr00r00         [ 4]  332 	call	_memset
      00017B 5B 06            [ 2]  333 	addw	sp, #6
                                    334 ;	user/hc05.c: 102: HC05_rx_counter = 0;
      00017D 72 5Fu00u00      [ 1]  335 	clr	_HC05_rx_counter+0
                                    336 ;	user/hc05.c: 103: new_HC05_msg = 0;
      000181 72 5Fu00u01      [ 1]  337 	clr	_new_HC05_msg+0
      000185 81               [ 4]  338 	ret
                                    339 ;	user/hc05.c: 106: uint8_t HC05_Test(void)
                                    340 ;	-----------------------------------------
                                    341 ;	 function HC05_Test
                                    342 ;	-----------------------------------------
      000186                        343 _HC05_Test:
      000186 52 04            [ 2]  344 	sub	sp, #4
                                    345 ;	user/hc05.c: 109: HC05_ClearRxBuffer();
      000188 CDr01r6C         [ 4]  346 	call	_HC05_ClearRxBuffer
                                    347 ;	user/hc05.c: 110: HC05_PutStr("AT");
      00018B AEr04r9B         [ 2]  348 	ldw	x, #___str_1+0
      00018E 89               [ 2]  349 	pushw	x
      00018F CDr01r04         [ 4]  350 	call	_HC05_PutStr
      000192 85               [ 2]  351 	popw	x
                                    352 ;	user/hc05.c: 111: while(HC05_rx_counter < 2)
      000193 AE 6F 30         [ 2]  353 	ldw	x, #0x6f30
      000196 1F 03            [ 2]  354 	ldw	(0x03, sp), x
      000198 AE 00 01         [ 2]  355 	ldw	x, #0x0001
      00019B 1F 01            [ 2]  356 	ldw	(0x01, sp), x
      00019D                        357 00103$:
      00019D C6u00u00         [ 1]  358 	ld	a, _HC05_rx_counter+0
      0001A0 A1 02            [ 1]  359 	cp	a, #0x02
      0001A2 24 2A            [ 1]  360 	jrnc	00105$
                                    361 ;	user/hc05.c: 113: timeout--;
      0001A4 1E 03            [ 2]  362 	ldw	x, (0x03, sp)
      0001A6 1D 00 01         [ 2]  363 	subw	x, #0x0001
      0001A9 1F 03            [ 2]  364 	ldw	(0x03, sp), x
      0001AB 7B 02            [ 1]  365 	ld	a, (0x02, sp)
      0001AD A2 00            [ 1]  366 	sbc	a, #0x00
      0001AF 6B 02            [ 1]  367 	ld	(0x02, sp), a
      0001B1 7B 01            [ 1]  368 	ld	a, (0x01, sp)
      0001B3 A2 00            [ 1]  369 	sbc	a, #0x00
      0001B5 6B 01            [ 1]  370 	ld	(0x01, sp), a
                                    371 ;	user/hc05.c: 114: HC05_Delay(1000);
      0001B7 4B E8            [ 1]  372 	push	#0xe8
      0001B9 4B 03            [ 1]  373 	push	#0x03
      0001BB 5F               [ 1]  374 	clrw	x
      0001BC 89               [ 2]  375 	pushw	x
      0001BD CDr00r5A         [ 4]  376 	call	_HC05_Delay
      0001C0 5B 04            [ 2]  377 	addw	sp, #4
                                    378 ;	user/hc05.c: 115: if(timeout == 0) return 0x01;
      0001C2 1E 03            [ 2]  379 	ldw	x, (0x03, sp)
      0001C4 26 D7            [ 1]  380 	jrne	00103$
      0001C6 1E 01            [ 2]  381 	ldw	x, (0x01, sp)
      0001C8 26 D3            [ 1]  382 	jrne	00103$
      0001CA A6 01            [ 1]  383 	ld	a, #0x01
      0001CC 20 17            [ 2]  384 	jra	00109$
      0001CE                        385 00105$:
                                    386 ;	user/hc05.c: 117: if(strcmp(HC05_rx_buffer, "OK") == 0) return 0x00;
      0001CE 90 AEr04r9E      [ 2]  387 	ldw	y, #___str_2+0
      0001D2 AEr00r00         [ 2]  388 	ldw	x, #_HC05_rx_buffer+0
      0001D5 90 89            [ 2]  389 	pushw	y
      0001D7 89               [ 2]  390 	pushw	x
      0001D8 CDr00r00         [ 4]  391 	call	_strcmp
      0001DB 5B 04            [ 2]  392 	addw	sp, #4
      0001DD 5D               [ 2]  393 	tnzw	x
      0001DE 26 03            [ 1]  394 	jrne	00107$
      0001E0 4F               [ 1]  395 	clr	a
      0001E1 20 02            [ 2]  396 	jra	00109$
      0001E3                        397 00107$:
                                    398 ;	user/hc05.c: 118: else return 0x02;
      0001E3 A6 02            [ 1]  399 	ld	a, #0x02
      0001E5                        400 00109$:
      0001E5 5B 04            [ 2]  401 	addw	sp, #4
      0001E7 81               [ 4]  402 	ret
                                    403 ;	user/hc05.c: 121: uint8_t HC05_SetBaud(uint32_t speed)
                                    404 ;	-----------------------------------------
                                    405 ;	 function HC05_SetBaud
                                    406 ;	-----------------------------------------
      0001E8                        407 _HC05_SetBaud:
      0001E8 52 1C            [ 2]  408 	sub	sp, #28
                                    409 ;	user/hc05.c: 126: HC05_ClearRxBuffer(); //clear rx buffer
      0001EA CDr01r6C         [ 4]  410 	call	_HC05_ClearRxBuffer
                                    411 ;	user/hc05.c: 128: if(speed == 1200)
      0001ED 1E 21            [ 2]  412 	ldw	x, (0x21, sp)
      0001EF A3 04 B0         [ 2]  413 	cpw	x, #0x04b0
      0001F2 26 20            [ 1]  414 	jrne	00126$
      0001F4 1E 1F            [ 2]  415 	ldw	x, (0x1f, sp)
      0001F6 A3 00 00         [ 2]  416 	cpw	x, #0x0000
      0001F9 26 19            [ 1]  417 	jrne	00126$
                                    418 ;	user/hc05.c: 130: strcpy(buf, "OK1200");
      0001FB 90 AEr04rA1      [ 2]  419 	ldw	y, #___str_3+0
      0001FF 96               [ 1]  420 	ldw	x, sp
      000200 5C               [ 2]  421 	incw	x
      000201 90 89            [ 2]  422 	pushw	y
      000203 89               [ 2]  423 	pushw	x
      000204 CDr00r00         [ 4]  424 	call	_strcpy
      000207 5B 04            [ 2]  425 	addw	sp, #4
                                    426 ;	user/hc05.c: 131: HC05_PutStr("AT+BAUD1");                          
      000209 AEr04rA8         [ 2]  427 	ldw	x, #___str_4+0
      00020C 89               [ 2]  428 	pushw	x
      00020D CDr01r04         [ 4]  429 	call	_HC05_PutStr
      000210 85               [ 2]  430 	popw	x
      000211 CCr03r4C         [ 2]  431 	jp	00148$
      000214                        432 00126$:
                                    433 ;	user/hc05.c: 133: else if(speed == 2400)
      000214 1E 21            [ 2]  434 	ldw	x, (0x21, sp)
      000216 A3 09 60         [ 2]  435 	cpw	x, #0x0960
      000219 26 20            [ 1]  436 	jrne	00123$
      00021B 1E 1F            [ 2]  437 	ldw	x, (0x1f, sp)
      00021D A3 00 00         [ 2]  438 	cpw	x, #0x0000
      000220 26 19            [ 1]  439 	jrne	00123$
                                    440 ;	user/hc05.c: 135: strcpy(buf, "OK2400");
      000222 90 AEr04rB1      [ 2]  441 	ldw	y, #___str_5+0
      000226 96               [ 1]  442 	ldw	x, sp
      000227 5C               [ 2]  443 	incw	x
      000228 90 89            [ 2]  444 	pushw	y
      00022A 89               [ 2]  445 	pushw	x
      00022B CDr00r00         [ 4]  446 	call	_strcpy
      00022E 5B 04            [ 2]  447 	addw	sp, #4
                                    448 ;	user/hc05.c: 136: HC05_PutStr("AT+BAUD2");                          
      000230 AEr04rB8         [ 2]  449 	ldw	x, #___str_6+0
      000233 89               [ 2]  450 	pushw	x
      000234 CDr01r04         [ 4]  451 	call	_HC05_PutStr
      000237 85               [ 2]  452 	popw	x
      000238 CCr03r4C         [ 2]  453 	jp	00148$
      00023B                        454 00123$:
                                    455 ;	user/hc05.c: 138: else if(speed == 4800)
      00023B 1E 21            [ 2]  456 	ldw	x, (0x21, sp)
      00023D A3 12 C0         [ 2]  457 	cpw	x, #0x12c0
      000240 26 20            [ 1]  458 	jrne	00120$
      000242 1E 1F            [ 2]  459 	ldw	x, (0x1f, sp)
      000244 A3 00 00         [ 2]  460 	cpw	x, #0x0000
      000247 26 19            [ 1]  461 	jrne	00120$
                                    462 ;	user/hc05.c: 140: strcpy(buf, "OK4800");
      000249 90 AEr04rC1      [ 2]  463 	ldw	y, #___str_7+0
      00024D 96               [ 1]  464 	ldw	x, sp
      00024E 5C               [ 2]  465 	incw	x
      00024F 90 89            [ 2]  466 	pushw	y
      000251 89               [ 2]  467 	pushw	x
      000252 CDr00r00         [ 4]  468 	call	_strcpy
      000255 5B 04            [ 2]  469 	addw	sp, #4
                                    470 ;	user/hc05.c: 141: HC05_PutStr("AT+BAUD3");                          
      000257 AEr04rC8         [ 2]  471 	ldw	x, #___str_8+0
      00025A 89               [ 2]  472 	pushw	x
      00025B CDr01r04         [ 4]  473 	call	_HC05_PutStr
      00025E 85               [ 2]  474 	popw	x
      00025F CCr03r4C         [ 2]  475 	jp	00148$
      000262                        476 00120$:
                                    477 ;	user/hc05.c: 143: else if(speed == 9600)
      000262 1E 21            [ 2]  478 	ldw	x, (0x21, sp)
      000264 A3 25 80         [ 2]  479 	cpw	x, #0x2580
      000267 26 20            [ 1]  480 	jrne	00117$
      000269 1E 1F            [ 2]  481 	ldw	x, (0x1f, sp)
      00026B A3 00 00         [ 2]  482 	cpw	x, #0x0000
      00026E 26 19            [ 1]  483 	jrne	00117$
                                    484 ;	user/hc05.c: 145: strcpy(buf, "OK9600");
      000270 90 AEr04rD1      [ 2]  485 	ldw	y, #___str_9+0
      000274 96               [ 1]  486 	ldw	x, sp
      000275 5C               [ 2]  487 	incw	x
      000276 90 89            [ 2]  488 	pushw	y
      000278 89               [ 2]  489 	pushw	x
      000279 CDr00r00         [ 4]  490 	call	_strcpy
      00027C 5B 04            [ 2]  491 	addw	sp, #4
                                    492 ;	user/hc05.c: 146: HC05_PutStr("AT+BAUD4");                          
      00027E AEr04rD8         [ 2]  493 	ldw	x, #___str_10+0
      000281 89               [ 2]  494 	pushw	x
      000282 CDr01r04         [ 4]  495 	call	_HC05_PutStr
      000285 85               [ 2]  496 	popw	x
      000286 CCr03r4C         [ 2]  497 	jp	00148$
      000289                        498 00117$:
                                    499 ;	user/hc05.c: 148: else if(speed == 19200)
      000289 1E 21            [ 2]  500 	ldw	x, (0x21, sp)
      00028B A3 4B 00         [ 2]  501 	cpw	x, #0x4b00
      00028E 26 20            [ 1]  502 	jrne	00114$
      000290 1E 1F            [ 2]  503 	ldw	x, (0x1f, sp)
      000292 A3 00 00         [ 2]  504 	cpw	x, #0x0000
      000295 26 19            [ 1]  505 	jrne	00114$
                                    506 ;	user/hc05.c: 150: strcpy(buf, "OK19200");
      000297 90 AEr04rE1      [ 2]  507 	ldw	y, #___str_11+0
      00029B 96               [ 1]  508 	ldw	x, sp
      00029C 5C               [ 2]  509 	incw	x
      00029D 90 89            [ 2]  510 	pushw	y
      00029F 89               [ 2]  511 	pushw	x
      0002A0 CDr00r00         [ 4]  512 	call	_strcpy
      0002A3 5B 04            [ 2]  513 	addw	sp, #4
                                    514 ;	user/hc05.c: 151: HC05_PutStr("AT+BAUD5");                          
      0002A5 AEr04rE9         [ 2]  515 	ldw	x, #___str_12+0
      0002A8 89               [ 2]  516 	pushw	x
      0002A9 CDr01r04         [ 4]  517 	call	_HC05_PutStr
      0002AC 85               [ 2]  518 	popw	x
      0002AD CCr03r4C         [ 2]  519 	jp	00148$
      0002B0                        520 00114$:
                                    521 ;	user/hc05.c: 153: else if(speed == 38400)
      0002B0 1E 21            [ 2]  522 	ldw	x, (0x21, sp)
      0002B2 A3 96 00         [ 2]  523 	cpw	x, #0x9600
      0002B5 26 1F            [ 1]  524 	jrne	00111$
      0002B7 1E 1F            [ 2]  525 	ldw	x, (0x1f, sp)
      0002B9 A3 00 00         [ 2]  526 	cpw	x, #0x0000
      0002BC 26 18            [ 1]  527 	jrne	00111$
                                    528 ;	user/hc05.c: 155: strcpy(buf, "OK38400");
      0002BE 90 AEr04rF2      [ 2]  529 	ldw	y, #___str_13+0
      0002C2 96               [ 1]  530 	ldw	x, sp
      0002C3 5C               [ 2]  531 	incw	x
      0002C4 90 89            [ 2]  532 	pushw	y
      0002C6 89               [ 2]  533 	pushw	x
      0002C7 CDr00r00         [ 4]  534 	call	_strcpy
      0002CA 5B 04            [ 2]  535 	addw	sp, #4
                                    536 ;	user/hc05.c: 156: HC05_PutStr("AT+BAUD6");                          
      0002CC AEr04rFA         [ 2]  537 	ldw	x, #___str_14+0
      0002CF 89               [ 2]  538 	pushw	x
      0002D0 CDr01r04         [ 4]  539 	call	_HC05_PutStr
      0002D3 85               [ 2]  540 	popw	x
      0002D4 20 76            [ 2]  541 	jra	00148$
      0002D6                        542 00111$:
                                    543 ;	user/hc05.c: 158: else if(speed == 57600)
      0002D6 1E 21            [ 2]  544 	ldw	x, (0x21, sp)
      0002D8 A3 E1 00         [ 2]  545 	cpw	x, #0xe100
      0002DB 26 1F            [ 1]  546 	jrne	00108$
      0002DD 1E 1F            [ 2]  547 	ldw	x, (0x1f, sp)
      0002DF A3 00 00         [ 2]  548 	cpw	x, #0x0000
      0002E2 26 18            [ 1]  549 	jrne	00108$
                                    550 ;	user/hc05.c: 160: strcpy(buf, "OK57600");
      0002E4 90 AEr05r03      [ 2]  551 	ldw	y, #___str_15+0
      0002E8 96               [ 1]  552 	ldw	x, sp
      0002E9 5C               [ 2]  553 	incw	x
      0002EA 90 89            [ 2]  554 	pushw	y
      0002EC 89               [ 2]  555 	pushw	x
      0002ED CDr00r00         [ 4]  556 	call	_strcpy
      0002F0 5B 04            [ 2]  557 	addw	sp, #4
                                    558 ;	user/hc05.c: 161: HC05_PutStr("AT+BAUD7");                          
      0002F2 AEr05r0B         [ 2]  559 	ldw	x, #___str_16+0
      0002F5 89               [ 2]  560 	pushw	x
      0002F6 CDr01r04         [ 4]  561 	call	_HC05_PutStr
      0002F9 85               [ 2]  562 	popw	x
      0002FA 20 50            [ 2]  563 	jra	00148$
      0002FC                        564 00108$:
                                    565 ;	user/hc05.c: 163: else if(speed == 115200)
      0002FC 1E 21            [ 2]  566 	ldw	x, (0x21, sp)
      0002FE A3 C2 00         [ 2]  567 	cpw	x, #0xc200
      000301 26 1F            [ 1]  568 	jrne	00105$
      000303 1E 1F            [ 2]  569 	ldw	x, (0x1f, sp)
      000305 A3 00 01         [ 2]  570 	cpw	x, #0x0001
      000308 26 18            [ 1]  571 	jrne	00105$
                                    572 ;	user/hc05.c: 165: strcpy(buf, "OK115200");
      00030A 90 AEr05r14      [ 2]  573 	ldw	y, #___str_17+0
      00030E 96               [ 1]  574 	ldw	x, sp
      00030F 5C               [ 2]  575 	incw	x
      000310 90 89            [ 2]  576 	pushw	y
      000312 89               [ 2]  577 	pushw	x
      000313 CDr00r00         [ 4]  578 	call	_strcpy
      000316 5B 04            [ 2]  579 	addw	sp, #4
                                    580 ;	user/hc05.c: 166: HC05_PutStr("AT+BAUD8");                          
      000318 AEr05r1D         [ 2]  581 	ldw	x, #___str_18+0
      00031B 89               [ 2]  582 	pushw	x
      00031C CDr01r04         [ 4]  583 	call	_HC05_PutStr
      00031F 85               [ 2]  584 	popw	x
      000320 20 2A            [ 2]  585 	jra	00148$
      000322                        586 00105$:
                                    587 ;	user/hc05.c: 168: else if(speed == 230400)
      000322 1E 21            [ 2]  588 	ldw	x, (0x21, sp)
      000324 A3 84 00         [ 2]  589 	cpw	x, #0x8400
      000327 26 1F            [ 1]  590 	jrne	00102$
      000329 1E 1F            [ 2]  591 	ldw	x, (0x1f, sp)
      00032B A3 00 03         [ 2]  592 	cpw	x, #0x0003
      00032E 26 18            [ 1]  593 	jrne	00102$
                                    594 ;	user/hc05.c: 170: strcpy(buf, "OK230400");
      000330 90 AEr05r26      [ 2]  595 	ldw	y, #___str_19+0
      000334 96               [ 1]  596 	ldw	x, sp
      000335 5C               [ 2]  597 	incw	x
      000336 90 89            [ 2]  598 	pushw	y
      000338 89               [ 2]  599 	pushw	x
      000339 CDr00r00         [ 4]  600 	call	_strcpy
      00033C 5B 04            [ 2]  601 	addw	sp, #4
                                    602 ;	user/hc05.c: 171: HC05_PutStr("AT+BAUD9");                          
      00033E AEr05r2F         [ 2]  603 	ldw	x, #___str_20+0
      000341 89               [ 2]  604 	pushw	x
      000342 CDr01r04         [ 4]  605 	call	_HC05_PutStr
      000345 85               [ 2]  606 	popw	x
      000346 20 04            [ 2]  607 	jra	00148$
      000348                        608 00102$:
                                    609 ;	user/hc05.c: 175: return 0x01; //error - incorrect speed
      000348 A6 01            [ 1]  610 	ld	a, #0x01
      00034A 20 60            [ 2]  611 	jra	00136$
                                    612 ;	user/hc05.c: 178: while(HC05_rx_counter < strlen(buf)) //wait for "OK" message
      00034C                        613 00148$:
      00034C 96               [ 1]  614 	ldw	x, sp
      00034D 5C               [ 2]  615 	incw	x
      00034E 1F 1B            [ 2]  616 	ldw	(0x1b, sp), x
      000350 AE 6F 30         [ 2]  617 	ldw	x, #0x6f30
      000353 1F 17            [ 2]  618 	ldw	(0x17, sp), x
      000355 AE 00 01         [ 2]  619 	ldw	x, #0x0001
      000358 1F 15            [ 2]  620 	ldw	(0x15, sp), x
      00035A                        621 00130$:
      00035A 1E 1B            [ 2]  622 	ldw	x, (0x1b, sp)
      00035C 89               [ 2]  623 	pushw	x
      00035D CDr00r00         [ 4]  624 	call	_strlen
      000360 5B 02            [ 2]  625 	addw	sp, #2
      000362 1F 19            [ 2]  626 	ldw	(0x19, sp), x
      000364 5F               [ 1]  627 	clrw	x
      000365 C6u00u00         [ 1]  628 	ld	a, _HC05_rx_counter+0
      000368 97               [ 1]  629 	ld	xl, a
      000369 13 19            [ 2]  630 	cpw	x, (0x19, sp)
      00036B 24 2A            [ 1]  631 	jrnc	00132$
                                    632 ;	user/hc05.c: 180: timeout--;
      00036D 1E 17            [ 2]  633 	ldw	x, (0x17, sp)
      00036F 1D 00 01         [ 2]  634 	subw	x, #0x0001
      000372 1F 17            [ 2]  635 	ldw	(0x17, sp), x
      000374 7B 16            [ 1]  636 	ld	a, (0x16, sp)
      000376 A2 00            [ 1]  637 	sbc	a, #0x00
      000378 6B 16            [ 1]  638 	ld	(0x16, sp), a
      00037A 7B 15            [ 1]  639 	ld	a, (0x15, sp)
      00037C A2 00            [ 1]  640 	sbc	a, #0x00
      00037E 6B 15            [ 1]  641 	ld	(0x15, sp), a
                                    642 ;	user/hc05.c: 181: HC05_Delay(1000); //wait +/- 100us just to give interrupt time to service incoming message
      000380 4B E8            [ 1]  643 	push	#0xe8
      000382 4B 03            [ 1]  644 	push	#0x03
      000384 5F               [ 1]  645 	clrw	x
      000385 89               [ 2]  646 	pushw	x
      000386 CDr00r5A         [ 4]  647 	call	_HC05_Delay
      000389 5B 04            [ 2]  648 	addw	sp, #4
                                    649 ;	user/hc05.c: 182: if (timeout == 0) 
      00038B 1E 17            [ 2]  650 	ldw	x, (0x17, sp)
      00038D 26 CB            [ 1]  651 	jrne	00130$
      00038F 1E 15            [ 2]  652 	ldw	x, (0x15, sp)
      000391 26 C7            [ 1]  653 	jrne	00130$
                                    654 ;	user/hc05.c: 183: return 0x02; //if the timeout delay is exeeded, exit with error code
      000393 A6 02            [ 1]  655 	ld	a, #0x02
      000395 20 15            [ 2]  656 	jra	00136$
      000397                        657 00132$:
                                    658 ;	user/hc05.c: 185: if(strcmp(HC05_rx_buffer, buf) == 0)
      000397 16 1B            [ 2]  659 	ldw	y, (0x1b, sp)
      000399 AEr00r00         [ 2]  660 	ldw	x, #_HC05_rx_buffer+0
      00039C 90 89            [ 2]  661 	pushw	y
      00039E 89               [ 2]  662 	pushw	x
      00039F CDr00r00         [ 4]  663 	call	_strcmp
      0003A2 5B 04            [ 2]  664 	addw	sp, #4
      0003A4 5D               [ 2]  665 	tnzw	x
      0003A5 26 03            [ 1]  666 	jrne	00134$
                                    667 ;	user/hc05.c: 186: return 0x00; //success
      0003A7 4F               [ 1]  668 	clr	a
      0003A8 20 02            [ 2]  669 	jra	00136$
      0003AA                        670 00134$:
                                    671 ;	user/hc05.c: 188: return 0x03; //unknown return AT msg from HC06
      0003AA A6 03            [ 1]  672 	ld	a, #0x03
      0003AC                        673 00136$:
      0003AC 5B 1C            [ 2]  674 	addw	sp, #28
      0003AE 81               [ 4]  675 	ret
                                    676 ;	user/hc05.c: 191: uint8_t HC05_SetName(char *name)
                                    677 ;	-----------------------------------------
                                    678 ;	 function HC05_SetName
                                    679 ;	-----------------------------------------
      0003AF                        680 _HC05_SetName:
      0003AF 52 14            [ 2]  681 	sub	sp, #20
                                    682 ;	user/hc05.c: 196: HC05_ClearRxBuffer(); //clear rx buffer
      0003B1 CDr01r6C         [ 4]  683 	call	_HC05_ClearRxBuffer
                                    684 ;	user/hc05.c: 198: if(strlen(name) > 13) //error - name more than 20 characters
      0003B4 1E 17            [ 2]  685 	ldw	x, (0x17, sp)
      0003B6 89               [ 2]  686 	pushw	x
      0003B7 CDr00r00         [ 4]  687 	call	_strlen
      0003BA 5B 02            [ 2]  688 	addw	sp, #2
      0003BC A3 00 0D         [ 2]  689 	cpw	x, #0x000d
      0003BF 23 04            [ 2]  690 	jrule	00102$
                                    691 ;	user/hc05.c: 199: return 0x01;
      0003C1 A6 01            [ 1]  692 	ld	a, #0x01
      0003C3 20 55            [ 2]  693 	jra	00111$
      0003C5                        694 00102$:
                                    695 ;	user/hc05.c: 202: HC05_PutStr(cmd); //AT command for SET NAME
      0003C5 96               [ 1]  696 	ldw	x, sp
      0003C6 5C               [ 2]  697 	incw	x
      0003C7 89               [ 2]  698 	pushw	x
      0003C8 CDr01r04         [ 4]  699 	call	_HC05_PutStr
      0003CB 85               [ 2]  700 	popw	x
                                    701 ;	user/hc05.c: 204: while(HC05_rx_counter < 9) //wait for "OKsetname" message, i.e. 9 chars
      0003CC 90 AE 6F 30      [ 2]  702 	ldw	y, #0x6f30
      0003D0 AE 00 01         [ 2]  703 	ldw	x, #0x0001
      0003D3                        704 00105$:
      0003D3 C6u00u00         [ 1]  705 	ld	a, _HC05_rx_counter+0
      0003D6 A1 09            [ 1]  706 	cp	a, #0x09
      0003D8 24 29            [ 1]  707 	jrnc	00107$
                                    708 ;	user/hc05.c: 206: timeout--;
      0003DA 72 A2 00 01      [ 2]  709 	subw	y, #0x0001
      0003DE 9F               [ 1]  710 	ld	a, xl
      0003DF A2 00            [ 1]  711 	sbc	a, #0x00
      0003E1 02               [ 1]  712 	rlwa	x
      0003E2 A2 00            [ 1]  713 	sbc	a, #0x00
      0003E4 95               [ 1]  714 	ld	xh, a
                                    715 ;	user/hc05.c: 207: HC05_Delay(1000); //wait +/- 100us just to give interrupt time to service incoming message
      0003E5 89               [ 2]  716 	pushw	x
      0003E6 90 89            [ 2]  717 	pushw	y
      0003E8 4B E8            [ 1]  718 	push	#0xe8
      0003EA 4B 03            [ 1]  719 	push	#0x03
      0003EC 4B 00            [ 1]  720 	push	#0x00
      0003EE 4B 00            [ 1]  721 	push	#0x00
      0003F0 CDr00r5A         [ 4]  722 	call	_HC05_Delay
      0003F3 5B 04            [ 2]  723 	addw	sp, #4
      0003F5 90 85            [ 2]  724 	popw	y
      0003F7 85               [ 2]  725 	popw	x
                                    726 ;	user/hc05.c: 208: if (timeout == 0) 
      0003F8 90 5D            [ 2]  727 	tnzw	y
      0003FA 26 D7            [ 1]  728 	jrne	00105$
      0003FC 5D               [ 2]  729 	tnzw	x
      0003FD 26 D4            [ 1]  730 	jrne	00105$
                                    731 ;	user/hc05.c: 209: return 0x02; //if the timeout delay is exeeded, exit with error code
      0003FF A6 02            [ 1]  732 	ld	a, #0x02
      000401 20 17            [ 2]  733 	jra	00111$
      000403                        734 00107$:
                                    735 ;	user/hc05.c: 211: if(strcmp(HC05_rx_buffer, "OKsetname") == 0)
      000403 90 AEr05r38      [ 2]  736 	ldw	y, #___str_21+0
      000407 AEr00r00         [ 2]  737 	ldw	x, #_HC05_rx_buffer+0
      00040A 90 89            [ 2]  738 	pushw	y
      00040C 89               [ 2]  739 	pushw	x
      00040D CDr00r00         [ 4]  740 	call	_strcmp
      000410 5B 04            [ 2]  741 	addw	sp, #4
      000412 5D               [ 2]  742 	tnzw	x
      000413 26 03            [ 1]  743 	jrne	00109$
                                    744 ;	user/hc05.c: 212: return 0x00; //success
      000415 4F               [ 1]  745 	clr	a
      000416 20 02            [ 2]  746 	jra	00111$
      000418                        747 00109$:
                                    748 ;	user/hc05.c: 214: return 0x03; //unknown return AT msg from HC06
      000418 A6 03            [ 1]  749 	ld	a, #0x03
      00041A                        750 00111$:
      00041A 5B 14            [ 2]  751 	addw	sp, #20
      00041C 81               [ 4]  752 	ret
                                    753 ;	user/hc05.c: 217: uint8_t HC05_SetPin(uint8_t *pin)
                                    754 ;	-----------------------------------------
                                    755 ;	 function HC05_SetPin
                                    756 ;	-----------------------------------------
      00041D                        757 _HC05_SetPin:
      00041D 52 14            [ 2]  758 	sub	sp, #20
                                    759 ;	user/hc05.c: 222: HC05_ClearRxBuffer(); //clear rx buffer
      00041F CDr01r6C         [ 4]  760 	call	_HC05_ClearRxBuffer
                                    761 ;	user/hc05.c: 224: if((strlen(pin) < 4) || (strlen(pin) > 4))
      000422 1E 17            [ 2]  762 	ldw	x, (0x17, sp)
      000424 89               [ 2]  763 	pushw	x
      000425 CDr00r00         [ 4]  764 	call	_strlen
      000428 5B 02            [ 2]  765 	addw	sp, #2
      00042A A3 00 04         [ 2]  766 	cpw	x, #0x0004
      00042D 25 0D            [ 1]  767 	jrc	00101$
      00042F 1E 17            [ 2]  768 	ldw	x, (0x17, sp)
      000431 89               [ 2]  769 	pushw	x
      000432 CDr00r00         [ 4]  770 	call	_strlen
      000435 5B 02            [ 2]  771 	addw	sp, #2
      000437 A3 00 04         [ 2]  772 	cpw	x, #0x0004
      00043A 23 04            [ 2]  773 	jrule	00102$
      00043C                        774 00101$:
                                    775 ;	user/hc05.c: 225: return 0x01; //error - too few or many characetrs in pin
      00043C A6 01            [ 1]  776 	ld	a, #0x01
      00043E 20 55            [ 2]  777 	jra	00112$
      000440                        778 00102$:
                                    779 ;	user/hc05.c: 228: HC05_PutStr(buf); //AT command for SET PIN
      000440 96               [ 1]  780 	ldw	x, sp
      000441 5C               [ 2]  781 	incw	x
      000442 89               [ 2]  782 	pushw	x
      000443 CDr01r04         [ 4]  783 	call	_HC05_PutStr
      000446 85               [ 2]  784 	popw	x
                                    785 ;	user/hc05.c: 230: while(HC05_rx_counter < 8) //wait for "OKsetpin" message, i.e. 8 chars
      000447 90 AE 6F 30      [ 2]  786 	ldw	y, #0x6f30
      00044B AE 00 01         [ 2]  787 	ldw	x, #0x0001
      00044E                        788 00106$:
      00044E C6u00u00         [ 1]  789 	ld	a, _HC05_rx_counter+0
      000451 A1 08            [ 1]  790 	cp	a, #0x08
      000453 24 29            [ 1]  791 	jrnc	00108$
                                    792 ;	user/hc05.c: 232: timeout--;
      000455 72 A2 00 01      [ 2]  793 	subw	y, #0x0001
      000459 9F               [ 1]  794 	ld	a, xl
      00045A A2 00            [ 1]  795 	sbc	a, #0x00
      00045C 02               [ 1]  796 	rlwa	x
      00045D A2 00            [ 1]  797 	sbc	a, #0x00
      00045F 95               [ 1]  798 	ld	xh, a
                                    799 ;	user/hc05.c: 233: HC05_Delay(1000); //wait +/- 100us just to give interrupt time to service incoming message
      000460 89               [ 2]  800 	pushw	x
      000461 90 89            [ 2]  801 	pushw	y
      000463 4B E8            [ 1]  802 	push	#0xe8
      000465 4B 03            [ 1]  803 	push	#0x03
      000467 4B 00            [ 1]  804 	push	#0x00
      000469 4B 00            [ 1]  805 	push	#0x00
      00046B CDr00r5A         [ 4]  806 	call	_HC05_Delay
      00046E 5B 04            [ 2]  807 	addw	sp, #4
      000470 90 85            [ 2]  808 	popw	y
      000472 85               [ 2]  809 	popw	x
                                    810 ;	user/hc05.c: 234: if (timeout == 0) 
      000473 90 5D            [ 2]  811 	tnzw	y
      000475 26 D7            [ 1]  812 	jrne	00106$
      000477 5D               [ 2]  813 	tnzw	x
      000478 26 D4            [ 1]  814 	jrne	00106$
                                    815 ;	user/hc05.c: 235: return 0x02; //if the timeout delay is exeeded, exit with error code
      00047A A6 02            [ 1]  816 	ld	a, #0x02
      00047C 20 17            [ 2]  817 	jra	00112$
      00047E                        818 00108$:
                                    819 ;	user/hc05.c: 237: if(strcmp(HC05_rx_buffer, "OKsetPIN") == 0)
      00047E 90 AEr05r42      [ 2]  820 	ldw	y, #___str_22+0
      000482 AEr00r00         [ 2]  821 	ldw	x, #_HC05_rx_buffer+0
      000485 90 89            [ 2]  822 	pushw	y
      000487 89               [ 2]  823 	pushw	x
      000488 CDr00r00         [ 4]  824 	call	_strcmp
      00048B 5B 04            [ 2]  825 	addw	sp, #4
      00048D 5D               [ 2]  826 	tnzw	x
      00048E 26 03            [ 1]  827 	jrne	00110$
                                    828 ;	user/hc05.c: 238: return 0x00; //success
      000490 4F               [ 1]  829 	clr	a
      000491 20 02            [ 2]  830 	jra	00112$
      000493                        831 00110$:
                                    832 ;	user/hc05.c: 240: return 0x03; //unknown return AT msg from HC06
      000493 A6 03            [ 1]  833 	ld	a, #0x03
      000495                        834 00112$:
      000495 5B 14            [ 2]  835 	addw	sp, #20
      000497 81               [ 4]  836 	ret
                                    837 	.area CODE
      000498                        838 ___str_0:
      000498 0D                     839 	.db 0x0d
      000499 0A                     840 	.db 0x0a
      00049A 00                     841 	.db 0x00
      00049B                        842 ___str_1:
      00049B 41 54                  843 	.ascii "AT"
      00049D 00                     844 	.db 0x00
      00049E                        845 ___str_2:
      00049E 4F 4B                  846 	.ascii "OK"
      0004A0 00                     847 	.db 0x00
      0004A1                        848 ___str_3:
      0004A1 4F 4B 31 32 30 30      849 	.ascii "OK1200"
      0004A7 00                     850 	.db 0x00
      0004A8                        851 ___str_4:
      0004A8 41 54 2B 42 41 55 44   852 	.ascii "AT+BAUD1"
             31
      0004B0 00                     853 	.db 0x00
      0004B1                        854 ___str_5:
      0004B1 4F 4B 32 34 30 30      855 	.ascii "OK2400"
      0004B7 00                     856 	.db 0x00
      0004B8                        857 ___str_6:
      0004B8 41 54 2B 42 41 55 44   858 	.ascii "AT+BAUD2"
             32
      0004C0 00                     859 	.db 0x00
      0004C1                        860 ___str_7:
      0004C1 4F 4B 34 38 30 30      861 	.ascii "OK4800"
      0004C7 00                     862 	.db 0x00
      0004C8                        863 ___str_8:
      0004C8 41 54 2B 42 41 55 44   864 	.ascii "AT+BAUD3"
             33
      0004D0 00                     865 	.db 0x00
      0004D1                        866 ___str_9:
      0004D1 4F 4B 39 36 30 30      867 	.ascii "OK9600"
      0004D7 00                     868 	.db 0x00
      0004D8                        869 ___str_10:
      0004D8 41 54 2B 42 41 55 44   870 	.ascii "AT+BAUD4"
             34
      0004E0 00                     871 	.db 0x00
      0004E1                        872 ___str_11:
      0004E1 4F 4B 31 39 32 30 30   873 	.ascii "OK19200"
      0004E8 00                     874 	.db 0x00
      0004E9                        875 ___str_12:
      0004E9 41 54 2B 42 41 55 44   876 	.ascii "AT+BAUD5"
             35
      0004F1 00                     877 	.db 0x00
      0004F2                        878 ___str_13:
      0004F2 4F 4B 33 38 34 30 30   879 	.ascii "OK38400"
      0004F9 00                     880 	.db 0x00
      0004FA                        881 ___str_14:
      0004FA 41 54 2B 42 41 55 44   882 	.ascii "AT+BAUD6"
             36
      000502 00                     883 	.db 0x00
      000503                        884 ___str_15:
      000503 4F 4B 35 37 36 30 30   885 	.ascii "OK57600"
      00050A 00                     886 	.db 0x00
      00050B                        887 ___str_16:
      00050B 41 54 2B 42 41 55 44   888 	.ascii "AT+BAUD7"
             37
      000513 00                     889 	.db 0x00
      000514                        890 ___str_17:
      000514 4F 4B 31 31 35 32 30   891 	.ascii "OK115200"
             30
      00051C 00                     892 	.db 0x00
      00051D                        893 ___str_18:
      00051D 41 54 2B 42 41 55 44   894 	.ascii "AT+BAUD8"
             38
      000525 00                     895 	.db 0x00
      000526                        896 ___str_19:
      000526 4F 4B 32 33 30 34 30   897 	.ascii "OK230400"
             30
      00052E 00                     898 	.db 0x00
      00052F                        899 ___str_20:
      00052F 41 54 2B 42 41 55 44   900 	.ascii "AT+BAUD9"
             39
      000537 00                     901 	.db 0x00
      000538                        902 ___str_21:
      000538 4F 4B 73 65 74 6E 61   903 	.ascii "OKsetname"
             6D 65
      000541 00                     904 	.db 0x00
      000542                        905 ___str_22:
      000542 4F 4B 73 65 74 50 49   906 	.ascii "OKsetPIN"
             4E
      00054A 00                     907 	.db 0x00
                                    908 	.area INITIALIZER
      000000                        909 __xinit__HC05_rx_counter:
      000000 00                     910 	.db #0x00	; 0
      000001                        911 __xinit__new_HC05_msg:
      000001 00                     912 	.db #0x00	; 0
                                    913 	.area CABS (ABS)
