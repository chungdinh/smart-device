                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module uart
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLK_GetClockFreq
                                     12 	.globl _UART1_DeInit
                                     13 	.globl _UART1_Init
                                     14 	.globl _UART1_Cmd
                                     15 	.globl _UART1_ITConfig
                                     16 	.globl _UART1_ReceiveData8
                                     17 	.globl _UART1_SendData8
                                     18 	.globl _UART1_GetFlagStatus
                                     19 	.globl _UART1_ClearFlag
                                     20 	.globl _UART1_GetITStatus
                                     21 	.globl _UART1_ClearITPendingBit
                                     22 ;--------------------------------------------------------
                                     23 ; ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DATA
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area INITIALIZED
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	lib/uart.c: 5: void UART1_DeInit(void)
                                     51 ;	-----------------------------------------
                                     52 ;	 function UART1_DeInit
                                     53 ;	-----------------------------------------
      000000                         54 _UART1_DeInit:
                                     55 ;	lib/uart.c: 9: (void)UART1->SR;
      000000 AE 52 30         [ 2]   56 	ldw	x, #0x5230
      000003 F6               [ 1]   57 	ld	a, (x)
                                     58 ;	lib/uart.c: 10: (void)UART1->DR;
      000004 AE 52 31         [ 2]   59 	ldw	x, #0x5231
      000007 F6               [ 1]   60 	ld	a, (x)
                                     61 ;	lib/uart.c: 12: UART1->BRR2 = UART1_BRR2_RESET_VALUE;  /* Set UART1_BRR2 to reset value 0x00 */
      000008 35 00 52 33      [ 1]   62 	mov	0x5233+0, #0x00
                                     63 ;	lib/uart.c: 13: UART1->BRR1 = UART1_BRR1_RESET_VALUE;  /* Set UART1_BRR1 to reset value 0x00 */
      00000C 35 00 52 32      [ 1]   64 	mov	0x5232+0, #0x00
                                     65 ;	lib/uart.c: 15: UART1->CR1 = UART1_CR1_RESET_VALUE;  /* Set UART1_CR1 to reset value 0x00 */
      000010 35 00 52 34      [ 1]   66 	mov	0x5234+0, #0x00
                                     67 ;	lib/uart.c: 16: UART1->CR2 = UART1_CR2_RESET_VALUE;  /* Set UART1_CR2 to reset value 0x00 */
      000014 35 00 52 35      [ 1]   68 	mov	0x5235+0, #0x00
                                     69 ;	lib/uart.c: 17: UART1->CR3 = UART1_CR3_RESET_VALUE;  /* Set UART1_CR3 to reset value 0x00 */
      000018 35 00 52 36      [ 1]   70 	mov	0x5236+0, #0x00
                                     71 ;	lib/uart.c: 18: UART1->CR4 = UART1_CR4_RESET_VALUE;  /* Set UART1_CR4 to reset value 0x00 */
      00001C 35 00 52 37      [ 1]   72 	mov	0x5237+0, #0x00
                                     73 ;	lib/uart.c: 19: UART1->CR5 = UART1_CR5_RESET_VALUE;  /* Set UART1_CR5 to reset value 0x00 */
      000020 35 00 52 38      [ 1]   74 	mov	0x5238+0, #0x00
                                     75 ;	lib/uart.c: 21: UART1->GTR = UART1_GTR_RESET_VALUE;
      000024 35 00 52 39      [ 1]   76 	mov	0x5239+0, #0x00
                                     77 ;	lib/uart.c: 22: UART1->PSCR = UART1_PSCR_RESET_VALUE;
      000028 35 00 52 3A      [ 1]   78 	mov	0x523a+0, #0x00
      00002C 81               [ 4]   79 	ret
                                     80 ;	lib/uart.c: 25: void UART1_Init(uint32_t BaudRate, UART1_WordLength_TypeDef WordLength, 
                                     81 ;	-----------------------------------------
                                     82 ;	 function UART1_Init
                                     83 ;	-----------------------------------------
      00002D                         84 _UART1_Init:
      00002D 52 25            [ 2]   85 	sub	sp, #37
                                     86 ;	lib/uart.c: 32: UART1->CR1 &= (uint8_t)(~UART1_CR1_M);  
      00002F AE 52 34         [ 2]   87 	ldw	x, #0x5234
      000032 F6               [ 1]   88 	ld	a, (x)
      000033 A4 EF            [ 1]   89 	and	a, #0xef
      000035 F7               [ 1]   90 	ld	(x), a
                                     91 ;	lib/uart.c: 35: UART1->CR1 |= (uint8_t)WordLength;
      000036 AE 52 34         [ 2]   92 	ldw	x, #0x5234
      000039 F6               [ 1]   93 	ld	a, (x)
      00003A 1A 2C            [ 1]   94 	or	a, (0x2c, sp)
      00003C AE 52 34         [ 2]   95 	ldw	x, #0x5234
      00003F F7               [ 1]   96 	ld	(x), a
                                     97 ;	lib/uart.c: 38: UART1->CR3 &= (uint8_t)(~UART1_CR3_STOP);  
      000040 AE 52 36         [ 2]   98 	ldw	x, #0x5236
      000043 F6               [ 1]   99 	ld	a, (x)
      000044 A4 CF            [ 1]  100 	and	a, #0xcf
      000046 F7               [ 1]  101 	ld	(x), a
                                    102 ;	lib/uart.c: 40: UART1->CR3 |= (uint8_t)StopBits;  
      000047 AE 52 36         [ 2]  103 	ldw	x, #0x5236
      00004A F6               [ 1]  104 	ld	a, (x)
      00004B 1A 2D            [ 1]  105 	or	a, (0x2d, sp)
      00004D AE 52 36         [ 2]  106 	ldw	x, #0x5236
      000050 F7               [ 1]  107 	ld	(x), a
                                    108 ;	lib/uart.c: 43: UART1->CR1 &= (uint8_t)(~(UART1_CR1_PCEN | UART1_CR1_PS  ));  
      000051 AE 52 34         [ 2]  109 	ldw	x, #0x5234
      000054 F6               [ 1]  110 	ld	a, (x)
      000055 A4 F9            [ 1]  111 	and	a, #0xf9
      000057 F7               [ 1]  112 	ld	(x), a
                                    113 ;	lib/uart.c: 45: UART1->CR1 |= (uint8_t)Parity;  
      000058 AE 52 34         [ 2]  114 	ldw	x, #0x5234
      00005B F6               [ 1]  115 	ld	a, (x)
      00005C 1A 2E            [ 1]  116 	or	a, (0x2e, sp)
      00005E AE 52 34         [ 2]  117 	ldw	x, #0x5234
      000061 F7               [ 1]  118 	ld	(x), a
                                    119 ;	lib/uart.c: 48: UART1->BRR1 &= (uint8_t)(~UART1_BRR1_DIVM);  
      000062 AE 52 32         [ 2]  120 	ldw	x, #0x5232
      000065 F6               [ 1]  121 	ld	a, (x)
      000066 35 00 52 32      [ 1]  122 	mov	0x5232+0, #0x00
                                    123 ;	lib/uart.c: 50: UART1->BRR2 &= (uint8_t)(~UART1_BRR2_DIVM);  
      00006A AE 52 33         [ 2]  124 	ldw	x, #0x5233
      00006D F6               [ 1]  125 	ld	a, (x)
      00006E A4 0F            [ 1]  126 	and	a, #0x0f
      000070 F7               [ 1]  127 	ld	(x), a
                                    128 ;	lib/uart.c: 52: UART1->BRR2 &= (uint8_t)(~UART1_BRR2_DIVF);  
      000071 AE 52 33         [ 2]  129 	ldw	x, #0x5233
      000074 F6               [ 1]  130 	ld	a, (x)
      000075 A4 F0            [ 1]  131 	and	a, #0xf0
      000077 F7               [ 1]  132 	ld	(x), a
                                    133 ;	lib/uart.c: 55: BaudRate_Mantissa    = ((uint32_t)CLK_GetClockFreq() / (BaudRate << 4));
      000078 CDr00r00         [ 4]  134 	call	_CLK_GetClockFreq
      00007B 1F 24            [ 2]  135 	ldw	(0x24, sp), x
      00007D 1E 28            [ 2]  136 	ldw	x, (0x28, sp)
      00007F 1F 1E            [ 2]  137 	ldw	(0x1e, sp), x
      000081 1E 2A            [ 2]  138 	ldw	x, (0x2a, sp)
      000083 A6 04            [ 1]  139 	ld	a, #0x04
      000085                        140 00124$:
      000085 58               [ 2]  141 	sllw	x
      000086 09 1F            [ 1]  142 	rlc	(0x1f, sp)
      000088 09 1E            [ 1]  143 	rlc	(0x1e, sp)
      00008A 4A               [ 1]  144 	dec	a
      00008B 26 F8            [ 1]  145 	jrne	00124$
      00008D 1F 20            [ 2]  146 	ldw	(0x20, sp), x
      00008F 1E 20            [ 2]  147 	ldw	x, (0x20, sp)
      000091 89               [ 2]  148 	pushw	x
      000092 1E 20            [ 2]  149 	ldw	x, (0x20, sp)
      000094 89               [ 2]  150 	pushw	x
      000095 1E 28            [ 2]  151 	ldw	x, (0x28, sp)
      000097 89               [ 2]  152 	pushw	x
      000098 90 89            [ 2]  153 	pushw	y
      00009A CDr00r00         [ 4]  154 	call	__divulong
      00009D 5B 08            [ 2]  155 	addw	sp, #8
      00009F 1F 03            [ 2]  156 	ldw	(0x03, sp), x
      0000A1 17 01            [ 2]  157 	ldw	(0x01, sp), y
                                    158 ;	lib/uart.c: 56: BaudRate_Mantissa100 = (((uint32_t)CLK_GetClockFreq() * 100) / (BaudRate << 4));
      0000A3 CDr00r00         [ 4]  159 	call	_CLK_GetClockFreq
      0000A6 51               [ 1]  160 	exgw	x, y
      0000A7 90 89            [ 2]  161 	pushw	y
      0000A9 89               [ 2]  162 	pushw	x
      0000AA 4B 64            [ 1]  163 	push	#0x64
      0000AC 5F               [ 1]  164 	clrw	x
      0000AD 89               [ 2]  165 	pushw	x
      0000AE 4B 00            [ 1]  166 	push	#0x00
      0000B0 CDr00r00         [ 4]  167 	call	__mullong
      0000B3 5B 08            [ 2]  168 	addw	sp, #8
      0000B5 1F 1C            [ 2]  169 	ldw	(0x1c, sp), x
      0000B7 1E 20            [ 2]  170 	ldw	x, (0x20, sp)
      0000B9 89               [ 2]  171 	pushw	x
      0000BA 1E 20            [ 2]  172 	ldw	x, (0x20, sp)
      0000BC 89               [ 2]  173 	pushw	x
      0000BD 1E 20            [ 2]  174 	ldw	x, (0x20, sp)
      0000BF 89               [ 2]  175 	pushw	x
      0000C0 90 89            [ 2]  176 	pushw	y
      0000C2 CDr00r00         [ 4]  177 	call	__divulong
      0000C5 5B 08            [ 2]  178 	addw	sp, #8
      0000C7 1F 07            [ 2]  179 	ldw	(0x07, sp), x
      0000C9 17 05            [ 2]  180 	ldw	(0x05, sp), y
                                    181 ;	lib/uart.c: 58: UART1->BRR2 |= (uint8_t)((uint8_t)(((BaudRate_Mantissa100 - (BaudRate_Mantissa * 100)) << 4) / 100) & (uint8_t)0x0F); 
      0000CB AE 52 33         [ 2]  182 	ldw	x, #0x5233
      0000CE F6               [ 1]  183 	ld	a, (x)
      0000CF 6B 19            [ 1]  184 	ld	(0x19, sp), a
      0000D1 1E 03            [ 2]  185 	ldw	x, (0x03, sp)
      0000D3 89               [ 2]  186 	pushw	x
      0000D4 1E 03            [ 2]  187 	ldw	x, (0x03, sp)
      0000D6 89               [ 2]  188 	pushw	x
      0000D7 4B 64            [ 1]  189 	push	#0x64
      0000D9 5F               [ 1]  190 	clrw	x
      0000DA 89               [ 2]  191 	pushw	x
      0000DB 4B 00            [ 1]  192 	push	#0x00
      0000DD CDr00r00         [ 4]  193 	call	__mullong
      0000E0 5B 08            [ 2]  194 	addw	sp, #8
      0000E2 1F 17            [ 2]  195 	ldw	(0x17, sp), x
      0000E4 17 15            [ 2]  196 	ldw	(0x15, sp), y
      0000E6 1E 07            [ 2]  197 	ldw	x, (0x07, sp)
      0000E8 72 F0 17         [ 2]  198 	subw	x, (0x17, sp)
      0000EB 1F 13            [ 2]  199 	ldw	(0x13, sp), x
      0000ED 7B 06            [ 1]  200 	ld	a, (0x06, sp)
      0000EF 12 16            [ 1]  201 	sbc	a, (0x16, sp)
      0000F1 6B 12            [ 1]  202 	ld	(0x12, sp), a
      0000F3 7B 05            [ 1]  203 	ld	a, (0x05, sp)
      0000F5 12 15            [ 1]  204 	sbc	a, (0x15, sp)
      0000F7 6B 11            [ 1]  205 	ld	(0x11, sp), a
      0000F9 1E 13            [ 2]  206 	ldw	x, (0x13, sp)
      0000FB 16 11            [ 2]  207 	ldw	y, (0x11, sp)
      0000FD A6 04            [ 1]  208 	ld	a, #0x04
      0000FF                        209 00126$:
      0000FF 58               [ 2]  210 	sllw	x
      000100 90 59            [ 2]  211 	rlcw	y
      000102 4A               [ 1]  212 	dec	a
      000103 26 FA            [ 1]  213 	jrne	00126$
      000105 4B 64            [ 1]  214 	push	#0x64
      000107 4B 00            [ 1]  215 	push	#0x00
      000109 4B 00            [ 1]  216 	push	#0x00
      00010B 4B 00            [ 1]  217 	push	#0x00
      00010D 89               [ 2]  218 	pushw	x
      00010E 90 89            [ 2]  219 	pushw	y
      000110 CDr00r00         [ 4]  220 	call	__divulong
      000113 5B 08            [ 2]  221 	addw	sp, #8
      000115 9F               [ 1]  222 	ld	a, xl
      000116 A4 0F            [ 1]  223 	and	a, #0x0f
      000118 1A 19            [ 1]  224 	or	a, (0x19, sp)
      00011A AE 52 33         [ 2]  225 	ldw	x, #0x5233
      00011D F7               [ 1]  226 	ld	(x), a
                                    227 ;	lib/uart.c: 60: UART1->BRR2 |= (uint8_t)((BaudRate_Mantissa >> 4) & (uint8_t)0xF0); 
      00011E AE 52 33         [ 2]  228 	ldw	x, #0x5233
      000121 F6               [ 1]  229 	ld	a, (x)
      000122 6B 10            [ 1]  230 	ld	(0x10, sp), a
      000124 1E 03            [ 2]  231 	ldw	x, (0x03, sp)
      000126 16 01            [ 2]  232 	ldw	y, (0x01, sp)
      000128 90 54            [ 2]  233 	srlw	y
      00012A 56               [ 2]  234 	rrcw	x
      00012B 90 54            [ 2]  235 	srlw	y
      00012D 56               [ 2]  236 	rrcw	x
      00012E 90 54            [ 2]  237 	srlw	y
      000130 56               [ 2]  238 	rrcw	x
      000131 90 54            [ 2]  239 	srlw	y
      000133 56               [ 2]  240 	rrcw	x
      000134 9F               [ 1]  241 	ld	a, xl
      000135 A4 F0            [ 1]  242 	and	a, #0xf0
      000137 88               [ 1]  243 	push	a
      000138 5F               [ 1]  244 	clrw	x
      000139 0F 0D            [ 1]  245 	clr	(0x0d, sp)
      00013B 84               [ 1]  246 	pop	a
      00013C 1A 10            [ 1]  247 	or	a, (0x10, sp)
      00013E AE 52 33         [ 2]  248 	ldw	x, #0x5233
      000141 F7               [ 1]  249 	ld	(x), a
                                    250 ;	lib/uart.c: 62: UART1->BRR1 |= (uint8_t)BaudRate_Mantissa;           
      000142 AE 52 32         [ 2]  251 	ldw	x, #0x5232
      000145 F6               [ 1]  252 	ld	a, (x)
      000146 6B 0B            [ 1]  253 	ld	(0x0b, sp), a
      000148 7B 04            [ 1]  254 	ld	a, (0x04, sp)
      00014A 1A 0B            [ 1]  255 	or	a, (0x0b, sp)
      00014C AE 52 32         [ 2]  256 	ldw	x, #0x5232
      00014F F7               [ 1]  257 	ld	(x), a
                                    258 ;	lib/uart.c: 65: UART1->CR2 &= (uint8_t)~(UART1_CR2_TEN | UART1_CR2_REN); 
      000150 AE 52 35         [ 2]  259 	ldw	x, #0x5235
      000153 F6               [ 1]  260 	ld	a, (x)
      000154 A4 F3            [ 1]  261 	and	a, #0xf3
      000156 F7               [ 1]  262 	ld	(x), a
                                    263 ;	lib/uart.c: 67: UART1->CR3 &= (uint8_t)~(UART1_CR3_CPOL | UART1_CR3_CPHA | UART1_CR3_LBCL); 
      000157 AE 52 36         [ 2]  264 	ldw	x, #0x5236
      00015A F6               [ 1]  265 	ld	a, (x)
      00015B A4 F8            [ 1]  266 	and	a, #0xf8
      00015D F7               [ 1]  267 	ld	(x), a
                                    268 ;	lib/uart.c: 69: UART1->CR3 |= (uint8_t)((uint8_t)SyncMode & (uint8_t)(UART1_CR3_CPOL | 
      00015E AE 52 36         [ 2]  269 	ldw	x, #0x5236
      000161 F6               [ 1]  270 	ld	a, (x)
      000162 6B 0A            [ 1]  271 	ld	(0x0a, sp), a
      000164 7B 2F            [ 1]  272 	ld	a, (0x2f, sp)
      000166 A4 07            [ 1]  273 	and	a, #0x07
      000168 1A 0A            [ 1]  274 	or	a, (0x0a, sp)
      00016A AE 52 36         [ 2]  275 	ldw	x, #0x5236
      00016D F7               [ 1]  276 	ld	(x), a
                                    277 ;	lib/uart.c: 72: if ((uint8_t)(Mode & UART1_MODE_TX_ENABLE))
      00016E 7B 30            [ 1]  278 	ld	a, (0x30, sp)
      000170 A5 04            [ 1]  279 	bcp	a, #0x04
      000172 27 09            [ 1]  280 	jreq	00102$
                                    281 ;	lib/uart.c: 75: UART1->CR2 |= (uint8_t)UART1_CR2_TEN;  
      000174 AE 52 35         [ 2]  282 	ldw	x, #0x5235
      000177 F6               [ 1]  283 	ld	a, (x)
      000178 AA 08            [ 1]  284 	or	a, #0x08
      00017A F7               [ 1]  285 	ld	(x), a
      00017B 20 07            [ 2]  286 	jra	00103$
      00017D                        287 00102$:
                                    288 ;	lib/uart.c: 80: UART1->CR2 &= (uint8_t)(~UART1_CR2_TEN);  
      00017D AE 52 35         [ 2]  289 	ldw	x, #0x5235
      000180 F6               [ 1]  290 	ld	a, (x)
      000181 A4 F7            [ 1]  291 	and	a, #0xf7
      000183 F7               [ 1]  292 	ld	(x), a
      000184                        293 00103$:
                                    294 ;	lib/uart.c: 82: if ((uint8_t)(Mode & UART1_MODE_RX_ENABLE))
      000184 7B 30            [ 1]  295 	ld	a, (0x30, sp)
      000186 A5 08            [ 1]  296 	bcp	a, #0x08
      000188 27 09            [ 1]  297 	jreq	00105$
                                    298 ;	lib/uart.c: 85: UART1->CR2 |= (uint8_t)UART1_CR2_REN;  
      00018A AE 52 35         [ 2]  299 	ldw	x, #0x5235
      00018D F6               [ 1]  300 	ld	a, (x)
      00018E AA 04            [ 1]  301 	or	a, #0x04
      000190 F7               [ 1]  302 	ld	(x), a
      000191 20 07            [ 2]  303 	jra	00106$
      000193                        304 00105$:
                                    305 ;	lib/uart.c: 90: UART1->CR2 &= (uint8_t)(~UART1_CR2_REN);  
      000193 AE 52 35         [ 2]  306 	ldw	x, #0x5235
      000196 F6               [ 1]  307 	ld	a, (x)
      000197 A4 FB            [ 1]  308 	and	a, #0xfb
      000199 F7               [ 1]  309 	ld	(x), a
      00019A                        310 00106$:
                                    311 ;	lib/uart.c: 94: if ((uint8_t)(SyncMode & UART1_SYNCMODE_CLOCK_DISABLE))
      00019A 0D 2F            [ 1]  312 	tnz	(0x2f, sp)
      00019C 2A 09            [ 1]  313 	jrpl	00108$
                                    314 ;	lib/uart.c: 97: UART1->CR3 &= (uint8_t)(~UART1_CR3_CKEN); 
      00019E AE 52 36         [ 2]  315 	ldw	x, #0x5236
      0001A1 F6               [ 1]  316 	ld	a, (x)
      0001A2 A4 F7            [ 1]  317 	and	a, #0xf7
      0001A4 F7               [ 1]  318 	ld	(x), a
      0001A5 20 10            [ 2]  319 	jra	00110$
      0001A7                        320 00108$:
                                    321 ;	lib/uart.c: 101: UART1->CR3 |= (uint8_t)((uint8_t)SyncMode & UART1_CR3_CKEN);
      0001A7 AE 52 36         [ 2]  322 	ldw	x, #0x5236
      0001AA F6               [ 1]  323 	ld	a, (x)
      0001AB 6B 09            [ 1]  324 	ld	(0x09, sp), a
      0001AD 7B 2F            [ 1]  325 	ld	a, (0x2f, sp)
      0001AF A4 08            [ 1]  326 	and	a, #0x08
      0001B1 1A 09            [ 1]  327 	or	a, (0x09, sp)
      0001B3 AE 52 36         [ 2]  328 	ldw	x, #0x5236
      0001B6 F7               [ 1]  329 	ld	(x), a
      0001B7                        330 00110$:
      0001B7 5B 25            [ 2]  331 	addw	sp, #37
      0001B9 81               [ 4]  332 	ret
                                    333 ;	lib/uart.c: 105: void UART1_Cmd(FunctionalState NewState)
                                    334 ;	-----------------------------------------
                                    335 ;	 function UART1_Cmd
                                    336 ;	-----------------------------------------
      0001BA                        337 _UART1_Cmd:
                                    338 ;	lib/uart.c: 107: if (NewState != DISABLE)
      0001BA 0D 03            [ 1]  339 	tnz	(0x03, sp)
      0001BC 27 08            [ 1]  340 	jreq	00102$
                                    341 ;	lib/uart.c: 110: UART1->CR1 &= (uint8_t)(~UART1_CR1_UARTD); 
      0001BE AE 52 34         [ 2]  342 	ldw	x, #0x5234
      0001C1 F6               [ 1]  343 	ld	a, (x)
      0001C2 A4 DF            [ 1]  344 	and	a, #0xdf
      0001C4 F7               [ 1]  345 	ld	(x), a
      0001C5 81               [ 4]  346 	ret
      0001C6                        347 00102$:
                                    348 ;	lib/uart.c: 115: UART1->CR1 |= UART1_CR1_UARTD;  
      0001C6 AE 52 34         [ 2]  349 	ldw	x, #0x5234
      0001C9 F6               [ 1]  350 	ld	a, (x)
      0001CA AA 20            [ 1]  351 	or	a, #0x20
      0001CC F7               [ 1]  352 	ld	(x), a
      0001CD 81               [ 4]  353 	ret
                                    354 ;	lib/uart.c: 119: void UART1_ITConfig(UART1_IT_TypeDef UART1_IT, FunctionalState NewState)
                                    355 ;	-----------------------------------------
                                    356 ;	 function UART1_ITConfig
                                    357 ;	-----------------------------------------
      0001CE                        358 _UART1_ITConfig:
      0001CE 52 03            [ 2]  359 	sub	sp, #3
                                    360 ;	lib/uart.c: 124: uartreg = (uint8_t)((uint16_t)UART1_IT >> 0x08);
      0001D0 7B 06            [ 1]  361 	ld	a, (0x06, sp)
      0001D2 97               [ 1]  362 	ld	xl, a
      0001D3 4F               [ 1]  363 	clr	a
                                    364 ;	lib/uart.c: 126: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART1_IT & (uint8_t)0x0F));
      0001D4 7B 07            [ 1]  365 	ld	a, (0x07, sp)
      0001D6 A4 0F            [ 1]  366 	and	a, #0x0f
      0001D8 95               [ 1]  367 	ld	xh, a
      0001D9 A6 01            [ 1]  368 	ld	a, #0x01
      0001DB 88               [ 1]  369 	push	a
      0001DC 9E               [ 1]  370 	ld	a, xh
      0001DD 4D               [ 1]  371 	tnz	a
      0001DE 27 05            [ 1]  372 	jreq	00139$
      0001E0                        373 00138$:
      0001E0 08 01            [ 1]  374 	sll	(1, sp)
      0001E2 4A               [ 1]  375 	dec	a
      0001E3 26 FB            [ 1]  376 	jrne	00138$
      0001E5                        377 00139$:
      0001E5 84               [ 1]  378 	pop	a
      0001E6 6B 01            [ 1]  379 	ld	(0x01, sp), a
                                    380 ;	lib/uart.c: 131: if (uartreg == 0x01)
      0001E8 9F               [ 1]  381 	ld	a, xl
      0001E9 A1 01            [ 1]  382 	cp	a, #0x01
      0001EB 26 06            [ 1]  383 	jrne	00141$
      0001ED A6 01            [ 1]  384 	ld	a, #0x01
      0001EF 6B 03            [ 1]  385 	ld	(0x03, sp), a
      0001F1 20 02            [ 2]  386 	jra	00142$
      0001F3                        387 00141$:
      0001F3 0F 03            [ 1]  388 	clr	(0x03, sp)
      0001F5                        389 00142$:
                                    390 ;	lib/uart.c: 135: else if (uartreg == 0x02)
      0001F5 9F               [ 1]  391 	ld	a, xl
      0001F6 A1 02            [ 1]  392 	cp	a, #0x02
      0001F8 26 03            [ 1]  393 	jrne	00144$
      0001FA A6 01            [ 1]  394 	ld	a, #0x01
      0001FC 21                     395 	.byte 0x21
      0001FD                        396 00144$:
      0001FD 4F               [ 1]  397 	clr	a
      0001FE                        398 00145$:
                                    399 ;	lib/uart.c: 128: if (NewState != DISABLE)
      0001FE 0D 08            [ 1]  400 	tnz	(0x08, sp)
      000200 27 2B            [ 1]  401 	jreq	00114$
                                    402 ;	lib/uart.c: 131: if (uartreg == 0x01)
      000202 0D 03            [ 1]  403 	tnz	(0x03, sp)
      000204 27 0C            [ 1]  404 	jreq	00105$
                                    405 ;	lib/uart.c: 133: UART1->CR1 |= itpos;
      000206 AE 52 34         [ 2]  406 	ldw	x, #0x5234
      000209 F6               [ 1]  407 	ld	a, (x)
      00020A 1A 01            [ 1]  408 	or	a, (0x01, sp)
      00020C AE 52 34         [ 2]  409 	ldw	x, #0x5234
      00020F F7               [ 1]  410 	ld	(x), a
      000210 20 4B            [ 2]  411 	jra	00116$
      000212                        412 00105$:
                                    413 ;	lib/uart.c: 135: else if (uartreg == 0x02)
      000212 4D               [ 1]  414 	tnz	a
      000213 27 0C            [ 1]  415 	jreq	00102$
                                    416 ;	lib/uart.c: 137: UART1->CR2 |= itpos;
      000215 AE 52 35         [ 2]  417 	ldw	x, #0x5235
      000218 F6               [ 1]  418 	ld	a, (x)
      000219 1A 01            [ 1]  419 	or	a, (0x01, sp)
      00021B AE 52 35         [ 2]  420 	ldw	x, #0x5235
      00021E F7               [ 1]  421 	ld	(x), a
      00021F 20 3C            [ 2]  422 	jra	00116$
      000221                        423 00102$:
                                    424 ;	lib/uart.c: 141: UART1->CR4 |= itpos;
      000221 AE 52 37         [ 2]  425 	ldw	x, #0x5237
      000224 F6               [ 1]  426 	ld	a, (x)
      000225 1A 01            [ 1]  427 	or	a, (0x01, sp)
      000227 AE 52 37         [ 2]  428 	ldw	x, #0x5237
      00022A F7               [ 1]  429 	ld	(x), a
      00022B 20 30            [ 2]  430 	jra	00116$
      00022D                        431 00114$:
                                    432 ;	lib/uart.c: 149: UART1->CR1 &= (uint8_t)(~itpos);
      00022D 88               [ 1]  433 	push	a
      00022E 7B 02            [ 1]  434 	ld	a, (0x02, sp)
      000230 43               [ 1]  435 	cpl	a
      000231 6B 03            [ 1]  436 	ld	(0x03, sp), a
      000233 84               [ 1]  437 	pop	a
                                    438 ;	lib/uart.c: 147: if (uartreg == 0x01)
      000234 0D 03            [ 1]  439 	tnz	(0x03, sp)
      000236 27 0C            [ 1]  440 	jreq	00111$
                                    441 ;	lib/uart.c: 149: UART1->CR1 &= (uint8_t)(~itpos);
      000238 AE 52 34         [ 2]  442 	ldw	x, #0x5234
      00023B F6               [ 1]  443 	ld	a, (x)
      00023C 14 02            [ 1]  444 	and	a, (0x02, sp)
      00023E AE 52 34         [ 2]  445 	ldw	x, #0x5234
      000241 F7               [ 1]  446 	ld	(x), a
      000242 20 19            [ 2]  447 	jra	00116$
      000244                        448 00111$:
                                    449 ;	lib/uart.c: 151: else if (uartreg == 0x02)
      000244 4D               [ 1]  450 	tnz	a
      000245 27 0C            [ 1]  451 	jreq	00108$
                                    452 ;	lib/uart.c: 153: UART1->CR2 &= (uint8_t)(~itpos);
      000247 AE 52 35         [ 2]  453 	ldw	x, #0x5235
      00024A F6               [ 1]  454 	ld	a, (x)
      00024B 14 02            [ 1]  455 	and	a, (0x02, sp)
      00024D AE 52 35         [ 2]  456 	ldw	x, #0x5235
      000250 F7               [ 1]  457 	ld	(x), a
      000251 20 0A            [ 2]  458 	jra	00116$
      000253                        459 00108$:
                                    460 ;	lib/uart.c: 157: UART1->CR4 &= (uint8_t)(~itpos);
      000253 AE 52 37         [ 2]  461 	ldw	x, #0x5237
      000256 F6               [ 1]  462 	ld	a, (x)
      000257 14 02            [ 1]  463 	and	a, (0x02, sp)
      000259 AE 52 37         [ 2]  464 	ldw	x, #0x5237
      00025C F7               [ 1]  465 	ld	(x), a
      00025D                        466 00116$:
      00025D 5B 03            [ 2]  467 	addw	sp, #3
      00025F 81               [ 4]  468 	ret
                                    469 ;	lib/uart.c: 163: uint8_t UART1_ReceiveData8(void)
                                    470 ;	-----------------------------------------
                                    471 ;	 function UART1_ReceiveData8
                                    472 ;	-----------------------------------------
      000260                        473 _UART1_ReceiveData8:
                                    474 ;	lib/uart.c: 165: return ((uint8_t)UART1->DR);
      000260 AE 52 31         [ 2]  475 	ldw	x, #0x5231
      000263 F6               [ 1]  476 	ld	a, (x)
      000264 81               [ 4]  477 	ret
                                    478 ;	lib/uart.c: 168: void UART1_SendData8(uint8_t Data)
                                    479 ;	-----------------------------------------
                                    480 ;	 function UART1_SendData8
                                    481 ;	-----------------------------------------
      000265                        482 _UART1_SendData8:
                                    483 ;	lib/uart.c: 171: UART1->DR = Data;
      000265 AE 52 31         [ 2]  484 	ldw	x, #0x5231
      000268 7B 03            [ 1]  485 	ld	a, (0x03, sp)
      00026A F7               [ 1]  486 	ld	(x), a
      00026B 81               [ 4]  487 	ret
                                    488 ;	lib/uart.c: 174: FlagStatus UART1_GetFlagStatus(UART1_Flag_TypeDef UART1_FLAG)
                                    489 ;	-----------------------------------------
                                    490 ;	 function UART1_GetFlagStatus
                                    491 ;	-----------------------------------------
      00026C                        492 _UART1_GetFlagStatus:
      00026C 88               [ 1]  493 	push	a
                                    494 ;	lib/uart.c: 180: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      00026D 7B 05            [ 1]  495 	ld	a, (0x05, sp)
      00026F 6B 01            [ 1]  496 	ld	(0x01, sp), a
                                    497 ;	lib/uart.c: 178: if (UART1_FLAG == UART1_FLAG_LBDF)
      000271 1E 04            [ 2]  498 	ldw	x, (0x04, sp)
      000273 A3 02 10         [ 2]  499 	cpw	x, #0x0210
      000276 26 10            [ 1]  500 	jrne	00114$
                                    501 ;	lib/uart.c: 180: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      000278 AE 52 37         [ 2]  502 	ldw	x, #0x5237
      00027B F6               [ 1]  503 	ld	a, (x)
      00027C 14 01            [ 1]  504 	and	a, (0x01, sp)
      00027E 4D               [ 1]  505 	tnz	a
      00027F 27 04            [ 1]  506 	jreq	00102$
                                    507 ;	lib/uart.c: 183: status = SET;
      000281 A6 01            [ 1]  508 	ld	a, #0x01
      000283 20 27            [ 2]  509 	jra	00115$
      000285                        510 00102$:
                                    511 ;	lib/uart.c: 188: status = RESET;
      000285 4F               [ 1]  512 	clr	a
      000286 20 24            [ 2]  513 	jra	00115$
      000288                        514 00114$:
                                    515 ;	lib/uart.c: 191: else if (UART1_FLAG == UART1_FLAG_SBK)
      000288 1E 04            [ 2]  516 	ldw	x, (0x04, sp)
      00028A A3 01 01         [ 2]  517 	cpw	x, #0x0101
      00028D 26 10            [ 1]  518 	jrne	00111$
                                    519 ;	lib/uart.c: 193: if ((UART1->CR2 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      00028F AE 52 35         [ 2]  520 	ldw	x, #0x5235
      000292 F6               [ 1]  521 	ld	a, (x)
      000293 14 01            [ 1]  522 	and	a, (0x01, sp)
      000295 4D               [ 1]  523 	tnz	a
      000296 27 04            [ 1]  524 	jreq	00105$
                                    525 ;	lib/uart.c: 196: status = SET;
      000298 A6 01            [ 1]  526 	ld	a, #0x01
      00029A 20 10            [ 2]  527 	jra	00115$
      00029C                        528 00105$:
                                    529 ;	lib/uart.c: 201: status = RESET;
      00029C 4F               [ 1]  530 	clr	a
      00029D 20 0D            [ 2]  531 	jra	00115$
      00029F                        532 00111$:
                                    533 ;	lib/uart.c: 206: if ((UART1->SR & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      00029F AE 52 30         [ 2]  534 	ldw	x, #0x5230
      0002A2 F6               [ 1]  535 	ld	a, (x)
      0002A3 14 01            [ 1]  536 	and	a, (0x01, sp)
      0002A5 4D               [ 1]  537 	tnz	a
      0002A6 27 03            [ 1]  538 	jreq	00108$
                                    539 ;	lib/uart.c: 209: status = SET;
      0002A8 A6 01            [ 1]  540 	ld	a, #0x01
                                    541 ;	lib/uart.c: 214: status = RESET;
      0002AA 21                     542 	.byte 0x21
      0002AB                        543 00108$:
      0002AB 4F               [ 1]  544 	clr	a
      0002AC                        545 00115$:
                                    546 ;	lib/uart.c: 218: return status;
      0002AC 5B 01            [ 2]  547 	addw	sp, #1
      0002AE 81               [ 4]  548 	ret
                                    549 ;	lib/uart.c: 221: void UART1_ClearFlag(UART1_Flag_TypeDef UART1_FLAG)
                                    550 ;	-----------------------------------------
                                    551 ;	 function UART1_ClearFlag
                                    552 ;	-----------------------------------------
      0002AF                        553 _UART1_ClearFlag:
                                    554 ;	lib/uart.c: 224: if (UART1_FLAG == UART1_FLAG_RXNE)
      0002AF 1E 03            [ 2]  555 	ldw	x, (0x03, sp)
      0002B1 A3 00 20         [ 2]  556 	cpw	x, #0x0020
      0002B4 26 05            [ 1]  557 	jrne	00102$
                                    558 ;	lib/uart.c: 226: UART1->SR = (uint8_t)~(UART1_SR_RXNE);
      0002B6 35 DF 52 30      [ 1]  559 	mov	0x5230+0, #0xdf
      0002BA 81               [ 4]  560 	ret
      0002BB                        561 00102$:
                                    562 ;	lib/uart.c: 231: UART1->CR4 &= (uint8_t)~(UART1_CR4_LBDF);
      0002BB AE 52 37         [ 2]  563 	ldw	x, #0x5237
      0002BE F6               [ 1]  564 	ld	a, (x)
      0002BF A4 EF            [ 1]  565 	and	a, #0xef
      0002C1 F7               [ 1]  566 	ld	(x), a
      0002C2 81               [ 4]  567 	ret
                                    568 ;	lib/uart.c: 235: ITStatus UART1_GetITStatus(UART1_IT_TypeDef UART1_IT)
                                    569 ;	-----------------------------------------
                                    570 ;	 function UART1_GetITStatus
                                    571 ;	-----------------------------------------
      0002C3                        572 _UART1_GetITStatus:
      0002C3 52 05            [ 2]  573 	sub	sp, #5
                                    574 ;	lib/uart.c: 244: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART1_IT & (uint8_t)0x0F));
      0002C5 7B 09            [ 1]  575 	ld	a, (0x09, sp)
      0002C7 97               [ 1]  576 	ld	xl, a
      0002C8 A4 0F            [ 1]  577 	and	a, #0x0f
      0002CA 95               [ 1]  578 	ld	xh, a
      0002CB A6 01            [ 1]  579 	ld	a, #0x01
      0002CD 88               [ 1]  580 	push	a
      0002CE 9E               [ 1]  581 	ld	a, xh
      0002CF 4D               [ 1]  582 	tnz	a
      0002D0 27 05            [ 1]  583 	jreq	00154$
      0002D2                        584 00153$:
      0002D2 08 01            [ 1]  585 	sll	(1, sp)
      0002D4 4A               [ 1]  586 	dec	a
      0002D5 26 FB            [ 1]  587 	jrne	00153$
      0002D7                        588 00154$:
      0002D7 84               [ 1]  589 	pop	a
      0002D8 6B 03            [ 1]  590 	ld	(0x03, sp), a
                                    591 ;	lib/uart.c: 246: itmask1 = (uint8_t)((uint8_t)UART1_IT >> (uint8_t)4);
      0002DA 9F               [ 1]  592 	ld	a, xl
      0002DB 4E               [ 1]  593 	swap	a
      0002DC A4 0F            [ 1]  594 	and	a, #0x0f
      0002DE 97               [ 1]  595 	ld	xl, a
                                    596 ;	lib/uart.c: 248: itmask2 = (uint8_t)((uint8_t)1 << itmask1);
      0002DF A6 01            [ 1]  597 	ld	a, #0x01
      0002E1 88               [ 1]  598 	push	a
      0002E2 9F               [ 1]  599 	ld	a, xl
      0002E3 4D               [ 1]  600 	tnz	a
      0002E4 27 05            [ 1]  601 	jreq	00156$
      0002E6                        602 00155$:
      0002E6 08 01            [ 1]  603 	sll	(1, sp)
      0002E8 4A               [ 1]  604 	dec	a
      0002E9 26 FB            [ 1]  605 	jrne	00155$
      0002EB                        606 00156$:
      0002EB 84               [ 1]  607 	pop	a
      0002EC 6B 02            [ 1]  608 	ld	(0x02, sp), a
                                    609 ;	lib/uart.c: 251: if (UART1_IT == UART1_IT_PE)
      0002EE 1E 08            [ 2]  610 	ldw	x, (0x08, sp)
      0002F0 A3 01 00         [ 2]  611 	cpw	x, #0x0100
      0002F3 26 1C            [ 1]  612 	jrne	00117$
                                    613 ;	lib/uart.c: 254: enablestatus = (uint8_t)((uint8_t)UART1->CR1 & itmask2);
      0002F5 AE 52 34         [ 2]  614 	ldw	x, #0x5234
      0002F8 F6               [ 1]  615 	ld	a, (x)
      0002F9 14 02            [ 1]  616 	and	a, (0x02, sp)
      0002FB 6B 04            [ 1]  617 	ld	(0x04, sp), a
                                    618 ;	lib/uart.c: 257: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      0002FD AE 52 30         [ 2]  619 	ldw	x, #0x5230
      000300 F6               [ 1]  620 	ld	a, (x)
      000301 14 03            [ 1]  621 	and	a, (0x03, sp)
      000303 4D               [ 1]  622 	tnz	a
      000304 27 08            [ 1]  623 	jreq	00102$
      000306 0D 04            [ 1]  624 	tnz	(0x04, sp)
      000308 27 04            [ 1]  625 	jreq	00102$
                                    626 ;	lib/uart.c: 260: pendingbitstatus = SET;
      00030A A6 01            [ 1]  627 	ld	a, #0x01
      00030C 20 3F            [ 2]  628 	jra	00118$
      00030E                        629 00102$:
                                    630 ;	lib/uart.c: 265: pendingbitstatus = RESET;
      00030E 4F               [ 1]  631 	clr	a
      00030F 20 3C            [ 2]  632 	jra	00118$
      000311                        633 00117$:
                                    634 ;	lib/uart.c: 269: else if (UART1_IT == UART1_IT_LBDF)
      000311 1E 08            [ 2]  635 	ldw	x, (0x08, sp)
      000313 A3 03 46         [ 2]  636 	cpw	x, #0x0346
      000316 26 1C            [ 1]  637 	jrne	00114$
                                    638 ;	lib/uart.c: 272: enablestatus = (uint8_t)((uint8_t)UART1->CR4 & itmask2);
      000318 AE 52 37         [ 2]  639 	ldw	x, #0x5237
      00031B F6               [ 1]  640 	ld	a, (x)
      00031C 14 02            [ 1]  641 	and	a, (0x02, sp)
      00031E 6B 01            [ 1]  642 	ld	(0x01, sp), a
                                    643 ;	lib/uart.c: 274: if (((UART1->CR4 & itpos) != (uint8_t)0x00) && enablestatus)
      000320 AE 52 37         [ 2]  644 	ldw	x, #0x5237
      000323 F6               [ 1]  645 	ld	a, (x)
      000324 14 03            [ 1]  646 	and	a, (0x03, sp)
      000326 4D               [ 1]  647 	tnz	a
      000327 27 08            [ 1]  648 	jreq	00106$
      000329 0D 01            [ 1]  649 	tnz	(0x01, sp)
      00032B 27 04            [ 1]  650 	jreq	00106$
                                    651 ;	lib/uart.c: 277: pendingbitstatus = SET;
      00032D A6 01            [ 1]  652 	ld	a, #0x01
      00032F 20 1C            [ 2]  653 	jra	00118$
      000331                        654 00106$:
                                    655 ;	lib/uart.c: 282: pendingbitstatus = RESET;
      000331 4F               [ 1]  656 	clr	a
      000332 20 19            [ 2]  657 	jra	00118$
      000334                        658 00114$:
                                    659 ;	lib/uart.c: 288: enablestatus = (uint8_t)((uint8_t)UART1->CR2 & itmask2);
      000334 AE 52 35         [ 2]  660 	ldw	x, #0x5235
      000337 F6               [ 1]  661 	ld	a, (x)
      000338 14 02            [ 1]  662 	and	a, (0x02, sp)
      00033A 6B 05            [ 1]  663 	ld	(0x05, sp), a
                                    664 ;	lib/uart.c: 290: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      00033C AE 52 30         [ 2]  665 	ldw	x, #0x5230
      00033F F6               [ 1]  666 	ld	a, (x)
      000340 14 03            [ 1]  667 	and	a, (0x03, sp)
      000342 4D               [ 1]  668 	tnz	a
      000343 27 07            [ 1]  669 	jreq	00110$
      000345 0D 05            [ 1]  670 	tnz	(0x05, sp)
      000347 27 03            [ 1]  671 	jreq	00110$
                                    672 ;	lib/uart.c: 293: pendingbitstatus = SET;
      000349 A6 01            [ 1]  673 	ld	a, #0x01
                                    674 ;	lib/uart.c: 298: pendingbitstatus = RESET;
      00034B 21                     675 	.byte 0x21
      00034C                        676 00110$:
      00034C 4F               [ 1]  677 	clr	a
      00034D                        678 00118$:
                                    679 ;	lib/uart.c: 303: return  pendingbitstatus;
      00034D 5B 05            [ 2]  680 	addw	sp, #5
      00034F 81               [ 4]  681 	ret
                                    682 ;	lib/uart.c: 306: void UART1_ClearITPendingBit(UART1_IT_TypeDef UART1_IT)
                                    683 ;	-----------------------------------------
                                    684 ;	 function UART1_ClearITPendingBit
                                    685 ;	-----------------------------------------
      000350                        686 _UART1_ClearITPendingBit:
                                    687 ;	lib/uart.c: 309: if (UART1_IT == UART1_IT_RXNE)
      000350 1E 03            [ 2]  688 	ldw	x, (0x03, sp)
      000352 A3 02 55         [ 2]  689 	cpw	x, #0x0255
      000355 26 05            [ 1]  690 	jrne	00102$
                                    691 ;	lib/uart.c: 311: UART1->SR = (uint8_t)~(UART1_SR_RXNE);
      000357 35 DF 52 30      [ 1]  692 	mov	0x5230+0, #0xdf
      00035B 81               [ 4]  693 	ret
      00035C                        694 00102$:
                                    695 ;	lib/uart.c: 316: UART1->CR4 &= (uint8_t)~(UART1_CR4_LBDF);
      00035C AE 52 37         [ 2]  696 	ldw	x, #0x5237
      00035F F6               [ 1]  697 	ld	a, (x)
      000360 A4 EF            [ 1]  698 	and	a, #0xef
      000362 F7               [ 1]  699 	ld	(x), a
      000363 81               [ 4]  700 	ret
                                    701 	.area CODE
                                    702 	.area INITIALIZER
                                    703 	.area CABS (ABS)
