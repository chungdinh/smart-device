                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module remote
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _remote_Decode
                                     12 	.globl _GPIO_Configuration
                                     13 	.globl _TIM1_Config
                                     14 	.globl _TIM1_DisIn
                                     15 	.globl _TIM1_EnIn
                                     16 	.globl _system_checkID
                                     17 	.globl _debugInfo
                                     18 	.globl _info
                                     19 	.globl _TIMER_CheckTimeMS
                                     20 	.globl _TIM1_ClearFlag
                                     21 	.globl _TIM1_GetCounter
                                     22 	.globl _TIM1_SetCounter
                                     23 	.globl _TIM1_ITConfig
                                     24 	.globl _TIM1_Cmd
                                     25 	.globl _TIM1_TimeBaseInit
                                     26 	.globl _TIM1_DeInit
                                     27 	.globl _GPIO_WriteReverse
                                     28 	.globl _GPIO_Init
                                     29 	.globl _EXTI_SetExtIntSensitivity
                                     30 	.globl _CLK_PeripheralClockConfig
                                     31 	.globl _ctrCnt
                                     32 	.globl _ctrFlag
                                     33 	.globl _remote
                                     34 	.globl _remote_Init
                                     35 	.globl _remote_CheckCompare
                                     36 	.globl _remote_Clear
                                     37 	.globl _remote_Process
                                     38 	.globl _remote_Manager
                                     39 ;--------------------------------------------------------
                                     40 ; ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area DATA
      000000                         43 _remote::
      000000                         44 	.ds 159
                                     45 ;--------------------------------------------------------
                                     46 ; ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area INITIALIZED
      000000                         49 _ctrFlag::
      000000                         50 	.ds 1
      000001                         51 _ctrCnt::
      000001                         52 	.ds 1
                                     53 ;--------------------------------------------------------
                                     54 ; absolute external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DABS (ABS)
                                     57 ;--------------------------------------------------------
                                     58 ; global & static initialisations
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
                                     61 	.area GSINIT
                                     62 	.area GSFINAL
                                     63 	.area GSINIT
                                     64 ;--------------------------------------------------------
                                     65 ; Home
                                     66 ;--------------------------------------------------------
                                     67 	.area HOME
                                     68 	.area HOME
                                     69 ;--------------------------------------------------------
                                     70 ; code
                                     71 ;--------------------------------------------------------
                                     72 	.area CODE
                                     73 ;	user/remote.c: 21: void TIM1_EnIn(void)
                                     74 ;	-----------------------------------------
                                     75 ;	 function TIM1_EnIn
                                     76 ;	-----------------------------------------
      000000                         77 _TIM1_EnIn:
                                     78 ;	user/remote.c: 23: TIM1_ClearFlag(TIM1_FLAG_UPDATE); 
      000000 4B 01            [ 1]   79 	push	#0x01
      000002 4B 00            [ 1]   80 	push	#0x00
      000004 CDr00r00         [ 4]   81 	call	_TIM1_ClearFlag
      000007 85               [ 2]   82 	popw	x
                                     83 ;	user/remote.c: 24: TIM1_ITConfig(TIM1_IT_UPDATE, ENABLE);
      000008 4B 01            [ 1]   84 	push	#0x01
      00000A 4B 01            [ 1]   85 	push	#0x01
      00000C CDr00r00         [ 4]   86 	call	_TIM1_ITConfig
      00000F 85               [ 2]   87 	popw	x
                                     88 ;	user/remote.c: 25: TIM1_SetCounter(0);
      000010 5F               [ 1]   89 	clrw	x
      000011 89               [ 2]   90 	pushw	x
      000012 CDr00r00         [ 4]   91 	call	_TIM1_SetCounter
      000015 85               [ 2]   92 	popw	x
      000016 81               [ 4]   93 	ret
                                     94 ;	user/remote.c: 28: void TIM1_DisIn(void)
                                     95 ;	-----------------------------------------
                                     96 ;	 function TIM1_DisIn
                                     97 ;	-----------------------------------------
      000017                         98 _TIM1_DisIn:
                                     99 ;	user/remote.c: 30: TIM1_ClearFlag(TIM1_FLAG_UPDATE); 
      000017 4B 01            [ 1]  100 	push	#0x01
      000019 4B 00            [ 1]  101 	push	#0x00
      00001B CDr00r00         [ 4]  102 	call	_TIM1_ClearFlag
      00001E 85               [ 2]  103 	popw	x
                                    104 ;	user/remote.c: 31: TIM1_ITConfig(TIM1_IT_UPDATE, DISABLE); 
      00001F 4B 00            [ 1]  105 	push	#0x00
      000021 4B 01            [ 1]  106 	push	#0x01
      000023 CDr00r00         [ 4]  107 	call	_TIM1_ITConfig
      000026 85               [ 2]  108 	popw	x
      000027 81               [ 4]  109 	ret
                                    110 ;	user/remote.c: 34: void TIM1_Config(void)
                                    111 ;	-----------------------------------------
                                    112 ;	 function TIM1_Config
                                    113 ;	-----------------------------------------
      000028                        114 _TIM1_Config:
                                    115 ;	user/remote.c: 36: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER1 , ENABLE); 
      000028 4B 01            [ 1]  116 	push	#0x01
      00002A 4B 07            [ 1]  117 	push	#0x07
      00002C CDr00r00         [ 4]  118 	call	_CLK_PeripheralClockConfig
      00002F 85               [ 2]  119 	popw	x
                                    120 ;	user/remote.c: 38: TIM1_DeInit();
      000030 CDr00r00         [ 4]  121 	call	_TIM1_DeInit
                                    122 ;	user/remote.c: 39: TIM1_TimeBaseInit(15, TIM1_COUNTERMODE_UP, 65535, 0);
      000033 4B 00            [ 1]  123 	push	#0x00
      000035 4B FF            [ 1]  124 	push	#0xff
      000037 4B FF            [ 1]  125 	push	#0xff
      000039 4B 00            [ 1]  126 	push	#0x00
      00003B 4B 0F            [ 1]  127 	push	#0x0f
      00003D 4B 00            [ 1]  128 	push	#0x00
      00003F CDr00r00         [ 4]  129 	call	_TIM1_TimeBaseInit
      000042 5B 06            [ 2]  130 	addw	sp, #6
                                    131 ;	user/remote.c: 40: TIM1_SetCounter(0);
      000044 5F               [ 1]  132 	clrw	x
      000045 89               [ 2]  133 	pushw	x
      000046 CDr00r00         [ 4]  134 	call	_TIM1_SetCounter
      000049 85               [ 2]  135 	popw	x
                                    136 ;	user/remote.c: 42: TIM1_Cmd(ENABLE);
      00004A 4B 01            [ 1]  137 	push	#0x01
      00004C CDr00r00         [ 4]  138 	call	_TIM1_Cmd
      00004F 84               [ 1]  139 	pop	a
      000050 81               [ 4]  140 	ret
                                    141 ;	user/remote.c: 45: void GPIO_Configuration(void)
                                    142 ;	-----------------------------------------
                                    143 ;	 function GPIO_Configuration
                                    144 ;	-----------------------------------------
      000051                        145 _GPIO_Configuration:
                                    146 ;	user/remote.c: 47: GPIO_Init(GPIOD, GPIO_PIN_3, GPIO_MODE_IN_FL_IT);
      000051 4B 20            [ 1]  147 	push	#0x20
      000053 4B 08            [ 1]  148 	push	#0x08
      000055 4B 0F            [ 1]  149 	push	#0x0f
      000057 4B 50            [ 1]  150 	push	#0x50
      000059 CDr00r00         [ 4]  151 	call	_GPIO_Init
      00005C 5B 04            [ 2]  152 	addw	sp, #4
                                    153 ;	user/remote.c: 49: EXTI_SetExtIntSensitivity(EXTI_PORT_GPIOD, EXTI_SENSITIVITY_RISE_FALL);
      00005E 4B 03            [ 1]  154 	push	#0x03
      000060 4B 03            [ 1]  155 	push	#0x03
      000062 CDr00r00         [ 4]  156 	call	_EXTI_SetExtIntSensitivity
      000065 85               [ 2]  157 	popw	x
      000066 81               [ 4]  158 	ret
                                    159 ;	user/remote.c: 52: void remote_Init(void)
                                    160 ;	-----------------------------------------
                                    161 ;	 function remote_Init
                                    162 ;	-----------------------------------------
      000067                        163 _remote_Init:
                                    164 ;	user/remote.c: 54: remote_Clear();
      000067 CDr01r75         [ 4]  165 	call	_remote_Clear
                                    166 ;	user/remote.c: 55: remote.command = 0;
      00006A AEr00r95         [ 2]  167 	ldw	x, #_remote+149
      00006D 90 5F            [ 1]  168 	clrw	y
      00006F EF 02            [ 2]  169 	ldw	(0x2, x), y
      000071 FF               [ 2]  170 	ldw	(x), y
                                    171 ;	user/remote.c: 56: TIM1_Config();
      000072 CDr00r28         [ 4]  172 	call	_TIM1_Config
                                    173 ;	user/remote.c: 57: GPIO_Configuration();
      000075 CCr00r51         [ 2]  174 	jp	_GPIO_Configuration
                                    175 ;	user/remote.c: 60: uint32_t remote_CheckCompare(uint32_t dat, uint32_t *buf, uint8_t offset, uint8_t len)
                                    176 ;	-----------------------------------------
                                    177 ;	 function remote_CheckCompare
                                    178 ;	-----------------------------------------
      000078                        179 _remote_CheckCompare:
      000078 52 04            [ 2]  180 	sub	sp, #4
                                    181 ;	user/remote.c: 64: for(add = 0;add < len;add++)
      00007A 4F               [ 1]  182 	clr	a
      00007B                        183 00107$:
      00007B 11 0E            [ 1]  184 	cp	a, (0x0e, sp)
      00007D 24 2E            [ 1]  185 	jrnc	00105$
                                    186 ;	user/remote.c: 66: if(add == offset)
      00007F 11 0D            [ 1]  187 	cp	a, (0x0d, sp)
      000081 26 01            [ 1]  188 	jrne	00102$
                                    189 ;	user/remote.c: 67: add++;
      000083 4C               [ 1]  190 	inc	a
      000084                        191 00102$:
                                    192 ;	user/remote.c: 68: if(dat == buf[add])
      000084 5F               [ 1]  193 	clrw	x
      000085 97               [ 1]  194 	ld	xl, a
      000086 58               [ 2]  195 	sllw	x
      000087 58               [ 2]  196 	sllw	x
      000088 72 FB 0B         [ 2]  197 	addw	x, (0x0b, sp)
      00008B 88               [ 1]  198 	push	a
      00008C E6 03            [ 1]  199 	ld	a, (0x3, x)
      00008E 6B 05            [ 1]  200 	ld	(0x05, sp), a
      000090 E6 02            [ 1]  201 	ld	a, (0x2, x)
      000092 6B 04            [ 1]  202 	ld	(0x04, sp), a
      000094 FE               [ 2]  203 	ldw	x, (x)
      000095 1F 02            [ 2]  204 	ldw	(0x02, sp), x
      000097 84               [ 1]  205 	pop	a
      000098 1E 09            [ 2]  206 	ldw	x, (0x09, sp)
      00009A 13 03            [ 2]  207 	cpw	x, (0x03, sp)
      00009C 26 0C            [ 1]  208 	jrne	00108$
      00009E 1E 07            [ 2]  209 	ldw	x, (0x07, sp)
      0000A0 13 01            [ 2]  210 	cpw	x, (0x01, sp)
      0000A2 26 06            [ 1]  211 	jrne	00108$
                                    212 ;	user/remote.c: 69: return dat;
      0000A4 1E 09            [ 2]  213 	ldw	x, (0x09, sp)
      0000A6 16 07            [ 2]  214 	ldw	y, (0x07, sp)
      0000A8 20 06            [ 2]  215 	jra	00109$
      0000AA                        216 00108$:
                                    217 ;	user/remote.c: 64: for(add = 0;add < len;add++)
      0000AA 4C               [ 1]  218 	inc	a
      0000AB 20 CE            [ 2]  219 	jra	00107$
      0000AD                        220 00105$:
                                    221 ;	user/remote.c: 71: return 0;
      0000AD 5F               [ 1]  222 	clrw	x
      0000AE 90 5F            [ 1]  223 	clrw	y
      0000B0                        224 00109$:
      0000B0 5B 04            [ 2]  225 	addw	sp, #4
      0000B2 81               [ 4]  226 	ret
                                    227 ;	user/remote.c: 74: void remote_Decode(void)
                                    228 ;	-----------------------------------------
                                    229 ;	 function remote_Decode
                                    230 ;	-----------------------------------------
      0000B3                        231 _remote_Decode:
      0000B3 52 11            [ 2]  232 	sub	sp, #17
                                    233 ;	user/remote.c: 76: uint32_t RC_dataIndex = 0;
      0000B5 5F               [ 1]  234 	clrw	x
      0000B6 1F 03            [ 2]  235 	ldw	(0x03, sp), x
      0000B8 1F 01            [ 2]  236 	ldw	(0x01, sp), x
                                    237 ;	user/remote.c: 78: for(add = 1;add < (BIT_READ*2)+1;add+=2)
      0000BA AEr00r00         [ 2]  238 	ldw	x, #_remote+0
      0000BD 1F 08            [ 2]  239 	ldw	(0x08, sp), x
      0000BF 1E 08            [ 2]  240 	ldw	x, (0x08, sp)
      0000C1 1C 00 03         [ 2]  241 	addw	x, #0x0003
      0000C4 1F 0C            [ 2]  242 	ldw	(0x0c, sp), x
      0000C6 A6 01            [ 1]  243 	ld	a, #0x01
      0000C8 6B 05            [ 1]  244 	ld	(0x05, sp), a
      0000CA                        245 00117$:
                                    246 ;	user/remote.c: 80: if((remote.buff[add] >= MIN_LSB_BIT_TIME_US)&&(remote.buff[add] < MAX_LSB_BIT_TIME_US)&&(remote.buff[add+1] >= MIN_MSB_BIT_TIME_US)&&(remote.buff[add+1] < MAX_MSB_BIT_TIME_US))
      0000CA 7B 05            [ 1]  247 	ld	a, (0x05, sp)
      0000CC 48               [ 1]  248 	sll	a
      0000CD 5F               [ 1]  249 	clrw	x
      0000CE 97               [ 1]  250 	ld	xl, a
      0000CF 72 FB 0C         [ 2]  251 	addw	x, (0x0c, sp)
      0000D2 FE               [ 2]  252 	ldw	x, (x)
      0000D3 1F 0E            [ 2]  253 	ldw	(0x0e, sp), x
      0000D5 7B 05            [ 1]  254 	ld	a, (0x05, sp)
      0000D7 4C               [ 1]  255 	inc	a
      0000D8 48               [ 1]  256 	sll	a
      0000D9 97               [ 1]  257 	ld	xl, a
      0000DA 4F               [ 1]  258 	clr	a
      0000DB 95               [ 1]  259 	ld	xh, a
      0000DC 72 FB 0C         [ 2]  260 	addw	x, (0x0c, sp)
      0000DF 1F 06            [ 2]  261 	ldw	(0x06, sp), x
      0000E1 1E 0E            [ 2]  262 	ldw	x, (0x0e, sp)
      0000E3 A3 01 2C         [ 2]  263 	cpw	x, #0x012c
      0000E6 25 14            [ 1]  264 	jrc	00108$
      0000E8 1E 0E            [ 2]  265 	ldw	x, (0x0e, sp)
      0000EA A3 01 F4         [ 2]  266 	cpw	x, #0x01f4
      0000ED 24 0D            [ 1]  267 	jrnc	00108$
      0000EF 1E 06            [ 2]  268 	ldw	x, (0x06, sp)
      0000F1 FE               [ 2]  269 	ldw	x, (x)
      0000F2 A3 02 BC         [ 2]  270 	cpw	x, #0x02bc
      0000F5 25 05            [ 1]  271 	jrc	00108$
      0000F7 A3 04 B0         [ 2]  272 	cpw	x, #0x04b0
      0000FA 25 2E            [ 1]  273 	jrc	00109$
                                    274 ;	user/remote.c: 81: RC_dataIndex |= 0;
      0000FC                        275 00108$:
                                    276 ;	user/remote.c: 82: else if((remote.buff[add] >= MIN_MSB_BIT_TIME_US)&&(remote.buff[add] < MAX_MSB_BIT_TIME_US)&&(remote.buff[add+1] >= MIN_LSB_BIT_TIME_US)&&(remote.buff[add+1] < MAX_LSB_BIT_TIME_US))
      0000FC 1E 0E            [ 2]  277 	ldw	x, (0x0e, sp)
      0000FE A3 02 BC         [ 2]  278 	cpw	x, #0x02bc
      000101 25 6F            [ 1]  279 	jrc	00119$
      000103 1E 0E            [ 2]  280 	ldw	x, (0x0e, sp)
      000105 A3 04 B0         [ 2]  281 	cpw	x, #0x04b0
      000108 24 68            [ 1]  282 	jrnc	00119$
      00010A 1E 06            [ 2]  283 	ldw	x, (0x06, sp)
      00010C FE               [ 2]  284 	ldw	x, (x)
      00010D A3 01 2C         [ 2]  285 	cpw	x, #0x012c
      000110 25 60            [ 1]  286 	jrc	00119$
      000112 A3 01 F4         [ 2]  287 	cpw	x, #0x01f4
      000115 24 5B            [ 1]  288 	jrnc	00119$
                                    289 ;	user/remote.c: 83: RC_dataIndex |= 1;
      000117 1E 03            [ 2]  290 	ldw	x, (0x03, sp)
      000119 54               [ 2]  291 	srlw	x
      00011A 99               [ 1]  292 	scf
      00011B 59               [ 2]  293 	rlcw	x
      00011C 7B 02            [ 1]  294 	ld	a, (0x02, sp)
      00011E 90 97            [ 1]  295 	ld	yl, a
      000120 7B 01            [ 1]  296 	ld	a, (0x01, sp)
      000122 90 95            [ 1]  297 	ld	yh, a
      000124 1F 03            [ 2]  298 	ldw	(0x03, sp), x
      000126 17 01            [ 2]  299 	ldw	(0x01, sp), y
                                    300 ;	user/remote.c: 85: return;
      000128 20 00            [ 2]  301 	jra	00109$
      00012A                        302 00109$:
                                    303 ;	user/remote.c: 86: RC_dataIndex <<= 1;
      00012A 1E 03            [ 2]  304 	ldw	x, (0x03, sp)
      00012C 16 01            [ 2]  305 	ldw	y, (0x01, sp)
      00012E 58               [ 2]  306 	sllw	x
      00012F 90 59            [ 2]  307 	rlcw	y
      000131 1F 03            [ 2]  308 	ldw	(0x03, sp), x
      000133 17 01            [ 2]  309 	ldw	(0x01, sp), y
                                    310 ;	user/remote.c: 78: for(add = 1;add < (BIT_READ*2)+1;add+=2)
      000135 0C 05            [ 1]  311 	inc	(0x05, sp)
      000137 0C 05            [ 1]  312 	inc	(0x05, sp)
      000139 7B 05            [ 1]  313 	ld	a, (0x05, sp)
      00013B A1 31            [ 1]  314 	cp	a, #0x31
      00013D 25 8B            [ 1]  315 	jrc	00117$
                                    316 ;	user/remote.c: 88: remote.cmdBuff[remote.cntCmd] = RC_dataIndex;
      00013F 1E 08            [ 2]  317 	ldw	x, (0x08, sp)
      000141 1C 00 7C         [ 2]  318 	addw	x, #0x007c
      000144 1F 10            [ 2]  319 	ldw	(0x10, sp), x
      000146 1E 08            [ 2]  320 	ldw	x, (0x08, sp)
      000148 1C 00 7B         [ 2]  321 	addw	x, #0x007b
      00014B 1F 0A            [ 2]  322 	ldw	(0x0a, sp), x
      00014D 1E 0A            [ 2]  323 	ldw	x, (0x0a, sp)
      00014F F6               [ 1]  324 	ld	a, (x)
      000150 48               [ 1]  325 	sll	a
      000151 48               [ 1]  326 	sll	a
      000152 5F               [ 1]  327 	clrw	x
      000153 97               [ 1]  328 	ld	xl, a
      000154 72 FB 10         [ 2]  329 	addw	x, (0x10, sp)
      000157 16 03            [ 2]  330 	ldw	y, (0x03, sp)
      000159 EF 02            [ 2]  331 	ldw	(0x2, x), y
      00015B 16 01            [ 2]  332 	ldw	y, (0x01, sp)
      00015D FF               [ 2]  333 	ldw	(x), y
                                    334 ;	user/remote.c: 89: if(remote.cntCmd < (MAX_BUFF_CMD-1))
      00015E 1E 0A            [ 2]  335 	ldw	x, (0x0a, sp)
      000160 F6               [ 1]  336 	ld	a, (x)
      000161 A1 04            [ 1]  337 	cp	a, #0x04
      000163 24 06            [ 1]  338 	jrnc	00115$
                                    339 ;	user/remote.c: 90: remote.cntCmd++;
      000165 4C               [ 1]  340 	inc	a
      000166 1E 0A            [ 2]  341 	ldw	x, (0x0a, sp)
      000168 F7               [ 1]  342 	ld	(x), a
      000169 20 07            [ 2]  343 	jra	00119$
      00016B                        344 00115$:
                                    345 ;	user/remote.c: 92: remote.flag = 1;
      00016B 1E 08            [ 2]  346 	ldw	x, (0x08, sp)
      00016D 5C               [ 2]  347 	incw	x
      00016E 5C               [ 2]  348 	incw	x
      00016F A6 01            [ 1]  349 	ld	a, #0x01
      000171 F7               [ 1]  350 	ld	(x), a
      000172                        351 00119$:
      000172 5B 11            [ 2]  352 	addw	sp, #17
      000174 81               [ 4]  353 	ret
                                    354 ;	user/remote.c: 95: void remote_Clear(void)
                                    355 ;	-----------------------------------------
                                    356 ;	 function remote_Clear
                                    357 ;	-----------------------------------------
      000175                        358 _remote_Clear:
      000175 89               [ 2]  359 	pushw	x
                                    360 ;	user/remote.c: 97: remote.startBit = 0;
      000176 AEr00r00         [ 2]  361 	ldw	x, #_remote+0
      000179 7F               [ 1]  362 	clr	(x)
                                    363 ;	user/remote.c: 98: remote.cnt = 0;
      00017A AEr00r00         [ 2]  364 	ldw	x, #_remote+0
      00017D 1F 01            [ 2]  365 	ldw	(0x01, sp), x
      00017F 1E 01            [ 2]  366 	ldw	x, (0x01, sp)
      000181 5C               [ 2]  367 	incw	x
      000182 7F               [ 1]  368 	clr	(x)
                                    369 ;	user/remote.c: 99: remote.cntCmd = 0;
      000183 1E 01            [ 2]  370 	ldw	x, (0x01, sp)
      000185 1C 00 7B         [ 2]  371 	addw	x, #0x007b
      000188 7F               [ 1]  372 	clr	(x)
                                    373 ;	user/remote.c: 100: remote.flag = 0;
      000189 1E 01            [ 2]  374 	ldw	x, (0x01, sp)
      00018B 5C               [ 2]  375 	incw	x
      00018C 5C               [ 2]  376 	incw	x
      00018D 7F               [ 1]  377 	clr	(x)
                                    378 ;	user/remote.c: 101: remote.lastCmd = 0;
      00018E 1E 01            [ 2]  379 	ldw	x, (0x01, sp)
      000190 1C 00 90         [ 2]  380 	addw	x, #0x0090
      000193 90 5F            [ 1]  381 	clrw	y
      000195 EF 02            [ 2]  382 	ldw	(0x2, x), y
      000197 FF               [ 2]  383 	ldw	(x), y
                                    384 ;	user/remote.c: 102: remote.compareCnt = 0;
      000198 1E 01            [ 2]  385 	ldw	x, (0x01, sp)
      00019A 1C 00 94         [ 2]  386 	addw	x, #0x0094
      00019D 7F               [ 1]  387 	clr	(x)
      00019E 85               [ 2]  388 	popw	x
      00019F 81               [ 4]  389 	ret
                                    390 ;	user/remote.c: 105: void remote_Process(void)
                                    391 ;	-----------------------------------------
                                    392 ;	 function remote_Process
                                    393 ;	-----------------------------------------
      0001A0                        394 _remote_Process:
      0001A0 52 08            [ 2]  395 	sub	sp, #8
                                    396 ;	user/remote.c: 108: TIM1_DisIn();
      0001A2 CDr00r17         [ 4]  397 	call	_TIM1_DisIn
                                    398 ;	user/remote.c: 109: dat = TIM1_GetCounter();
      0001A5 CDr00r00         [ 4]  399 	call	_TIM1_GetCounter
      0001A8 1F 01            [ 2]  400 	ldw	(0x01, sp), x
      0001AA 16 01            [ 2]  401 	ldw	y, (0x01, sp)
                                    402 ;	user/remote.c: 110: if((dat >= MIN_SYN_BIT_TIME_US)&&(dat < MAX_SYN_BIT_TIME_US))
      0001AC 90 A3 15 7C      [ 2]  403 	cpw	y, #0x157c
      0001B0 25 14            [ 1]  404 	jrc	00104$
      0001B2 90 A3 2E E0      [ 2]  405 	cpw	y, #0x2ee0
      0001B6 24 0E            [ 1]  406 	jrnc	00104$
                                    407 ;	user/remote.c: 112: if(remote.startBit == 0)
      0001B8 AEr00r00         [ 2]  408 	ldw	x, #_remote+0
      0001BB F6               [ 1]  409 	ld	a, (x)
      0001BC 4D               [ 1]  410 	tnz	a
      0001BD 26 07            [ 1]  411 	jrne	00104$
                                    412 ;	user/remote.c: 114: remote.startBit = 1;
      0001BF A6 01            [ 1]  413 	ld	a, #0x01
      0001C1 F7               [ 1]  414 	ld	(x), a
                                    415 ;	user/remote.c: 115: remote.cnt = 0;
      0001C2 AEr00r01         [ 2]  416 	ldw	x, #_remote+1
      0001C5 7F               [ 1]  417 	clr	(x)
      0001C6                        418 00104$:
                                    419 ;	user/remote.c: 118: if(remote.startBit == 1)
      0001C6 AEr00r00         [ 2]  420 	ldw	x, #_remote+0
      0001C9 F6               [ 1]  421 	ld	a, (x)
      0001CA A1 01            [ 1]  422 	cp	a, #0x01
      0001CC 26 2D            [ 1]  423 	jrne	00109$
                                    424 ;	user/remote.c: 120: remote.buff[remote.cnt] = dat;
      0001CE AEr00r00         [ 2]  425 	ldw	x, #_remote+0
      0001D1 1F 07            [ 2]  426 	ldw	(0x07, sp), x
      0001D3 1E 07            [ 2]  427 	ldw	x, (0x07, sp)
      0001D5 1C 00 03         [ 2]  428 	addw	x, #0x0003
      0001D8 1F 05            [ 2]  429 	ldw	(0x05, sp), x
      0001DA 1E 07            [ 2]  430 	ldw	x, (0x07, sp)
      0001DC 5C               [ 2]  431 	incw	x
      0001DD 1F 03            [ 2]  432 	ldw	(0x03, sp), x
      0001DF 1E 03            [ 2]  433 	ldw	x, (0x03, sp)
      0001E1 F6               [ 1]  434 	ld	a, (x)
      0001E2 48               [ 1]  435 	sll	a
      0001E3 5F               [ 1]  436 	clrw	x
      0001E4 97               [ 1]  437 	ld	xl, a
      0001E5 72 FB 05         [ 2]  438 	addw	x, (0x05, sp)
      0001E8 FF               [ 2]  439 	ldw	(x), y
                                    440 ;	user/remote.c: 121: if(++remote.cnt > (MAX_BIT_READ*2))
      0001E9 1E 03            [ 2]  441 	ldw	x, (0x03, sp)
      0001EB F6               [ 1]  442 	ld	a, (x)
      0001EC 4C               [ 1]  443 	inc	a
      0001ED F7               [ 1]  444 	ld	(x), a
      0001EE A1 32            [ 1]  445 	cp	a, #0x32
      0001F0 23 09            [ 2]  446 	jrule	00109$
                                    447 ;	user/remote.c: 123: remote.startBit = 0;
      0001F2 1E 07            [ 2]  448 	ldw	x, (0x07, sp)
      0001F4 7F               [ 1]  449 	clr	(x)
                                    450 ;	user/remote.c: 124: remote.cnt = 0;
      0001F5 1E 03            [ 2]  451 	ldw	x, (0x03, sp)
      0001F7 7F               [ 1]  452 	clr	(x)
                                    453 ;	user/remote.c: 125: remote_Decode();
      0001F8 CDr00rB3         [ 4]  454 	call	_remote_Decode
      0001FB                        455 00109$:
                                    456 ;	user/remote.c: 128: TIM1_EnIn();
      0001FB CDr00r00         [ 4]  457 	call	_TIM1_EnIn
      0001FE 5B 08            [ 2]  458 	addw	sp, #8
      000200 81               [ 4]  459 	ret
                                    460 ;	user/remote.c: 133: void remote_Manager(void)
                                    461 ;	-----------------------------------------
                                    462 ;	 function remote_Manager
                                    463 ;	-----------------------------------------
      000201                        464 _remote_Manager:
      000201 52 33            [ 2]  465 	sub	sp, #51
                                    466 ;	user/remote.c: 138: if(TIMER_CheckTimeMS(&remote.time, 100) == 0)
      000203 AEr00r00         [ 2]  467 	ldw	x, #_remote+0
      000206 1F 32            [ 2]  468 	ldw	(0x32, sp), x
      000208 1E 32            [ 2]  469 	ldw	x, (0x32, sp)
      00020A 1C 00 99         [ 2]  470 	addw	x, #0x0099
      00020D 4B 64            [ 1]  471 	push	#0x64
      00020F 4B 00            [ 1]  472 	push	#0x00
      000211 4B 00            [ 1]  473 	push	#0x00
      000213 4B 00            [ 1]  474 	push	#0x00
      000215 89               [ 2]  475 	pushw	x
      000216 CDr00r00         [ 4]  476 	call	_TIMER_CheckTimeMS
      000219 5B 06            [ 2]  477 	addw	sp, #6
      00021B 4D               [ 1]  478 	tnz	a
      00021C 27 03            [ 1]  479 	jreq	00162$
      00021E CCr03r9F         [ 2]  480 	jp	00119$
      000221                        481 00162$:
                                    482 ;	user/remote.c: 141: if(ctrCnt != 0)ctrCnt--;
      000221 72 5Du00u01      [ 1]  483 	tnz	_ctrCnt+0
      000225 27 04            [ 1]  484 	jreq	00102$
      000227 72 5Au00u01      [ 1]  485 	dec	_ctrCnt+0
      00022B                        486 00102$:
                                    487 ;	user/remote.c: 146: if(remote.flag == 1)
      00022B 1E 32            [ 2]  488 	ldw	x, (0x32, sp)
      00022D E6 02            [ 1]  489 	ld	a, (0x2, x)
      00022F A1 01            [ 1]  490 	cp	a, #0x01
      000231 27 03            [ 1]  491 	jreq	00166$
      000233 CCr03r9F         [ 2]  492 	jp	00119$
      000236                        493 00166$:
                                    494 ;	user/remote.c: 148: disableInterrupts();
      000236 9B               [ 1]  495 	sim
                                    496 ;	user/remote.c: 149: remote.compareCnt = 0;
      000237 1E 32            [ 2]  497 	ldw	x, (0x32, sp)
      000239 1C 00 94         [ 2]  498 	addw	x, #0x0094
      00023C 1F 30            [ 2]  499 	ldw	(0x30, sp), x
      00023E 1E 30            [ 2]  500 	ldw	x, (0x30, sp)
      000240 7F               [ 1]  501 	clr	(x)
                                    502 ;	user/remote.c: 150: for(add = 0;add < MAX_BUFF_CMD;add++)
      000241 AEr03rBE         [ 2]  503 	ldw	x, #___str_2+0
      000244 1F 2E            [ 2]  504 	ldw	(0x2e, sp), x
      000246 AEr03rB1         [ 2]  505 	ldw	x, #___str_1+0
      000249 1F 2C            [ 2]  506 	ldw	(0x2c, sp), x
      00024B 1E 32            [ 2]  507 	ldw	x, (0x32, sp)
      00024D 1C 00 7C         [ 2]  508 	addw	x, #0x007c
      000250 1F 24            [ 2]  509 	ldw	(0x24, sp), x
      000252 AEr03rA2         [ 2]  510 	ldw	x, #___str_0+0
      000255 1F 2A            [ 2]  511 	ldw	(0x2a, sp), x
      000257 0F 05            [ 1]  512 	clr	(0x05, sp)
      000259                        513 00117$:
                                    514 ;	user/remote.c: 152: cm[0] = (remote.cmdBuff[add]&0xFF000000)>>24;
      000259 96               [ 1]  515 	ldw	x, sp
      00025A 5C               [ 2]  516 	incw	x
      00025B 1F 1C            [ 2]  517 	ldw	(0x1c, sp), x
      00025D 7B 05            [ 1]  518 	ld	a, (0x05, sp)
      00025F 97               [ 1]  519 	ld	xl, a
      000260 58               [ 2]  520 	sllw	x
      000261 58               [ 2]  521 	sllw	x
      000262 4F               [ 1]  522 	clr	a
      000263 95               [ 1]  523 	ld	xh, a
      000264 72 FB 24         [ 2]  524 	addw	x, (0x24, sp)
      000267 1F 1E            [ 2]  525 	ldw	(0x1e, sp), x
      000269 1E 1E            [ 2]  526 	ldw	x, (0x1e, sp)
      00026B 89               [ 2]  527 	pushw	x
      00026C EE 02            [ 2]  528 	ldw	x, (0x2, x)
      00026E 51               [ 1]  529 	exgw	x, y
      00026F 85               [ 2]  530 	popw	x
      000270 FE               [ 2]  531 	ldw	x, (x)
      000271 4F               [ 1]  532 	clr	a
      000272 90 5F            [ 1]  533 	clrw	y
      000274 9E               [ 1]  534 	ld	a, xh
      000275 5F               [ 1]  535 	clrw	x
      000276 0F 0A            [ 1]  536 	clr	(0x0a, sp)
      000278 1E 1C            [ 2]  537 	ldw	x, (0x1c, sp)
      00027A F7               [ 1]  538 	ld	(x), a
                                    539 ;	user/remote.c: 153: cm[1] = (remote.cmdBuff[add]&0x00FF0000)>>16;
      00027B 1E 1C            [ 2]  540 	ldw	x, (0x1c, sp)
      00027D 5C               [ 2]  541 	incw	x
      00027E 1F 1A            [ 2]  542 	ldw	(0x1a, sp), x
      000280 1E 1E            [ 2]  543 	ldw	x, (0x1e, sp)
      000282 89               [ 2]  544 	pushw	x
      000283 EE 02            [ 2]  545 	ldw	x, (0x2, x)
      000285 51               [ 1]  546 	exgw	x, y
      000286 85               [ 2]  547 	popw	x
      000287 FE               [ 2]  548 	ldw	x, (x)
      000288 90 5F            [ 1]  549 	clrw	y
      00028A 4F               [ 1]  550 	clr	a
      00028B 90 5F            [ 1]  551 	clrw	y
      00028D 9F               [ 1]  552 	ld	a, xl
      00028E 1E 1A            [ 2]  553 	ldw	x, (0x1a, sp)
      000290 F7               [ 1]  554 	ld	(x), a
                                    555 ;	user/remote.c: 154: cm[2] = (remote.cmdBuff[add]&0x0000FF00)>>8;
      000291 1E 1C            [ 2]  556 	ldw	x, (0x1c, sp)
      000293 5C               [ 2]  557 	incw	x
      000294 5C               [ 2]  558 	incw	x
      000295 1F 28            [ 2]  559 	ldw	(0x28, sp), x
      000297 1E 1E            [ 2]  560 	ldw	x, (0x1e, sp)
      000299 89               [ 2]  561 	pushw	x
      00029A EE 02            [ 2]  562 	ldw	x, (0x2, x)
      00029C 51               [ 1]  563 	exgw	x, y
      00029D 85               [ 2]  564 	popw	x
      00029E FE               [ 2]  565 	ldw	x, (x)
      00029F 0F 19            [ 1]  566 	clr	(0x19, sp)
      0002A1 5F               [ 1]  567 	clrw	x
      0002A2 4F               [ 1]  568 	clr	a
      0002A3 90 9E            [ 1]  569 	ld	a, yh
      0002A5 1E 28            [ 2]  570 	ldw	x, (0x28, sp)
      0002A7 F7               [ 1]  571 	ld	(x), a
                                    572 ;	user/remote.c: 155: cm[3] = (remote.cmdBuff[add]&0x000000FF)>>0;
      0002A8 1E 1C            [ 2]  573 	ldw	x, (0x1c, sp)
      0002AA 1C 00 03         [ 2]  574 	addw	x, #0x0003
      0002AD 1F 20            [ 2]  575 	ldw	(0x20, sp), x
      0002AF 1E 1E            [ 2]  576 	ldw	x, (0x1e, sp)
      0002B1 89               [ 2]  577 	pushw	x
      0002B2 EE 02            [ 2]  578 	ldw	x, (0x2, x)
      0002B4 51               [ 1]  579 	exgw	x, y
      0002B5 85               [ 2]  580 	popw	x
      0002B6 FE               [ 2]  581 	ldw	x, (x)
      0002B7 4F               [ 1]  582 	clr	a
      0002B8 5F               [ 1]  583 	clrw	x
      0002B9 90 9F            [ 1]  584 	ld	a, yl
      0002BB 1E 20            [ 2]  585 	ldw	x, (0x20, sp)
      0002BD F7               [ 1]  586 	ld	(x), a
                                    587 ;	user/remote.c: 156: debugInfo("Data decoder: ", cm, 4);
      0002BE 16 1C            [ 2]  588 	ldw	y, (0x1c, sp)
      0002C0 1E 2A            [ 2]  589 	ldw	x, (0x2a, sp)
      0002C2 4B 04            [ 1]  590 	push	#0x04
      0002C4 90 89            [ 2]  591 	pushw	y
      0002C6 89               [ 2]  592 	pushw	x
      0002C7 CDr00r00         [ 4]  593 	call	_debugInfo
      0002CA 5B 05            [ 2]  594 	addw	sp, #5
                                    595 ;	user/remote.c: 157: if(remote.cmdBuff[add] != 0)
      0002CC 1E 1E            [ 2]  596 	ldw	x, (0x1e, sp)
      0002CE E6 03            [ 1]  597 	ld	a, (0x3, x)
      0002D0 6B 09            [ 1]  598 	ld	(0x09, sp), a
      0002D2 E6 02            [ 1]  599 	ld	a, (0x2, x)
      0002D4 6B 08            [ 1]  600 	ld	(0x08, sp), a
      0002D6 FE               [ 2]  601 	ldw	x, (x)
      0002D7 1F 06            [ 2]  602 	ldw	(0x06, sp), x
      0002D9 1E 08            [ 2]  603 	ldw	x, (0x08, sp)
      0002DB 26 07            [ 1]  604 	jrne	00167$
      0002DD 1E 06            [ 2]  605 	ldw	x, (0x06, sp)
      0002DF 26 03            [ 1]  606 	jrne	00167$
      0002E1 CCr03r90         [ 2]  607 	jp	00118$
      0002E4                        608 00167$:
                                    609 ;	user/remote.c: 159: if(remote_CheckCompare(remote.cmdBuff[add], remote.cmdBuff, add, MAX_BUFF_CMD))
      0002E4 1E 24            [ 2]  610 	ldw	x, (0x24, sp)
      0002E6 4B 05            [ 1]  611 	push	#0x05
      0002E8 7B 06            [ 1]  612 	ld	a, (0x06, sp)
      0002EA 88               [ 1]  613 	push	a
      0002EB 89               [ 2]  614 	pushw	x
      0002EC 1E 0C            [ 2]  615 	ldw	x, (0x0c, sp)
      0002EE 89               [ 2]  616 	pushw	x
      0002EF 1E 0C            [ 2]  617 	ldw	x, (0x0c, sp)
      0002F1 89               [ 2]  618 	pushw	x
      0002F2 CDr00r78         [ 4]  619 	call	_remote_CheckCompare
      0002F5 5B 08            [ 2]  620 	addw	sp, #8
      0002F7 5D               [ 2]  621 	tnzw	x
      0002F8 26 07            [ 1]  622 	jrne	00168$
      0002FA 90 5D            [ 2]  623 	tnzw	y
      0002FC 26 03            [ 1]  624 	jrne	00168$
      0002FE CCr03r90         [ 2]  625 	jp	00118$
      000301                        626 00168$:
                                    627 ;	user/remote.c: 161: remote.lastCmd = remote.cmdBuff[add];
      000301 1E 32            [ 2]  628 	ldw	x, (0x32, sp)
      000303 1C 00 90         [ 2]  629 	addw	x, #0x0090
      000306 1F 26            [ 2]  630 	ldw	(0x26, sp), x
      000308 1E 1E            [ 2]  631 	ldw	x, (0x1e, sp)
      00030A 89               [ 2]  632 	pushw	x
      00030B EE 02            [ 2]  633 	ldw	x, (0x2, x)
      00030D 51               [ 1]  634 	exgw	x, y
      00030E 85               [ 2]  635 	popw	x
      00030F FE               [ 2]  636 	ldw	x, (x)
      000310 1F 12            [ 2]  637 	ldw	(0x12, sp), x
      000312 1E 26            [ 2]  638 	ldw	x, (0x26, sp)
      000314 EF 02            [ 2]  639 	ldw	(0x2, x), y
      000316 16 12            [ 2]  640 	ldw	y, (0x12, sp)
      000318 FF               [ 2]  641 	ldw	(x), y
                                    642 ;	user/remote.c: 162: remote.compareCnt++;
      000319 1E 30            [ 2]  643 	ldw	x, (0x30, sp)
      00031B F6               [ 1]  644 	ld	a, (x)
      00031C 4C               [ 1]  645 	inc	a
      00031D F7               [ 1]  646 	ld	(x), a
                                    647 ;	user/remote.c: 163: if(remote.compareCnt >= (MAX_BUFF_CMD - 2))
      00031E A1 03            [ 1]  648 	cp	a, #0x03
      000320 25 6E            [ 1]  649 	jrc	00118$
                                    650 ;	user/remote.c: 165: remote.compareCnt = 0;
      000322 1E 30            [ 2]  651 	ldw	x, (0x30, sp)
      000324 7F               [ 1]  652 	clr	(x)
                                    653 ;	user/remote.c: 166: remote.command = remote.lastCmd;
      000325 1E 32            [ 2]  654 	ldw	x, (0x32, sp)
      000327 1C 00 95         [ 2]  655 	addw	x, #0x0095
      00032A 1F 22            [ 2]  656 	ldw	(0x22, sp), x
      00032C 1E 26            [ 2]  657 	ldw	x, (0x26, sp)
      00032E 89               [ 2]  658 	pushw	x
      00032F EE 02            [ 2]  659 	ldw	x, (0x2, x)
      000331 51               [ 1]  660 	exgw	x, y
      000332 85               [ 2]  661 	popw	x
      000333 FE               [ 2]  662 	ldw	x, (x)
      000334 1F 0E            [ 2]  663 	ldw	(0x0e, sp), x
      000336 1E 22            [ 2]  664 	ldw	x, (0x22, sp)
      000338 EF 02            [ 2]  665 	ldw	(0x2, x), y
      00033A 7B 0F            [ 1]  666 	ld	a, (0x0f, sp)
      00033C E7 01            [ 1]  667 	ld	(0x1, x), a
      00033E 7B 0E            [ 1]  668 	ld	a, (0x0e, sp)
      000340 F7               [ 1]  669 	ld	(x), a
                                    670 ;	user/remote.c: 167: remote.lastCmd = 0;
      000341 1E 26            [ 2]  671 	ldw	x, (0x26, sp)
      000343 6F 03            [ 1]  672 	clr	(0x3, x)
      000345 6F 02            [ 1]  673 	clr	(0x2, x)
      000347 6F 01            [ 1]  674 	clr	(0x1, x)
      000349 7F               [ 1]  675 	clr	(x)
                                    676 ;	user/remote.c: 168: sys.idKeyGet = remote.command;
      00034A AEr00r01         [ 2]  677 	ldw	x, #_sys+1
      00034D EF 02            [ 2]  678 	ldw	(0x2, x), y
      00034F 16 0E            [ 2]  679 	ldw	y, (0x0e, sp)
      000351 FF               [ 2]  680 	ldw	(x), y
                                    681 ;	user/remote.c: 169: info("Key press \r\n");
      000352 1E 2C            [ 2]  682 	ldw	x, (0x2c, sp)
      000354 89               [ 2]  683 	pushw	x
      000355 CDr00r00         [ 4]  684 	call	_info
      000358 85               [ 2]  685 	popw	x
                                    686 ;	user/remote.c: 175: checkCmd = system_checkID(remote.command);
      000359 1E 22            [ 2]  687 	ldw	x, (0x22, sp)
      00035B 89               [ 2]  688 	pushw	x
      00035C EE 02            [ 2]  689 	ldw	x, (0x2, x)
      00035E 51               [ 1]  690 	exgw	x, y
      00035F 85               [ 2]  691 	popw	x
      000360 FE               [ 2]  692 	ldw	x, (x)
      000361 90 89            [ 2]  693 	pushw	y
      000363 89               [ 2]  694 	pushw	x
      000364 CDr00r00         [ 4]  695 	call	_system_checkID
      000367 5B 04            [ 2]  696 	addw	sp, #4
                                    697 ;	user/remote.c: 176: if((checkCmd == 1)&&(ctrCnt == 0))
      000369 A1 01            [ 1]  698 	cp	a, #0x01
      00036B 26 23            [ 1]  699 	jrne	00118$
      00036D 72 5Du00u01      [ 1]  700 	tnz	_ctrCnt+0
      000371 26 1D            [ 1]  701 	jrne	00118$
                                    702 ;	user/remote.c: 178: GPIO_WriteReverse(CTR_GPIO, CTR_PIN);
      000373 4B 04            [ 1]  703 	push	#0x04
      000375 4B 0F            [ 1]  704 	push	#0x0f
      000377 4B 50            [ 1]  705 	push	#0x50
      000379 CDr00r00         [ 4]  706 	call	_GPIO_WriteReverse
      00037C 5B 03            [ 2]  707 	addw	sp, #3
                                    708 ;	user/remote.c: 179: info("TurnOn A \r\n");
      00037E 1E 2E            [ 2]  709 	ldw	x, (0x2e, sp)
      000380 89               [ 2]  710 	pushw	x
      000381 CDr00r00         [ 4]  711 	call	_info
      000384 85               [ 2]  712 	popw	x
                                    713 ;	user/remote.c: 180: ctrCnt = 20;
      000385 35 14u00u01      [ 1]  714 	mov	_ctrCnt+0, #0x14
                                    715 ;	user/remote.c: 181: remote.command = 0;
      000389 1E 22            [ 2]  716 	ldw	x, (0x22, sp)
      00038B 90 5F            [ 1]  717 	clrw	y
      00038D EF 02            [ 2]  718 	ldw	(0x2, x), y
      00038F FF               [ 2]  719 	ldw	(x), y
      000390                        720 00118$:
                                    721 ;	user/remote.c: 150: for(add = 0;add < MAX_BUFF_CMD;add++)
      000390 0C 05            [ 1]  722 	inc	(0x05, sp)
      000392 7B 05            [ 1]  723 	ld	a, (0x05, sp)
      000394 A1 05            [ 1]  724 	cp	a, #0x05
      000396 24 03            [ 1]  725 	jrnc	00174$
      000398 CCr02r59         [ 2]  726 	jp	00117$
      00039B                        727 00174$:
                                    728 ;	user/remote.c: 187: remote_Clear();
      00039B CDr01r75         [ 4]  729 	call	_remote_Clear
                                    730 ;	user/remote.c: 188: enableInterrupts();
      00039E 9A               [ 1]  731 	rim
      00039F                        732 00119$:
      00039F 5B 33            [ 2]  733 	addw	sp, #51
      0003A1 81               [ 4]  734 	ret
                                    735 	.area CODE
      0003A2                        736 ___str_0:
      0003A2 44 61 74 61 20 64 65   737 	.ascii "Data decoder: "
             63 6F 64 65 72 3A 20
      0003B0 00                     738 	.db 0x00
      0003B1                        739 ___str_1:
      0003B1 4B 65 79 20 70 72 65   740 	.ascii "Key press "
             73 73 20
      0003BB 0D                     741 	.db 0x0d
      0003BC 0A                     742 	.db 0x0a
      0003BD 00                     743 	.db 0x00
      0003BE                        744 ___str_2:
      0003BE 54 75 72 6E 4F 6E 20   745 	.ascii "TurnOn A "
             41 20
      0003C7 0D                     746 	.db 0x0d
      0003C8 0A                     747 	.db 0x0a
      0003C9 00                     748 	.db 0x00
                                    749 	.area INITIALIZER
      000000                        750 __xinit__ctrFlag:
      000000 00                     751 	.db #0x00	; 0
      000001                        752 __xinit__ctrCnt:
      000001 00                     753 	.db #0x00	; 0
                                    754 	.area CABS (ABS)
